/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spdynamicforms.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachments;
import com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachmentsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPFormAttachments service. Represents a row in the &quot;SPFormAttachments&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachmentsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPFormAttachmentsImpl}.
 * </p>
 *
 * @author glenn
 * @see SPFormAttachmentsImpl
 * @see com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachments
 * @see com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachmentsModel
 * @generated
 */
public class SPFormAttachmentsModelImpl extends BaseModelImpl<SPFormAttachments>
	implements SPFormAttachmentsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p form attachments model instance should use the {@link com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachments} interface instead.
	 */
	public static final String TABLE_NAME = "SPFormAttachments";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spFormAttachmentsId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "formStorageId", Types.BIGINT },
			{ "dataKey", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "version", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SPFormAttachments (spFormAttachmentsId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,formStorageId BIGINT(20),dataKey VARCHAR(75) null,name VARCHAR(75) null,url VARCHAR(75) null,version VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SPFormAttachments";
	public static final String ORDER_BY_JPQL = " ORDER BY spFormAttachments.spFormAttachmentsId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPFormAttachments.spFormAttachmentsId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachments"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachments"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachments"));

	public SPFormAttachmentsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spFormAttachmentsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpFormAttachmentsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spFormAttachmentsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPFormAttachments.class;
	}

	@Override
	public String getModelClassName() {
		return SPFormAttachments.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spFormAttachmentsId", getSpFormAttachmentsId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("formStorageId", getFormStorageId());
		attributes.put("dataKey", getDataKey());
		attributes.put("name", getName());
		attributes.put("url", getUrl());
		attributes.put("version", getVersion());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spFormAttachmentsId = (Long)attributes.get("spFormAttachmentsId");

		if (spFormAttachmentsId != null) {
			setSpFormAttachmentsId(spFormAttachmentsId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long formStorageId = (Long)attributes.get("formStorageId");

		if (formStorageId != null) {
			setFormStorageId(formStorageId);
		}

		String dataKey = (String)attributes.get("dataKey");

		if (dataKey != null) {
			setDataKey(dataKey);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		String version = (String)attributes.get("version");

		if (version != null) {
			setVersion(version);
		}
	}

	@Override
	public long getSpFormAttachmentsId() {
		return _spFormAttachmentsId;
	}

	@Override
	public void setSpFormAttachmentsId(long spFormAttachmentsId) {
		_spFormAttachmentsId = spFormAttachmentsId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getFormStorageId() {
		return _formStorageId;
	}

	@Override
	public void setFormStorageId(long formStorageId) {
		_formStorageId = formStorageId;
	}

	@Override
	public String getDataKey() {
		if (_dataKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _dataKey;
		}
	}

	@Override
	public void setDataKey(String dataKey) {
		_dataKey = dataKey;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public String getVersion() {
		if (_version == null) {
			return StringPool.BLANK;
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		_version = version;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPFormAttachments.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPFormAttachments toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPFormAttachments)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPFormAttachmentsImpl spFormAttachmentsImpl = new SPFormAttachmentsImpl();

		spFormAttachmentsImpl.setSpFormAttachmentsId(getSpFormAttachmentsId());
		spFormAttachmentsImpl.setGroupId(getGroupId());
		spFormAttachmentsImpl.setCompanyId(getCompanyId());
		spFormAttachmentsImpl.setUserId(getUserId());
		spFormAttachmentsImpl.setUserName(getUserName());
		spFormAttachmentsImpl.setCreateDate(getCreateDate());
		spFormAttachmentsImpl.setModifiedDate(getModifiedDate());
		spFormAttachmentsImpl.setFormStorageId(getFormStorageId());
		spFormAttachmentsImpl.setDataKey(getDataKey());
		spFormAttachmentsImpl.setName(getName());
		spFormAttachmentsImpl.setUrl(getUrl());
		spFormAttachmentsImpl.setVersion(getVersion());

		spFormAttachmentsImpl.resetOriginalValues();

		return spFormAttachmentsImpl;
	}

	@Override
	public int compareTo(SPFormAttachments spFormAttachments) {
		long primaryKey = spFormAttachments.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPFormAttachments)) {
			return false;
		}

		SPFormAttachments spFormAttachments = (SPFormAttachments)obj;

		long primaryKey = spFormAttachments.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SPFormAttachments> toCacheModel() {
		SPFormAttachmentsCacheModel spFormAttachmentsCacheModel = new SPFormAttachmentsCacheModel();

		spFormAttachmentsCacheModel.spFormAttachmentsId = getSpFormAttachmentsId();

		spFormAttachmentsCacheModel.groupId = getGroupId();

		spFormAttachmentsCacheModel.companyId = getCompanyId();

		spFormAttachmentsCacheModel.userId = getUserId();

		spFormAttachmentsCacheModel.userName = getUserName();

		String userName = spFormAttachmentsCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			spFormAttachmentsCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			spFormAttachmentsCacheModel.createDate = createDate.getTime();
		}
		else {
			spFormAttachmentsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spFormAttachmentsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spFormAttachmentsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		spFormAttachmentsCacheModel.formStorageId = getFormStorageId();

		spFormAttachmentsCacheModel.dataKey = getDataKey();

		String dataKey = spFormAttachmentsCacheModel.dataKey;

		if ((dataKey != null) && (dataKey.length() == 0)) {
			spFormAttachmentsCacheModel.dataKey = null;
		}

		spFormAttachmentsCacheModel.name = getName();

		String name = spFormAttachmentsCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			spFormAttachmentsCacheModel.name = null;
		}

		spFormAttachmentsCacheModel.url = getUrl();

		String url = spFormAttachmentsCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			spFormAttachmentsCacheModel.url = null;
		}

		spFormAttachmentsCacheModel.version = getVersion();

		String version = spFormAttachmentsCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			spFormAttachmentsCacheModel.version = null;
		}

		return spFormAttachmentsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{spFormAttachmentsId=");
		sb.append(getSpFormAttachmentsId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", formStorageId=");
		sb.append(getFormStorageId());
		sb.append(", dataKey=");
		sb.append(getDataKey());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", version=");
		sb.append(getVersion());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append(
			"com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachments");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spFormAttachmentsId</column-name><column-value><![CDATA[");
		sb.append(getSpFormAttachmentsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formStorageId</column-name><column-value><![CDATA[");
		sb.append(getFormStorageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataKey</column-name><column-value><![CDATA[");
		sb.append(getDataKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>version</column-name><column-value><![CDATA[");
		sb.append(getVersion());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPFormAttachments.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPFormAttachments.class
		};
	private long _spFormAttachmentsId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _formStorageId;
	private String _dataKey;
	private String _name;
	private String _url;
	private String _version;
	private SPFormAttachments _escapedModel;
}
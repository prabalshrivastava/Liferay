/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.model.Certificate;
import com.sambaash.platform.srv.model.CertificateModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Certificate service. Represents a row in the &quot;SPCertificate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.model.CertificateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CertificateImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see CertificateImpl
 * @see com.sambaash.platform.srv.model.Certificate
 * @see com.sambaash.platform.srv.model.CertificateModel
 * @generated
 */
public class CertificateModelImpl extends BaseModelImpl<Certificate>
	implements CertificateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a certificate model instance should use the {@link com.sambaash.platform.srv.model.Certificate} interface instead.
	 */
	public static final String TABLE_NAME = "SPCertificate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spCertificatetId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "countryId", Types.BIGINT },
			{ "certificateCode", Types.VARCHAR },
			{ "certificateType", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "level", Types.BIGINT },
			{ "attachmentFolderId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPCertificate (spCertificatetId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,countryId BIGINT(20),certificateCode VARCHAR(75) null,certificateType BIGINT(20),title VARCHAR(500) null,description LONGTEXT null,level BIGINT(20),attachmentFolderId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPCertificate";
	public static final String ORDER_BY_JPQL = " ORDER BY certificate.title ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPCertificate.title ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.model.Certificate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.model.Certificate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.model.Certificate"),
			true);
	public static long CERTIFICATECODE_COLUMN_BITMASK = 1L;
	public static long COUNTRYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long TITLE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.model.Certificate"));

	public CertificateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spCertificatetId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpCertificatetId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spCertificatetId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Certificate.class;
	}

	@Override
	public String getModelClassName() {
		return Certificate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spCertificatetId", getSpCertificatetId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("countryId", getCountryId());
		attributes.put("certificateCode", getCertificateCode());
		attributes.put("certificateType", getCertificateType());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("level", getLevel());
		attributes.put("attachmentFolderId", getAttachmentFolderId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spCertificatetId = (Long)attributes.get("spCertificatetId");

		if (spCertificatetId != null) {
			setSpCertificatetId(spCertificatetId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long countryId = (Long)attributes.get("countryId");

		if (countryId != null) {
			setCountryId(countryId);
		}

		String certificateCode = (String)attributes.get("certificateCode");

		if (certificateCode != null) {
			setCertificateCode(certificateCode);
		}

		Long certificateType = (Long)attributes.get("certificateType");

		if (certificateType != null) {
			setCertificateType(certificateType);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long level = (Long)attributes.get("level");

		if (level != null) {
			setLevel(level);
		}

		Long attachmentFolderId = (Long)attributes.get("attachmentFolderId");

		if (attachmentFolderId != null) {
			setAttachmentFolderId(attachmentFolderId);
		}
	}

	@Override
	public long getSpCertificatetId() {
		return _spCertificatetId;
	}

	@Override
	public void setSpCertificatetId(long spCertificatetId) {
		_spCertificatetId = spCertificatetId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		_columnBitmask |= COUNTRYID_COLUMN_BITMASK;

		if (!_setOriginalCountryId) {
			_setOriginalCountryId = true;

			_originalCountryId = _countryId;
		}

		_countryId = countryId;
	}

	public long getOriginalCountryId() {
		return _originalCountryId;
	}

	@Override
	public String getCertificateCode() {
		if (_certificateCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateCode;
		}
	}

	@Override
	public void setCertificateCode(String certificateCode) {
		_columnBitmask |= CERTIFICATECODE_COLUMN_BITMASK;

		if (_originalCertificateCode == null) {
			_originalCertificateCode = _certificateCode;
		}

		_certificateCode = certificateCode;
	}

	public String getOriginalCertificateCode() {
		return GetterUtil.getString(_originalCertificateCode);
	}

	@Override
	public long getCertificateType() {
		return _certificateType;
	}

	@Override
	public void setCertificateType(long certificateType) {
		_certificateType = certificateType;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask = -1L;

		if (_originalTitle == null) {
			_originalTitle = _title;
		}

		_title = title;
	}

	public String getOriginalTitle() {
		return GetterUtil.getString(_originalTitle);
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public long getLevel() {
		return _level;
	}

	@Override
	public void setLevel(long level) {
		_level = level;
	}

	@Override
	public long getAttachmentFolderId() {
		return _attachmentFolderId;
	}

	@Override
	public void setAttachmentFolderId(long attachmentFolderId) {
		_attachmentFolderId = attachmentFolderId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Certificate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Certificate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Certificate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CertificateImpl certificateImpl = new CertificateImpl();

		certificateImpl.setSpCertificatetId(getSpCertificatetId());
		certificateImpl.setGroupId(getGroupId());
		certificateImpl.setCompanyId(getCompanyId());
		certificateImpl.setUserId(getUserId());
		certificateImpl.setUserName(getUserName());
		certificateImpl.setCreateDate(getCreateDate());
		certificateImpl.setModifiedDate(getModifiedDate());
		certificateImpl.setCountryId(getCountryId());
		certificateImpl.setCertificateCode(getCertificateCode());
		certificateImpl.setCertificateType(getCertificateType());
		certificateImpl.setTitle(getTitle());
		certificateImpl.setDescription(getDescription());
		certificateImpl.setLevel(getLevel());
		certificateImpl.setAttachmentFolderId(getAttachmentFolderId());

		certificateImpl.resetOriginalValues();

		return certificateImpl;
	}

	@Override
	public int compareTo(Certificate certificate) {
		int value = 0;

		value = getTitle().compareTo(certificate.getTitle());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Certificate)) {
			return false;
		}

		Certificate certificate = (Certificate)obj;

		long primaryKey = certificate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CertificateModelImpl certificateModelImpl = this;

		certificateModelImpl._originalGroupId = certificateModelImpl._groupId;

		certificateModelImpl._setOriginalGroupId = false;

		certificateModelImpl._originalCountryId = certificateModelImpl._countryId;

		certificateModelImpl._setOriginalCountryId = false;

		certificateModelImpl._originalCertificateCode = certificateModelImpl._certificateCode;

		certificateModelImpl._originalTitle = certificateModelImpl._title;

		certificateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Certificate> toCacheModel() {
		CertificateCacheModel certificateCacheModel = new CertificateCacheModel();

		certificateCacheModel.spCertificatetId = getSpCertificatetId();

		certificateCacheModel.groupId = getGroupId();

		certificateCacheModel.companyId = getCompanyId();

		certificateCacheModel.userId = getUserId();

		certificateCacheModel.userName = getUserName();

		String userName = certificateCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			certificateCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			certificateCacheModel.createDate = createDate.getTime();
		}
		else {
			certificateCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			certificateCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			certificateCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		certificateCacheModel.countryId = getCountryId();

		certificateCacheModel.certificateCode = getCertificateCode();

		String certificateCode = certificateCacheModel.certificateCode;

		if ((certificateCode != null) && (certificateCode.length() == 0)) {
			certificateCacheModel.certificateCode = null;
		}

		certificateCacheModel.certificateType = getCertificateType();

		certificateCacheModel.title = getTitle();

		String title = certificateCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			certificateCacheModel.title = null;
		}

		certificateCacheModel.description = getDescription();

		String description = certificateCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			certificateCacheModel.description = null;
		}

		certificateCacheModel.level = getLevel();

		certificateCacheModel.attachmentFolderId = getAttachmentFolderId();

		return certificateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{spCertificatetId=");
		sb.append(getSpCertificatetId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", countryId=");
		sb.append(getCountryId());
		sb.append(", certificateCode=");
		sb.append(getCertificateCode());
		sb.append(", certificateType=");
		sb.append(getCertificateType());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", level=");
		sb.append(getLevel());
		sb.append(", attachmentFolderId=");
		sb.append(getAttachmentFolderId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.model.Certificate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spCertificatetId</column-name><column-value><![CDATA[");
		sb.append(getSpCertificatetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryId</column-name><column-value><![CDATA[");
		sb.append(getCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateCode</column-name><column-value><![CDATA[");
		sb.append(getCertificateCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateType</column-name><column-value><![CDATA[");
		sb.append(getCertificateType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>level</column-name><column-value><![CDATA[");
		sb.append(getLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>attachmentFolderId</column-name><column-value><![CDATA[");
		sb.append(getAttachmentFolderId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Certificate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Certificate.class
		};
	private long _spCertificatetId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _countryId;
	private long _originalCountryId;
	private boolean _setOriginalCountryId;
	private String _certificateCode;
	private String _originalCertificateCode;
	private long _certificateType;
	private String _title;
	private String _originalTitle;
	private String _description;
	private long _level;
	private long _attachmentFolderId;
	private long _columnBitmask;
	private Certificate _escapedModel;
}
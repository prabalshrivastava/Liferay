/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.processbuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.processbuilder.model.PEProcessAudit;
import com.sambaash.platform.srv.processbuilder.model.PEProcessAuditModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PEProcessAudit service. Represents a row in the &quot;SPPEProcessAudit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.processbuilder.model.PEProcessAuditModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PEProcessAuditImpl}.
 * </p>
 *
 * @author nareshchebolu
 * @see PEProcessAuditImpl
 * @see com.sambaash.platform.srv.processbuilder.model.PEProcessAudit
 * @see com.sambaash.platform.srv.processbuilder.model.PEProcessAuditModel
 * @generated
 */
public class PEProcessAuditModelImpl extends BaseModelImpl<PEProcessAudit>
	implements PEProcessAuditModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a p e process audit model instance should use the {@link com.sambaash.platform.srv.processbuilder.model.PEProcessAudit} interface instead.
	 */
	public static final String TABLE_NAME = "SPPEProcessAudit";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spPEProcessAuditId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "spPEProcessStateId", Types.BIGINT },
			{ "spPEProcessId", Types.BIGINT },
			{ "entityClassId", Types.BIGINT },
			{ "entityId", Types.BIGINT },
			{ "userIdProcess", Types.BIGINT },
			{ "statusTypeId", Types.BIGINT },
			{ "spPEProcessStageId", Types.BIGINT },
			{ "nodeId", Types.BIGINT },
			{ "status", Types.VARCHAR },
			{ "userIdSupervisor", Types.BIGINT },
			{ "userIdAgent", Types.BIGINT },
			{ "spPEClosedStageId", Types.BIGINT },
			{ "type_", Types.VARCHAR },
			{ "doneBy", Types.VARCHAR },
			{ "action", Types.VARCHAR },
			{ "field1", Types.VARCHAR },
			{ "field2", Types.VARCHAR },
			{ "field3", Types.VARCHAR },
			{ "field4", Types.VARCHAR },
			{ "field5", Types.BIGINT },
			{ "storageId", Types.BIGINT },
			{ "data1", Types.CLOB },
			{ "data2", Types.CLOB },
			{ "sourceClassId", Types.BIGINT },
			{ "sourceEntityID", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPPEProcessAudit (uuid_ VARCHAR(75) null,spPEProcessAuditId BIGINT(20) not null primary key,groupId BIGINT(20),userId BIGINT(20),companyId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,spPEProcessStateId BIGINT(20),spPEProcessId BIGINT(20),entityClassId BIGINT(20),entityId BIGINT(20),userIdProcess BIGINT(20),statusTypeId BIGINT(20),spPEProcessStageId BIGINT(20),nodeId BIGINT(20),status VARCHAR(75) null,userIdSupervisor BIGINT(20),userIdAgent BIGINT(20),spPEClosedStageId BIGINT(20),type_ VARCHAR(75) null,doneBy VARCHAR(75) null,action VARCHAR(75) null,field1 VARCHAR(75) null,field2 VARCHAR(75) null,field3 VARCHAR(75) null,field4 VARCHAR(75) null,field5 BIGINT(20),storageId BIGINT(20),data1 LONGTEXT null,data2 LONGTEXT null,sourceClassId BIGINT(20),sourceEntityID BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPPEProcessAudit";
	public static final String ORDER_BY_JPQL = " ORDER BY peProcessAudit.spPEProcessAuditId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPPEProcessAudit.spPEProcessAuditId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.processbuilder.model.PEProcessAudit"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.processbuilder.model.PEProcessAudit"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.processbuilder.model.PEProcessAudit"),
			true);
	public static long ACTION_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long CREATEDATE_COLUMN_BITMASK = 4L;
	public static long DONEBY_COLUMN_BITMASK = 8L;
	public static long FIELD2_COLUMN_BITMASK = 16L;
	public static long GROUPID_COLUMN_BITMASK = 32L;
	public static long NODEID_COLUMN_BITMASK = 64L;
	public static long SPPEPROCESSSTATEID_COLUMN_BITMASK = 128L;
	public static long TYPE_COLUMN_BITMASK = 256L;
	public static long UUID_COLUMN_BITMASK = 512L;
	public static long SPPEPROCESSAUDITID_COLUMN_BITMASK = 1024L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.processbuilder.model.PEProcessAudit"));

	public PEProcessAuditModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spPEProcessAuditId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpPEProcessAuditId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spPEProcessAuditId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PEProcessAudit.class;
	}

	@Override
	public String getModelClassName() {
		return PEProcessAudit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("spPEProcessAuditId", getSpPEProcessAuditId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("spPEProcessStateId", getSpPEProcessStateId());
		attributes.put("spPEProcessId", getSpPEProcessId());
		attributes.put("entityClassId", getEntityClassId());
		attributes.put("entityId", getEntityId());
		attributes.put("userIdProcess", getUserIdProcess());
		attributes.put("statusTypeId", getStatusTypeId());
		attributes.put("spPEProcessStageId", getSpPEProcessStageId());
		attributes.put("nodeId", getNodeId());
		attributes.put("status", getStatus());
		attributes.put("userIdSupervisor", getUserIdSupervisor());
		attributes.put("userIdAgent", getUserIdAgent());
		attributes.put("spPEClosedStageId", getSpPEClosedStageId());
		attributes.put("type", getType());
		attributes.put("doneBy", getDoneBy());
		attributes.put("action", getAction());
		attributes.put("field1", getField1());
		attributes.put("field2", getField2());
		attributes.put("field3", getField3());
		attributes.put("field4", getField4());
		attributes.put("field5", getField5());
		attributes.put("storageId", getStorageId());
		attributes.put("data1", getData1());
		attributes.put("data2", getData2());
		attributes.put("sourceClassId", getSourceClassId());
		attributes.put("sourceEntityID", getSourceEntityID());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long spPEProcessAuditId = (Long)attributes.get("spPEProcessAuditId");

		if (spPEProcessAuditId != null) {
			setSpPEProcessAuditId(spPEProcessAuditId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long spPEProcessStateId = (Long)attributes.get("spPEProcessStateId");

		if (spPEProcessStateId != null) {
			setSpPEProcessStateId(spPEProcessStateId);
		}

		Long spPEProcessId = (Long)attributes.get("spPEProcessId");

		if (spPEProcessId != null) {
			setSpPEProcessId(spPEProcessId);
		}

		Long entityClassId = (Long)attributes.get("entityClassId");

		if (entityClassId != null) {
			setEntityClassId(entityClassId);
		}

		Long entityId = (Long)attributes.get("entityId");

		if (entityId != null) {
			setEntityId(entityId);
		}

		Long userIdProcess = (Long)attributes.get("userIdProcess");

		if (userIdProcess != null) {
			setUserIdProcess(userIdProcess);
		}

		Long statusTypeId = (Long)attributes.get("statusTypeId");

		if (statusTypeId != null) {
			setStatusTypeId(statusTypeId);
		}

		Long spPEProcessStageId = (Long)attributes.get("spPEProcessStageId");

		if (spPEProcessStageId != null) {
			setSpPEProcessStageId(spPEProcessStageId);
		}

		Long nodeId = (Long)attributes.get("nodeId");

		if (nodeId != null) {
			setNodeId(nodeId);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long userIdSupervisor = (Long)attributes.get("userIdSupervisor");

		if (userIdSupervisor != null) {
			setUserIdSupervisor(userIdSupervisor);
		}

		Long userIdAgent = (Long)attributes.get("userIdAgent");

		if (userIdAgent != null) {
			setUserIdAgent(userIdAgent);
		}

		Long spPEClosedStageId = (Long)attributes.get("spPEClosedStageId");

		if (spPEClosedStageId != null) {
			setSpPEClosedStageId(spPEClosedStageId);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String doneBy = (String)attributes.get("doneBy");

		if (doneBy != null) {
			setDoneBy(doneBy);
		}

		String action = (String)attributes.get("action");

		if (action != null) {
			setAction(action);
		}

		String field1 = (String)attributes.get("field1");

		if (field1 != null) {
			setField1(field1);
		}

		String field2 = (String)attributes.get("field2");

		if (field2 != null) {
			setField2(field2);
		}

		String field3 = (String)attributes.get("field3");

		if (field3 != null) {
			setField3(field3);
		}

		String field4 = (String)attributes.get("field4");

		if (field4 != null) {
			setField4(field4);
		}

		Long field5 = (Long)attributes.get("field5");

		if (field5 != null) {
			setField5(field5);
		}

		Long storageId = (Long)attributes.get("storageId");

		if (storageId != null) {
			setStorageId(storageId);
		}

		String data1 = (String)attributes.get("data1");

		if (data1 != null) {
			setData1(data1);
		}

		String data2 = (String)attributes.get("data2");

		if (data2 != null) {
			setData2(data2);
		}

		Long sourceClassId = (Long)attributes.get("sourceClassId");

		if (sourceClassId != null) {
			setSourceClassId(sourceClassId);
		}

		Long sourceEntityID = (Long)attributes.get("sourceEntityID");

		if (sourceEntityID != null) {
			setSourceEntityID(sourceEntityID);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getSpPEProcessAuditId() {
		return _spPEProcessAuditId;
	}

	@Override
	public void setSpPEProcessAuditId(long spPEProcessAuditId) {
		_spPEProcessAuditId = spPEProcessAuditId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask |= CREATEDATE_COLUMN_BITMASK;

		if (_originalCreateDate == null) {
			_originalCreateDate = _createDate;
		}

		_createDate = createDate;
	}

	public Date getOriginalCreateDate() {
		return _originalCreateDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getSpPEProcessStateId() {
		return _spPEProcessStateId;
	}

	@Override
	public void setSpPEProcessStateId(long spPEProcessStateId) {
		_columnBitmask |= SPPEPROCESSSTATEID_COLUMN_BITMASK;

		if (!_setOriginalSpPEProcessStateId) {
			_setOriginalSpPEProcessStateId = true;

			_originalSpPEProcessStateId = _spPEProcessStateId;
		}

		_spPEProcessStateId = spPEProcessStateId;
	}

	public long getOriginalSpPEProcessStateId() {
		return _originalSpPEProcessStateId;
	}

	@Override
	public long getSpPEProcessId() {
		return _spPEProcessId;
	}

	@Override
	public void setSpPEProcessId(long spPEProcessId) {
		_spPEProcessId = spPEProcessId;
	}

	@Override
	public long getEntityClassId() {
		return _entityClassId;
	}

	@Override
	public void setEntityClassId(long entityClassId) {
		_entityClassId = entityClassId;
	}

	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		_entityId = entityId;
	}

	@Override
	public long getUserIdProcess() {
		return _userIdProcess;
	}

	@Override
	public void setUserIdProcess(long userIdProcess) {
		_userIdProcess = userIdProcess;
	}

	@Override
	public long getStatusTypeId() {
		return _statusTypeId;
	}

	@Override
	public void setStatusTypeId(long statusTypeId) {
		_statusTypeId = statusTypeId;
	}

	@Override
	public long getSpPEProcessStageId() {
		return _spPEProcessStageId;
	}

	@Override
	public void setSpPEProcessStageId(long spPEProcessStageId) {
		_spPEProcessStageId = spPEProcessStageId;
	}

	@Override
	public long getNodeId() {
		return _nodeId;
	}

	@Override
	public void setNodeId(long nodeId) {
		_columnBitmask |= NODEID_COLUMN_BITMASK;

		if (!_setOriginalNodeId) {
			_setOriginalNodeId = true;

			_originalNodeId = _nodeId;
		}

		_nodeId = nodeId;
	}

	public long getOriginalNodeId() {
		return _originalNodeId;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public long getUserIdSupervisor() {
		return _userIdSupervisor;
	}

	@Override
	public void setUserIdSupervisor(long userIdSupervisor) {
		_userIdSupervisor = userIdSupervisor;
	}

	@Override
	public long getUserIdAgent() {
		return _userIdAgent;
	}

	@Override
	public void setUserIdAgent(long userIdAgent) {
		_userIdAgent = userIdAgent;
	}

	@Override
	public long getSpPEClosedStageId() {
		return _spPEClosedStageId;
	}

	@Override
	public void setSpPEClosedStageId(long spPEClosedStageId) {
		_spPEClosedStageId = spPEClosedStageId;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@Override
	public String getDoneBy() {
		if (_doneBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _doneBy;
		}
	}

	@Override
	public void setDoneBy(String doneBy) {
		_columnBitmask |= DONEBY_COLUMN_BITMASK;

		if (_originalDoneBy == null) {
			_originalDoneBy = _doneBy;
		}

		_doneBy = doneBy;
	}

	public String getOriginalDoneBy() {
		return GetterUtil.getString(_originalDoneBy);
	}

	@Override
	public String getAction() {
		if (_action == null) {
			return StringPool.BLANK;
		}
		else {
			return _action;
		}
	}

	@Override
	public void setAction(String action) {
		_columnBitmask |= ACTION_COLUMN_BITMASK;

		if (_originalAction == null) {
			_originalAction = _action;
		}

		_action = action;
	}

	public String getOriginalAction() {
		return GetterUtil.getString(_originalAction);
	}

	@Override
	public String getField1() {
		if (_field1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _field1;
		}
	}

	@Override
	public void setField1(String field1) {
		_field1 = field1;
	}

	@Override
	public String getField2() {
		if (_field2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _field2;
		}
	}

	@Override
	public void setField2(String field2) {
		_columnBitmask |= FIELD2_COLUMN_BITMASK;

		if (_originalField2 == null) {
			_originalField2 = _field2;
		}

		_field2 = field2;
	}

	public String getOriginalField2() {
		return GetterUtil.getString(_originalField2);
	}

	@Override
	public String getField3() {
		if (_field3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _field3;
		}
	}

	@Override
	public void setField3(String field3) {
		_field3 = field3;
	}

	@Override
	public String getField4() {
		if (_field4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _field4;
		}
	}

	@Override
	public void setField4(String field4) {
		_field4 = field4;
	}

	@Override
	public long getField5() {
		return _field5;
	}

	@Override
	public void setField5(long field5) {
		_field5 = field5;
	}

	@Override
	public long getStorageId() {
		return _storageId;
	}

	@Override
	public void setStorageId(long storageId) {
		_storageId = storageId;
	}

	@Override
	public String getData1() {
		if (_data1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _data1;
		}
	}

	@Override
	public void setData1(String data1) {
		_data1 = data1;
	}

	@Override
	public String getData2() {
		if (_data2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _data2;
		}
	}

	@Override
	public void setData2(String data2) {
		_data2 = data2;
	}

	@Override
	public long getSourceClassId() {
		return _sourceClassId;
	}

	@Override
	public void setSourceClassId(long sourceClassId) {
		_sourceClassId = sourceClassId;
	}

	@Override
	public long getSourceEntityID() {
		return _sourceEntityID;
	}

	@Override
	public void setSourceEntityID(long sourceEntityID) {
		_sourceEntityID = sourceEntityID;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				PEProcessAudit.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PEProcessAudit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PEProcessAudit toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PEProcessAudit)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PEProcessAuditImpl peProcessAuditImpl = new PEProcessAuditImpl();

		peProcessAuditImpl.setUuid(getUuid());
		peProcessAuditImpl.setSpPEProcessAuditId(getSpPEProcessAuditId());
		peProcessAuditImpl.setGroupId(getGroupId());
		peProcessAuditImpl.setUserId(getUserId());
		peProcessAuditImpl.setCompanyId(getCompanyId());
		peProcessAuditImpl.setUserName(getUserName());
		peProcessAuditImpl.setCreateDate(getCreateDate());
		peProcessAuditImpl.setModifiedDate(getModifiedDate());
		peProcessAuditImpl.setSpPEProcessStateId(getSpPEProcessStateId());
		peProcessAuditImpl.setSpPEProcessId(getSpPEProcessId());
		peProcessAuditImpl.setEntityClassId(getEntityClassId());
		peProcessAuditImpl.setEntityId(getEntityId());
		peProcessAuditImpl.setUserIdProcess(getUserIdProcess());
		peProcessAuditImpl.setStatusTypeId(getStatusTypeId());
		peProcessAuditImpl.setSpPEProcessStageId(getSpPEProcessStageId());
		peProcessAuditImpl.setNodeId(getNodeId());
		peProcessAuditImpl.setStatus(getStatus());
		peProcessAuditImpl.setUserIdSupervisor(getUserIdSupervisor());
		peProcessAuditImpl.setUserIdAgent(getUserIdAgent());
		peProcessAuditImpl.setSpPEClosedStageId(getSpPEClosedStageId());
		peProcessAuditImpl.setType(getType());
		peProcessAuditImpl.setDoneBy(getDoneBy());
		peProcessAuditImpl.setAction(getAction());
		peProcessAuditImpl.setField1(getField1());
		peProcessAuditImpl.setField2(getField2());
		peProcessAuditImpl.setField3(getField3());
		peProcessAuditImpl.setField4(getField4());
		peProcessAuditImpl.setField5(getField5());
		peProcessAuditImpl.setStorageId(getStorageId());
		peProcessAuditImpl.setData1(getData1());
		peProcessAuditImpl.setData2(getData2());
		peProcessAuditImpl.setSourceClassId(getSourceClassId());
		peProcessAuditImpl.setSourceEntityID(getSourceEntityID());

		peProcessAuditImpl.resetOriginalValues();

		return peProcessAuditImpl;
	}

	@Override
	public int compareTo(PEProcessAudit peProcessAudit) {
		long primaryKey = peProcessAudit.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PEProcessAudit)) {
			return false;
		}

		PEProcessAudit peProcessAudit = (PEProcessAudit)obj;

		long primaryKey = peProcessAudit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PEProcessAuditModelImpl peProcessAuditModelImpl = this;

		peProcessAuditModelImpl._originalUuid = peProcessAuditModelImpl._uuid;

		peProcessAuditModelImpl._originalGroupId = peProcessAuditModelImpl._groupId;

		peProcessAuditModelImpl._setOriginalGroupId = false;

		peProcessAuditModelImpl._originalCompanyId = peProcessAuditModelImpl._companyId;

		peProcessAuditModelImpl._setOriginalCompanyId = false;

		peProcessAuditModelImpl._originalCreateDate = peProcessAuditModelImpl._createDate;

		peProcessAuditModelImpl._originalSpPEProcessStateId = peProcessAuditModelImpl._spPEProcessStateId;

		peProcessAuditModelImpl._setOriginalSpPEProcessStateId = false;

		peProcessAuditModelImpl._originalNodeId = peProcessAuditModelImpl._nodeId;

		peProcessAuditModelImpl._setOriginalNodeId = false;

		peProcessAuditModelImpl._originalType = peProcessAuditModelImpl._type;

		peProcessAuditModelImpl._originalDoneBy = peProcessAuditModelImpl._doneBy;

		peProcessAuditModelImpl._originalAction = peProcessAuditModelImpl._action;

		peProcessAuditModelImpl._originalField2 = peProcessAuditModelImpl._field2;

		peProcessAuditModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PEProcessAudit> toCacheModel() {
		PEProcessAuditCacheModel peProcessAuditCacheModel = new PEProcessAuditCacheModel();

		peProcessAuditCacheModel.uuid = getUuid();

		String uuid = peProcessAuditCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			peProcessAuditCacheModel.uuid = null;
		}

		peProcessAuditCacheModel.spPEProcessAuditId = getSpPEProcessAuditId();

		peProcessAuditCacheModel.groupId = getGroupId();

		peProcessAuditCacheModel.userId = getUserId();

		peProcessAuditCacheModel.companyId = getCompanyId();

		peProcessAuditCacheModel.userName = getUserName();

		String userName = peProcessAuditCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			peProcessAuditCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			peProcessAuditCacheModel.createDate = createDate.getTime();
		}
		else {
			peProcessAuditCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			peProcessAuditCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			peProcessAuditCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		peProcessAuditCacheModel.spPEProcessStateId = getSpPEProcessStateId();

		peProcessAuditCacheModel.spPEProcessId = getSpPEProcessId();

		peProcessAuditCacheModel.entityClassId = getEntityClassId();

		peProcessAuditCacheModel.entityId = getEntityId();

		peProcessAuditCacheModel.userIdProcess = getUserIdProcess();

		peProcessAuditCacheModel.statusTypeId = getStatusTypeId();

		peProcessAuditCacheModel.spPEProcessStageId = getSpPEProcessStageId();

		peProcessAuditCacheModel.nodeId = getNodeId();

		peProcessAuditCacheModel.status = getStatus();

		String status = peProcessAuditCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			peProcessAuditCacheModel.status = null;
		}

		peProcessAuditCacheModel.userIdSupervisor = getUserIdSupervisor();

		peProcessAuditCacheModel.userIdAgent = getUserIdAgent();

		peProcessAuditCacheModel.spPEClosedStageId = getSpPEClosedStageId();

		peProcessAuditCacheModel.type = getType();

		String type = peProcessAuditCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			peProcessAuditCacheModel.type = null;
		}

		peProcessAuditCacheModel.doneBy = getDoneBy();

		String doneBy = peProcessAuditCacheModel.doneBy;

		if ((doneBy != null) && (doneBy.length() == 0)) {
			peProcessAuditCacheModel.doneBy = null;
		}

		peProcessAuditCacheModel.action = getAction();

		String action = peProcessAuditCacheModel.action;

		if ((action != null) && (action.length() == 0)) {
			peProcessAuditCacheModel.action = null;
		}

		peProcessAuditCacheModel.field1 = getField1();

		String field1 = peProcessAuditCacheModel.field1;

		if ((field1 != null) && (field1.length() == 0)) {
			peProcessAuditCacheModel.field1 = null;
		}

		peProcessAuditCacheModel.field2 = getField2();

		String field2 = peProcessAuditCacheModel.field2;

		if ((field2 != null) && (field2.length() == 0)) {
			peProcessAuditCacheModel.field2 = null;
		}

		peProcessAuditCacheModel.field3 = getField3();

		String field3 = peProcessAuditCacheModel.field3;

		if ((field3 != null) && (field3.length() == 0)) {
			peProcessAuditCacheModel.field3 = null;
		}

		peProcessAuditCacheModel.field4 = getField4();

		String field4 = peProcessAuditCacheModel.field4;

		if ((field4 != null) && (field4.length() == 0)) {
			peProcessAuditCacheModel.field4 = null;
		}

		peProcessAuditCacheModel.field5 = getField5();

		peProcessAuditCacheModel.storageId = getStorageId();

		peProcessAuditCacheModel.data1 = getData1();

		String data1 = peProcessAuditCacheModel.data1;

		if ((data1 != null) && (data1.length() == 0)) {
			peProcessAuditCacheModel.data1 = null;
		}

		peProcessAuditCacheModel.data2 = getData2();

		String data2 = peProcessAuditCacheModel.data2;

		if ((data2 != null) && (data2.length() == 0)) {
			peProcessAuditCacheModel.data2 = null;
		}

		peProcessAuditCacheModel.sourceClassId = getSourceClassId();

		peProcessAuditCacheModel.sourceEntityID = getSourceEntityID();

		return peProcessAuditCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(67);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", spPEProcessAuditId=");
		sb.append(getSpPEProcessAuditId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", spPEProcessStateId=");
		sb.append(getSpPEProcessStateId());
		sb.append(", spPEProcessId=");
		sb.append(getSpPEProcessId());
		sb.append(", entityClassId=");
		sb.append(getEntityClassId());
		sb.append(", entityId=");
		sb.append(getEntityId());
		sb.append(", userIdProcess=");
		sb.append(getUserIdProcess());
		sb.append(", statusTypeId=");
		sb.append(getStatusTypeId());
		sb.append(", spPEProcessStageId=");
		sb.append(getSpPEProcessStageId());
		sb.append(", nodeId=");
		sb.append(getNodeId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", userIdSupervisor=");
		sb.append(getUserIdSupervisor());
		sb.append(", userIdAgent=");
		sb.append(getUserIdAgent());
		sb.append(", spPEClosedStageId=");
		sb.append(getSpPEClosedStageId());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", doneBy=");
		sb.append(getDoneBy());
		sb.append(", action=");
		sb.append(getAction());
		sb.append(", field1=");
		sb.append(getField1());
		sb.append(", field2=");
		sb.append(getField2());
		sb.append(", field3=");
		sb.append(getField3());
		sb.append(", field4=");
		sb.append(getField4());
		sb.append(", field5=");
		sb.append(getField5());
		sb.append(", storageId=");
		sb.append(getStorageId());
		sb.append(", data1=");
		sb.append(getData1());
		sb.append(", data2=");
		sb.append(getData2());
		sb.append(", sourceClassId=");
		sb.append(getSourceClassId());
		sb.append(", sourceEntityID=");
		sb.append(getSourceEntityID());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(103);

		sb.append("<model><model-name>");
		sb.append(
			"com.sambaash.platform.srv.processbuilder.model.PEProcessAudit");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spPEProcessAuditId</column-name><column-value><![CDATA[");
		sb.append(getSpPEProcessAuditId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spPEProcessStateId</column-name><column-value><![CDATA[");
		sb.append(getSpPEProcessStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spPEProcessId</column-name><column-value><![CDATA[");
		sb.append(getSpPEProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityClassId</column-name><column-value><![CDATA[");
		sb.append(getEntityClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityId</column-name><column-value><![CDATA[");
		sb.append(getEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userIdProcess</column-name><column-value><![CDATA[");
		sb.append(getUserIdProcess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusTypeId</column-name><column-value><![CDATA[");
		sb.append(getStatusTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spPEProcessStageId</column-name><column-value><![CDATA[");
		sb.append(getSpPEProcessStageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nodeId</column-name><column-value><![CDATA[");
		sb.append(getNodeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userIdSupervisor</column-name><column-value><![CDATA[");
		sb.append(getUserIdSupervisor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userIdAgent</column-name><column-value><![CDATA[");
		sb.append(getUserIdAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spPEClosedStageId</column-name><column-value><![CDATA[");
		sb.append(getSpPEClosedStageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>doneBy</column-name><column-value><![CDATA[");
		sb.append(getDoneBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>action</column-name><column-value><![CDATA[");
		sb.append(getAction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>field1</column-name><column-value><![CDATA[");
		sb.append(getField1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>field2</column-name><column-value><![CDATA[");
		sb.append(getField2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>field3</column-name><column-value><![CDATA[");
		sb.append(getField3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>field4</column-name><column-value><![CDATA[");
		sb.append(getField4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>field5</column-name><column-value><![CDATA[");
		sb.append(getField5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>storageId</column-name><column-value><![CDATA[");
		sb.append(getStorageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data1</column-name><column-value><![CDATA[");
		sb.append(getData1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data2</column-name><column-value><![CDATA[");
		sb.append(getData2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sourceClassId</column-name><column-value><![CDATA[");
		sb.append(getSourceClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sourceEntityID</column-name><column-value><![CDATA[");
		sb.append(getSourceEntityID());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PEProcessAudit.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PEProcessAudit.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _spPEProcessAuditId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _userName;
	private Date _createDate;
	private Date _originalCreateDate;
	private Date _modifiedDate;
	private long _spPEProcessStateId;
	private long _originalSpPEProcessStateId;
	private boolean _setOriginalSpPEProcessStateId;
	private long _spPEProcessId;
	private long _entityClassId;
	private long _entityId;
	private long _userIdProcess;
	private long _statusTypeId;
	private long _spPEProcessStageId;
	private long _nodeId;
	private long _originalNodeId;
	private boolean _setOriginalNodeId;
	private String _status;
	private long _userIdSupervisor;
	private long _userIdAgent;
	private long _spPEClosedStageId;
	private String _type;
	private String _originalType;
	private String _doneBy;
	private String _originalDoneBy;
	private String _action;
	private String _originalAction;
	private String _field1;
	private String _field2;
	private String _originalField2;
	private String _field3;
	private String _field4;
	private long _field5;
	private long _storageId;
	private String _data1;
	private String _data2;
	private long _sourceClassId;
	private long _sourceEntityID;
	private long _columnBitmask;
	private PEProcessAudit _escapedModel;
}
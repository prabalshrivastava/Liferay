/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spdynamicforms.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachments;
import com.sambaash.platform.srv.spdynamicforms.service.SPFormAttachmentsLocalService;
import com.sambaash.platform.srv.spdynamicforms.service.persistence.SPFormAttachmentsPersistence;
import com.sambaash.platform.srv.spdynamicforms.service.persistence.SPFormStoragePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the s p form attachments local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.sambaash.platform.srv.spdynamicforms.service.impl.SPFormAttachmentsLocalServiceImpl}.
 * </p>
 *
 * @author glenn
 * @see com.sambaash.platform.srv.spdynamicforms.service.impl.SPFormAttachmentsLocalServiceImpl
 * @see com.sambaash.platform.srv.spdynamicforms.service.SPFormAttachmentsLocalServiceUtil
 * @generated
 */
public abstract class SPFormAttachmentsLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements SPFormAttachmentsLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.sambaash.platform.srv.spdynamicforms.service.SPFormAttachmentsLocalServiceUtil} to access the s p form attachments local service.
	 */

	/**
	 * Adds the s p form attachments to the database. Also notifies the appropriate model listeners.
	 *
	 * @param spFormAttachments the s p form attachments
	 * @return the s p form attachments that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SPFormAttachments addSPFormAttachments(
		SPFormAttachments spFormAttachments) throws SystemException {
		spFormAttachments.setNew(true);

		return spFormAttachmentsPersistence.update(spFormAttachments);
	}

	/**
	 * Creates a new s p form attachments with the primary key. Does not add the s p form attachments to the database.
	 *
	 * @param spFormAttachmentsId the primary key for the new s p form attachments
	 * @return the new s p form attachments
	 */
	@Override
	public SPFormAttachments createSPFormAttachments(long spFormAttachmentsId) {
		return spFormAttachmentsPersistence.create(spFormAttachmentsId);
	}

	/**
	 * Deletes the s p form attachments with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param spFormAttachmentsId the primary key of the s p form attachments
	 * @return the s p form attachments that was removed
	 * @throws PortalException if a s p form attachments with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SPFormAttachments deleteSPFormAttachments(long spFormAttachmentsId)
		throws PortalException, SystemException {
		return spFormAttachmentsPersistence.remove(spFormAttachmentsId);
	}

	/**
	 * Deletes the s p form attachments from the database. Also notifies the appropriate model listeners.
	 *
	 * @param spFormAttachments the s p form attachments
	 * @return the s p form attachments that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SPFormAttachments deleteSPFormAttachments(
		SPFormAttachments spFormAttachments) throws SystemException {
		return spFormAttachmentsPersistence.remove(spFormAttachments);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(SPFormAttachments.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return spFormAttachmentsPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sambaash.platform.srv.spdynamicforms.model.impl.SPFormAttachmentsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return spFormAttachmentsPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sambaash.platform.srv.spdynamicforms.model.impl.SPFormAttachmentsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return spFormAttachmentsPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return spFormAttachmentsPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return spFormAttachmentsPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public SPFormAttachments fetchSPFormAttachments(long spFormAttachmentsId)
		throws SystemException {
		return spFormAttachmentsPersistence.fetchByPrimaryKey(spFormAttachmentsId);
	}

	/**
	 * Returns the s p form attachments with the primary key.
	 *
	 * @param spFormAttachmentsId the primary key of the s p form attachments
	 * @return the s p form attachments
	 * @throws PortalException if a s p form attachments with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SPFormAttachments getSPFormAttachments(long spFormAttachmentsId)
		throws PortalException, SystemException {
		return spFormAttachmentsPersistence.findByPrimaryKey(spFormAttachmentsId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return spFormAttachmentsPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the s p form attachmentses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sambaash.platform.srv.spdynamicforms.model.impl.SPFormAttachmentsModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of s p form attachmentses
	 * @param end the upper bound of the range of s p form attachmentses (not inclusive)
	 * @return the range of s p form attachmentses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SPFormAttachments> getSPFormAttachmentses(int start, int end)
		throws SystemException {
		return spFormAttachmentsPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of s p form attachmentses.
	 *
	 * @return the number of s p form attachmentses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSPFormAttachmentsesCount() throws SystemException {
		return spFormAttachmentsPersistence.countAll();
	}

	/**
	 * Updates the s p form attachments in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param spFormAttachments the s p form attachments
	 * @return the s p form attachments that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SPFormAttachments updateSPFormAttachments(
		SPFormAttachments spFormAttachments) throws SystemException {
		return spFormAttachmentsPersistence.update(spFormAttachments);
	}

	/**
	 * Returns the s p dynamic forms local service.
	 *
	 * @return the s p dynamic forms local service
	 */
	public com.sambaash.platform.srv.spdynamicforms.service.SPDynamicFormsLocalService getSPDynamicFormsLocalService() {
		return spDynamicFormsLocalService;
	}

	/**
	 * Sets the s p dynamic forms local service.
	 *
	 * @param spDynamicFormsLocalService the s p dynamic forms local service
	 */
	public void setSPDynamicFormsLocalService(
		com.sambaash.platform.srv.spdynamicforms.service.SPDynamicFormsLocalService spDynamicFormsLocalService) {
		this.spDynamicFormsLocalService = spDynamicFormsLocalService;
	}

	/**
	 * Returns the s p dynamic forms remote service.
	 *
	 * @return the s p dynamic forms remote service
	 */
	public com.sambaash.platform.srv.spdynamicforms.service.SPDynamicFormsService getSPDynamicFormsService() {
		return spDynamicFormsService;
	}

	/**
	 * Sets the s p dynamic forms remote service.
	 *
	 * @param spDynamicFormsService the s p dynamic forms remote service
	 */
	public void setSPDynamicFormsService(
		com.sambaash.platform.srv.spdynamicforms.service.SPDynamicFormsService spDynamicFormsService) {
		this.spDynamicFormsService = spDynamicFormsService;
	}

	/**
	 * Returns the s p form attachments local service.
	 *
	 * @return the s p form attachments local service
	 */
	public com.sambaash.platform.srv.spdynamicforms.service.SPFormAttachmentsLocalService getSPFormAttachmentsLocalService() {
		return spFormAttachmentsLocalService;
	}

	/**
	 * Sets the s p form attachments local service.
	 *
	 * @param spFormAttachmentsLocalService the s p form attachments local service
	 */
	public void setSPFormAttachmentsLocalService(
		com.sambaash.platform.srv.spdynamicforms.service.SPFormAttachmentsLocalService spFormAttachmentsLocalService) {
		this.spFormAttachmentsLocalService = spFormAttachmentsLocalService;
	}

	/**
	 * Returns the s p form attachments persistence.
	 *
	 * @return the s p form attachments persistence
	 */
	public SPFormAttachmentsPersistence getSPFormAttachmentsPersistence() {
		return spFormAttachmentsPersistence;
	}

	/**
	 * Sets the s p form attachments persistence.
	 *
	 * @param spFormAttachmentsPersistence the s p form attachments persistence
	 */
	public void setSPFormAttachmentsPersistence(
		SPFormAttachmentsPersistence spFormAttachmentsPersistence) {
		this.spFormAttachmentsPersistence = spFormAttachmentsPersistence;
	}

	/**
	 * Returns the s p form storage local service.
	 *
	 * @return the s p form storage local service
	 */
	public com.sambaash.platform.srv.spdynamicforms.service.SPFormStorageLocalService getSPFormStorageLocalService() {
		return spFormStorageLocalService;
	}

	/**
	 * Sets the s p form storage local service.
	 *
	 * @param spFormStorageLocalService the s p form storage local service
	 */
	public void setSPFormStorageLocalService(
		com.sambaash.platform.srv.spdynamicforms.service.SPFormStorageLocalService spFormStorageLocalService) {
		this.spFormStorageLocalService = spFormStorageLocalService;
	}

	/**
	 * Returns the s p form storage persistence.
	 *
	 * @return the s p form storage persistence
	 */
	public SPFormStoragePersistence getSPFormStoragePersistence() {
		return spFormStoragePersistence;
	}

	/**
	 * Sets the s p form storage persistence.
	 *
	 * @param spFormStoragePersistence the s p form storage persistence
	 */
	public void setSPFormStoragePersistence(
		SPFormStoragePersistence spFormStoragePersistence) {
		this.spFormStoragePersistence = spFormStoragePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachments",
			spFormAttachmentsLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.sambaash.platform.srv.spdynamicforms.model.SPFormAttachments");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return SPFormAttachments.class;
	}

	protected String getModelClassName() {
		return SPFormAttachments.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = spFormAttachmentsPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.sambaash.platform.srv.spdynamicforms.service.SPDynamicFormsLocalService.class)
	protected com.sambaash.platform.srv.spdynamicforms.service.SPDynamicFormsLocalService spDynamicFormsLocalService;
	@BeanReference(type = com.sambaash.platform.srv.spdynamicforms.service.SPDynamicFormsService.class)
	protected com.sambaash.platform.srv.spdynamicforms.service.SPDynamicFormsService spDynamicFormsService;
	@BeanReference(type = com.sambaash.platform.srv.spdynamicforms.service.SPFormAttachmentsLocalService.class)
	protected com.sambaash.platform.srv.spdynamicforms.service.SPFormAttachmentsLocalService spFormAttachmentsLocalService;
	@BeanReference(type = SPFormAttachmentsPersistence.class)
	protected SPFormAttachmentsPersistence spFormAttachmentsPersistence;
	@BeanReference(type = com.sambaash.platform.srv.spdynamicforms.service.SPFormStorageLocalService.class)
	protected com.sambaash.platform.srv.spdynamicforms.service.SPFormStorageLocalService spFormStorageLocalService;
	@BeanReference(type = SPFormStoragePersistence.class)
	protected SPFormStoragePersistence spFormStoragePersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private SPFormAttachmentsLocalServiceClpInvoker _clpInvoker = new SPFormAttachmentsLocalServiceClpInvoker();
}
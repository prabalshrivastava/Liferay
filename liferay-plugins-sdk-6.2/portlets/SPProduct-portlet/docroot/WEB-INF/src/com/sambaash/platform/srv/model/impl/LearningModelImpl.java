/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.model.Learning;
import com.sambaash.platform.srv.model.LearningModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Learning service. Represents a row in the &quot;SPLearning&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.model.LearningModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LearningImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see LearningImpl
 * @see com.sambaash.platform.srv.model.Learning
 * @see com.sambaash.platform.srv.model.LearningModel
 * @generated
 */
public class LearningModelImpl extends BaseModelImpl<Learning>
	implements LearningModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a learning model instance should use the {@link com.sambaash.platform.srv.model.Learning} interface instead.
	 */
	public static final String TABLE_NAME = "SPLearning";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spLearningId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "spCourseId", Types.BIGINT },
			{ "intro", Types.VARCHAR },
			{ "optionTitle", Types.VARCHAR },
			{ "option1", Types.VARCHAR },
			{ "option2", Types.VARCHAR },
			{ "note", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SPLearning (spLearningId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,spCourseId BIGINT(20),intro VARCHAR(75) null,optionTitle VARCHAR(75) null,option1 VARCHAR(75) null,option2 VARCHAR(75) null,note VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SPLearning";
	public static final String ORDER_BY_JPQL = " ORDER BY learning.spLearningId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPLearning.spLearningId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.model.Learning"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.model.Learning"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.model.Learning"));

	public LearningModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spLearningId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpLearningId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spLearningId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Learning.class;
	}

	@Override
	public String getModelClassName() {
		return Learning.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spLearningId", getSpLearningId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("spCourseId", getSpCourseId());
		attributes.put("intro", getIntro());
		attributes.put("optionTitle", getOptionTitle());
		attributes.put("option1", getOption1());
		attributes.put("option2", getOption2());
		attributes.put("note", getNote());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spLearningId = (Long)attributes.get("spLearningId");

		if (spLearningId != null) {
			setSpLearningId(spLearningId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long spCourseId = (Long)attributes.get("spCourseId");

		if (spCourseId != null) {
			setSpCourseId(spCourseId);
		}

		String intro = (String)attributes.get("intro");

		if (intro != null) {
			setIntro(intro);
		}

		String optionTitle = (String)attributes.get("optionTitle");

		if (optionTitle != null) {
			setOptionTitle(optionTitle);
		}

		String option1 = (String)attributes.get("option1");

		if (option1 != null) {
			setOption1(option1);
		}

		String option2 = (String)attributes.get("option2");

		if (option2 != null) {
			setOption2(option2);
		}

		String note = (String)attributes.get("note");

		if (note != null) {
			setNote(note);
		}
	}

	@Override
	public long getSpLearningId() {
		return _spLearningId;
	}

	@Override
	public void setSpLearningId(long spLearningId) {
		_spLearningId = spLearningId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getSpCourseId() {
		return _spCourseId;
	}

	@Override
	public void setSpCourseId(long spCourseId) {
		_spCourseId = spCourseId;
	}

	@Override
	public String getIntro() {
		if (_intro == null) {
			return StringPool.BLANK;
		}
		else {
			return _intro;
		}
	}

	@Override
	public void setIntro(String intro) {
		_intro = intro;
	}

	@Override
	public String getOptionTitle() {
		if (_optionTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _optionTitle;
		}
	}

	@Override
	public void setOptionTitle(String optionTitle) {
		_optionTitle = optionTitle;
	}

	@Override
	public String getOption1() {
		if (_option1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _option1;
		}
	}

	@Override
	public void setOption1(String option1) {
		_option1 = option1;
	}

	@Override
	public String getOption2() {
		if (_option2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _option2;
		}
	}

	@Override
	public void setOption2(String option2) {
		_option2 = option2;
	}

	@Override
	public String getNote() {
		if (_note == null) {
			return StringPool.BLANK;
		}
		else {
			return _note;
		}
	}

	@Override
	public void setNote(String note) {
		_note = note;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Learning.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Learning toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Learning)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LearningImpl learningImpl = new LearningImpl();

		learningImpl.setSpLearningId(getSpLearningId());
		learningImpl.setGroupId(getGroupId());
		learningImpl.setCompanyId(getCompanyId());
		learningImpl.setUserId(getUserId());
		learningImpl.setUserName(getUserName());
		learningImpl.setCreateDate(getCreateDate());
		learningImpl.setModifiedDate(getModifiedDate());
		learningImpl.setSpCourseId(getSpCourseId());
		learningImpl.setIntro(getIntro());
		learningImpl.setOptionTitle(getOptionTitle());
		learningImpl.setOption1(getOption1());
		learningImpl.setOption2(getOption2());
		learningImpl.setNote(getNote());

		learningImpl.resetOriginalValues();

		return learningImpl;
	}

	@Override
	public int compareTo(Learning learning) {
		long primaryKey = learning.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Learning)) {
			return false;
		}

		Learning learning = (Learning)obj;

		long primaryKey = learning.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Learning> toCacheModel() {
		LearningCacheModel learningCacheModel = new LearningCacheModel();

		learningCacheModel.spLearningId = getSpLearningId();

		learningCacheModel.groupId = getGroupId();

		learningCacheModel.companyId = getCompanyId();

		learningCacheModel.userId = getUserId();

		learningCacheModel.userName = getUserName();

		String userName = learningCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			learningCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			learningCacheModel.createDate = createDate.getTime();
		}
		else {
			learningCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			learningCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			learningCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		learningCacheModel.spCourseId = getSpCourseId();

		learningCacheModel.intro = getIntro();

		String intro = learningCacheModel.intro;

		if ((intro != null) && (intro.length() == 0)) {
			learningCacheModel.intro = null;
		}

		learningCacheModel.optionTitle = getOptionTitle();

		String optionTitle = learningCacheModel.optionTitle;

		if ((optionTitle != null) && (optionTitle.length() == 0)) {
			learningCacheModel.optionTitle = null;
		}

		learningCacheModel.option1 = getOption1();

		String option1 = learningCacheModel.option1;

		if ((option1 != null) && (option1.length() == 0)) {
			learningCacheModel.option1 = null;
		}

		learningCacheModel.option2 = getOption2();

		String option2 = learningCacheModel.option2;

		if ((option2 != null) && (option2.length() == 0)) {
			learningCacheModel.option2 = null;
		}

		learningCacheModel.note = getNote();

		String note = learningCacheModel.note;

		if ((note != null) && (note.length() == 0)) {
			learningCacheModel.note = null;
		}

		return learningCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{spLearningId=");
		sb.append(getSpLearningId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", spCourseId=");
		sb.append(getSpCourseId());
		sb.append(", intro=");
		sb.append(getIntro());
		sb.append(", optionTitle=");
		sb.append(getOptionTitle());
		sb.append(", option1=");
		sb.append(getOption1());
		sb.append(", option2=");
		sb.append(getOption2());
		sb.append(", note=");
		sb.append(getNote());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.model.Learning");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spLearningId</column-name><column-value><![CDATA[");
		sb.append(getSpLearningId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spCourseId</column-name><column-value><![CDATA[");
		sb.append(getSpCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>intro</column-name><column-value><![CDATA[");
		sb.append(getIntro());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>optionTitle</column-name><column-value><![CDATA[");
		sb.append(getOptionTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>option1</column-name><column-value><![CDATA[");
		sb.append(getOption1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>option2</column-name><column-value><![CDATA[");
		sb.append(getOption2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>note</column-name><column-value><![CDATA[");
		sb.append(getNote());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Learning.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Learning.class
		};
	private long _spLearningId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _spCourseId;
	private String _intro;
	private String _optionTitle;
	private String _option1;
	private String _option2;
	private String _note;
	private Learning _escapedModel;
}
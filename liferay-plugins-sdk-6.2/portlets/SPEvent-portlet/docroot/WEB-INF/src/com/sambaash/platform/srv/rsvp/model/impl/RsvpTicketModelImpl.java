/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.rsvp.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.rsvp.model.RsvpTicket;
import com.sambaash.platform.srv.rsvp.model.RsvpTicketModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RsvpTicket service. Represents a row in the &quot;SPRsvpTicket&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.rsvp.model.RsvpTicketModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RsvpTicketImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see RsvpTicketImpl
 * @see com.sambaash.platform.srv.rsvp.model.RsvpTicket
 * @see com.sambaash.platform.srv.rsvp.model.RsvpTicketModel
 * @generated
 */
public class RsvpTicketModelImpl extends BaseModelImpl<RsvpTicket>
	implements RsvpTicketModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rsvp ticket model instance should use the {@link com.sambaash.platform.srv.rsvp.model.RsvpTicket} interface instead.
	 */
	public static final String TABLE_NAME = "SPRsvpTicket";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spRsvpTicketId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "spRsvpId", Types.BIGINT },
			{ "price", Types.DOUBLE },
			{ "quantity", Types.INTEGER },
			{ "soldQuantity", Types.INTEGER },
			{ "ticketSequence", Types.INTEGER },
			{ "lastSequenceNumber", Types.INTEGER },
			{ "sequencePrefix", Types.VARCHAR },
			{ "sequenceSuffix", Types.VARCHAR },
			{ "ticketTemplateUrl", Types.VARCHAR },
			{ "modifiedBy", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPRsvpTicket (uuid_ VARCHAR(75) null,spRsvpTicketId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,spRsvpId BIGINT(20),price DOUBLE,quantity INTEGER,soldQuantity INTEGER,ticketSequence INTEGER,lastSequenceNumber INTEGER,sequencePrefix VARCHAR(2) null,sequenceSuffix VARCHAR(2) null,ticketTemplateUrl VARCHAR(250) null,modifiedBy BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPRsvpTicket";
	public static final String ORDER_BY_JPQL = " ORDER BY rsvpTicket.rsvpTicketId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPRsvpTicket.spRsvpTicketId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.rsvp.model.RsvpTicket"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.rsvp.model.RsvpTicket"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.rsvp.model.RsvpTicket"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long RSVPID_COLUMN_BITMASK = 4L;
	public static long UUID_COLUMN_BITMASK = 8L;
	public static long RSVPTICKETID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.rsvp.model.RsvpTicket"));

	public RsvpTicketModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _rsvpTicketId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRsvpTicketId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _rsvpTicketId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RsvpTicket.class;
	}

	@Override
	public String getModelClassName() {
		return RsvpTicket.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("rsvpTicketId", getRsvpTicketId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("rsvpId", getRsvpId());
		attributes.put("price", getPrice());
		attributes.put("quantity", getQuantity());
		attributes.put("soldQuantity", getSoldQuantity());
		attributes.put("ticketSequence", getTicketSequence());
		attributes.put("lastSequenceNumber", getLastSequenceNumber());
		attributes.put("sequencePrefix", getSequencePrefix());
		attributes.put("sequenceSuffix", getSequenceSuffix());
		attributes.put("ticketTemplateUrl", getTicketTemplateUrl());
		attributes.put("modifiedBy", getModifiedBy());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long rsvpTicketId = (Long)attributes.get("rsvpTicketId");

		if (rsvpTicketId != null) {
			setRsvpTicketId(rsvpTicketId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long rsvpId = (Long)attributes.get("rsvpId");

		if (rsvpId != null) {
			setRsvpId(rsvpId);
		}

		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Integer quantity = (Integer)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}

		Integer soldQuantity = (Integer)attributes.get("soldQuantity");

		if (soldQuantity != null) {
			setSoldQuantity(soldQuantity);
		}

		Integer ticketSequence = (Integer)attributes.get("ticketSequence");

		if (ticketSequence != null) {
			setTicketSequence(ticketSequence);
		}

		Integer lastSequenceNumber = (Integer)attributes.get(
				"lastSequenceNumber");

		if (lastSequenceNumber != null) {
			setLastSequenceNumber(lastSequenceNumber);
		}

		String sequencePrefix = (String)attributes.get("sequencePrefix");

		if (sequencePrefix != null) {
			setSequencePrefix(sequencePrefix);
		}

		String sequenceSuffix = (String)attributes.get("sequenceSuffix");

		if (sequenceSuffix != null) {
			setSequenceSuffix(sequenceSuffix);
		}

		String ticketTemplateUrl = (String)attributes.get("ticketTemplateUrl");

		if (ticketTemplateUrl != null) {
			setTicketTemplateUrl(ticketTemplateUrl);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getRsvpTicketId() {
		return _rsvpTicketId;
	}

	@Override
	public void setRsvpTicketId(long rsvpTicketId) {
		_rsvpTicketId = rsvpTicketId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getRsvpId() {
		return _rsvpId;
	}

	@Override
	public void setRsvpId(long rsvpId) {
		_columnBitmask |= RSVPID_COLUMN_BITMASK;

		if (!_setOriginalRsvpId) {
			_setOriginalRsvpId = true;

			_originalRsvpId = _rsvpId;
		}

		_rsvpId = rsvpId;
	}

	public long getOriginalRsvpId() {
		return _originalRsvpId;
	}

	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@Override
	public int getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(int quantity) {
		_quantity = quantity;
	}

	@Override
	public int getSoldQuantity() {
		return _soldQuantity;
	}

	@Override
	public void setSoldQuantity(int soldQuantity) {
		_soldQuantity = soldQuantity;
	}

	@Override
	public int getTicketSequence() {
		return _ticketSequence;
	}

	@Override
	public void setTicketSequence(int ticketSequence) {
		_ticketSequence = ticketSequence;
	}

	@Override
	public int getLastSequenceNumber() {
		return _lastSequenceNumber;
	}

	@Override
	public void setLastSequenceNumber(int lastSequenceNumber) {
		_lastSequenceNumber = lastSequenceNumber;
	}

	@Override
	public String getSequencePrefix() {
		if (_sequencePrefix == null) {
			return StringPool.BLANK;
		}
		else {
			return _sequencePrefix;
		}
	}

	@Override
	public void setSequencePrefix(String sequencePrefix) {
		_sequencePrefix = sequencePrefix;
	}

	@Override
	public String getSequenceSuffix() {
		if (_sequenceSuffix == null) {
			return StringPool.BLANK;
		}
		else {
			return _sequenceSuffix;
		}
	}

	@Override
	public void setSequenceSuffix(String sequenceSuffix) {
		_sequenceSuffix = sequenceSuffix;
	}

	@Override
	public String getTicketTemplateUrl() {
		if (_ticketTemplateUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _ticketTemplateUrl;
		}
	}

	@Override
	public void setTicketTemplateUrl(String ticketTemplateUrl) {
		_ticketTemplateUrl = ticketTemplateUrl;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				RsvpTicket.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			RsvpTicket.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RsvpTicket toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RsvpTicket)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RsvpTicketImpl rsvpTicketImpl = new RsvpTicketImpl();

		rsvpTicketImpl.setUuid(getUuid());
		rsvpTicketImpl.setRsvpTicketId(getRsvpTicketId());
		rsvpTicketImpl.setGroupId(getGroupId());
		rsvpTicketImpl.setCompanyId(getCompanyId());
		rsvpTicketImpl.setUserId(getUserId());
		rsvpTicketImpl.setUserName(getUserName());
		rsvpTicketImpl.setCreateDate(getCreateDate());
		rsvpTicketImpl.setModifiedDate(getModifiedDate());
		rsvpTicketImpl.setRsvpId(getRsvpId());
		rsvpTicketImpl.setPrice(getPrice());
		rsvpTicketImpl.setQuantity(getQuantity());
		rsvpTicketImpl.setSoldQuantity(getSoldQuantity());
		rsvpTicketImpl.setTicketSequence(getTicketSequence());
		rsvpTicketImpl.setLastSequenceNumber(getLastSequenceNumber());
		rsvpTicketImpl.setSequencePrefix(getSequencePrefix());
		rsvpTicketImpl.setSequenceSuffix(getSequenceSuffix());
		rsvpTicketImpl.setTicketTemplateUrl(getTicketTemplateUrl());
		rsvpTicketImpl.setModifiedBy(getModifiedBy());

		rsvpTicketImpl.resetOriginalValues();

		return rsvpTicketImpl;
	}

	@Override
	public int compareTo(RsvpTicket rsvpTicket) {
		long primaryKey = rsvpTicket.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RsvpTicket)) {
			return false;
		}

		RsvpTicket rsvpTicket = (RsvpTicket)obj;

		long primaryKey = rsvpTicket.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RsvpTicketModelImpl rsvpTicketModelImpl = this;

		rsvpTicketModelImpl._originalUuid = rsvpTicketModelImpl._uuid;

		rsvpTicketModelImpl._originalGroupId = rsvpTicketModelImpl._groupId;

		rsvpTicketModelImpl._setOriginalGroupId = false;

		rsvpTicketModelImpl._originalCompanyId = rsvpTicketModelImpl._companyId;

		rsvpTicketModelImpl._setOriginalCompanyId = false;

		rsvpTicketModelImpl._originalRsvpId = rsvpTicketModelImpl._rsvpId;

		rsvpTicketModelImpl._setOriginalRsvpId = false;

		rsvpTicketModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RsvpTicket> toCacheModel() {
		RsvpTicketCacheModel rsvpTicketCacheModel = new RsvpTicketCacheModel();

		rsvpTicketCacheModel.uuid = getUuid();

		String uuid = rsvpTicketCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			rsvpTicketCacheModel.uuid = null;
		}

		rsvpTicketCacheModel.rsvpTicketId = getRsvpTicketId();

		rsvpTicketCacheModel.groupId = getGroupId();

		rsvpTicketCacheModel.companyId = getCompanyId();

		rsvpTicketCacheModel.userId = getUserId();

		rsvpTicketCacheModel.userName = getUserName();

		String userName = rsvpTicketCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			rsvpTicketCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			rsvpTicketCacheModel.createDate = createDate.getTime();
		}
		else {
			rsvpTicketCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			rsvpTicketCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			rsvpTicketCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		rsvpTicketCacheModel.rsvpId = getRsvpId();

		rsvpTicketCacheModel.price = getPrice();

		rsvpTicketCacheModel.quantity = getQuantity();

		rsvpTicketCacheModel.soldQuantity = getSoldQuantity();

		rsvpTicketCacheModel.ticketSequence = getTicketSequence();

		rsvpTicketCacheModel.lastSequenceNumber = getLastSequenceNumber();

		rsvpTicketCacheModel.sequencePrefix = getSequencePrefix();

		String sequencePrefix = rsvpTicketCacheModel.sequencePrefix;

		if ((sequencePrefix != null) && (sequencePrefix.length() == 0)) {
			rsvpTicketCacheModel.sequencePrefix = null;
		}

		rsvpTicketCacheModel.sequenceSuffix = getSequenceSuffix();

		String sequenceSuffix = rsvpTicketCacheModel.sequenceSuffix;

		if ((sequenceSuffix != null) && (sequenceSuffix.length() == 0)) {
			rsvpTicketCacheModel.sequenceSuffix = null;
		}

		rsvpTicketCacheModel.ticketTemplateUrl = getTicketTemplateUrl();

		String ticketTemplateUrl = rsvpTicketCacheModel.ticketTemplateUrl;

		if ((ticketTemplateUrl != null) && (ticketTemplateUrl.length() == 0)) {
			rsvpTicketCacheModel.ticketTemplateUrl = null;
		}

		rsvpTicketCacheModel.modifiedBy = getModifiedBy();

		return rsvpTicketCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", rsvpTicketId=");
		sb.append(getRsvpTicketId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", rsvpId=");
		sb.append(getRsvpId());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", soldQuantity=");
		sb.append(getSoldQuantity());
		sb.append(", ticketSequence=");
		sb.append(getTicketSequence());
		sb.append(", lastSequenceNumber=");
		sb.append(getLastSequenceNumber());
		sb.append(", sequencePrefix=");
		sb.append(getSequencePrefix());
		sb.append(", sequenceSuffix=");
		sb.append(getSequenceSuffix());
		sb.append(", ticketTemplateUrl=");
		sb.append(getTicketTemplateUrl());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.rsvp.model.RsvpTicket");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsvpTicketId</column-name><column-value><![CDATA[");
		sb.append(getRsvpTicketId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsvpId</column-name><column-value><![CDATA[");
		sb.append(getRsvpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>soldQuantity</column-name><column-value><![CDATA[");
		sb.append(getSoldQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketSequence</column-name><column-value><![CDATA[");
		sb.append(getTicketSequence());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastSequenceNumber</column-name><column-value><![CDATA[");
		sb.append(getLastSequenceNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequencePrefix</column-name><column-value><![CDATA[");
		sb.append(getSequencePrefix());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceSuffix</column-name><column-value><![CDATA[");
		sb.append(getSequenceSuffix());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketTemplateUrl</column-name><column-value><![CDATA[");
		sb.append(getTicketTemplateUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RsvpTicket.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RsvpTicket.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _rsvpTicketId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _rsvpId;
	private long _originalRsvpId;
	private boolean _setOriginalRsvpId;
	private double _price;
	private int _quantity;
	private int _soldQuantity;
	private int _ticketSequence;
	private int _lastSequenceNumber;
	private String _sequencePrefix;
	private String _sequenceSuffix;
	private String _ticketTemplateUrl;
	private long _modifiedBy;
	private long _columnBitmask;
	private RsvpTicket _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spshopping.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spshopping.model.SPSellingPrice;
import com.sambaash.platform.srv.spshopping.model.SPSellingPriceModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPSellingPrice service. Represents a row in the &quot;SPSellingPrice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spshopping.model.SPSellingPriceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPSellingPriceImpl}.
 * </p>
 *
 * @author pradeep
 * @see SPSellingPriceImpl
 * @see com.sambaash.platform.srv.spshopping.model.SPSellingPrice
 * @see com.sambaash.platform.srv.spshopping.model.SPSellingPriceModel
 * @generated
 */
public class SPSellingPriceModelImpl extends BaseModelImpl<SPSellingPrice>
	implements SPSellingPriceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p selling price model instance should use the {@link com.sambaash.platform.srv.spshopping.model.SPSellingPrice} interface instead.
	 */
	public static final String TABLE_NAME = "SPSellingPrice";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spSellingPriceId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "priceRefId", Types.BIGINT },
			{ "priceRefTypeId", Types.BIGINT },
			{ "currencyCode", Types.VARCHAR },
			{ "basePrice", Types.VARCHAR },
			{ "taxName", Types.VARCHAR },
			{ "taxValue", Types.VARCHAR },
			{ "totalPrice", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table SPSellingPrice (spSellingPriceId BIGINT(20) not null primary key,groupId BIGINT(20),priceRefId BIGINT(20),priceRefTypeId BIGINT(20),currencyCode VARCHAR(75) null,basePrice VARCHAR(75) null,taxName VARCHAR(75) null,taxValue VARCHAR(75) null,totalPrice VARCHAR(75) null,companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null)";
	public static final String TABLE_SQL_DROP = "drop table SPSellingPrice";
	public static final String ORDER_BY_JPQL = " ORDER BY spSellingPrice.spSellingPriceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPSellingPrice.spSellingPriceId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spshopping.model.SPSellingPrice"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spshopping.model.SPSellingPrice"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spshopping.model.SPSellingPrice"),
			true);
	public static long PRICEREFID_COLUMN_BITMASK = 1L;
	public static long SPSELLINGPRICEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spshopping.model.SPSellingPrice"));

	public SPSellingPriceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spSellingPriceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpSellingPriceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spSellingPriceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPSellingPrice.class;
	}

	@Override
	public String getModelClassName() {
		return SPSellingPrice.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spSellingPriceId", getSpSellingPriceId());
		attributes.put("groupId", getGroupId());
		attributes.put("priceRefId", getPriceRefId());
		attributes.put("priceRefTypeId", getPriceRefTypeId());
		attributes.put("currencyCode", getCurrencyCode());
		attributes.put("basePrice", getBasePrice());
		attributes.put("taxName", getTaxName());
		attributes.put("taxValue", getTaxValue());
		attributes.put("totalPrice", getTotalPrice());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spSellingPriceId = (Long)attributes.get("spSellingPriceId");

		if (spSellingPriceId != null) {
			setSpSellingPriceId(spSellingPriceId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long priceRefId = (Long)attributes.get("priceRefId");

		if (priceRefId != null) {
			setPriceRefId(priceRefId);
		}

		Long priceRefTypeId = (Long)attributes.get("priceRefTypeId");

		if (priceRefTypeId != null) {
			setPriceRefTypeId(priceRefTypeId);
		}

		String currencyCode = (String)attributes.get("currencyCode");

		if (currencyCode != null) {
			setCurrencyCode(currencyCode);
		}

		String basePrice = (String)attributes.get("basePrice");

		if (basePrice != null) {
			setBasePrice(basePrice);
		}

		String taxName = (String)attributes.get("taxName");

		if (taxName != null) {
			setTaxName(taxName);
		}

		String taxValue = (String)attributes.get("taxValue");

		if (taxValue != null) {
			setTaxValue(taxValue);
		}

		String totalPrice = (String)attributes.get("totalPrice");

		if (totalPrice != null) {
			setTotalPrice(totalPrice);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getSpSellingPriceId() {
		return _spSellingPriceId;
	}

	@Override
	public void setSpSellingPriceId(long spSellingPriceId) {
		_spSellingPriceId = spSellingPriceId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getPriceRefId() {
		return _priceRefId;
	}

	@Override
	public void setPriceRefId(long priceRefId) {
		_columnBitmask |= PRICEREFID_COLUMN_BITMASK;

		if (!_setOriginalPriceRefId) {
			_setOriginalPriceRefId = true;

			_originalPriceRefId = _priceRefId;
		}

		_priceRefId = priceRefId;
	}

	public long getOriginalPriceRefId() {
		return _originalPriceRefId;
	}

	@Override
	public long getPriceRefTypeId() {
		return _priceRefTypeId;
	}

	@Override
	public void setPriceRefTypeId(long priceRefTypeId) {
		_priceRefTypeId = priceRefTypeId;
	}

	@Override
	public String getCurrencyCode() {
		if (_currencyCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _currencyCode;
		}
	}

	@Override
	public void setCurrencyCode(String currencyCode) {
		_currencyCode = currencyCode;
	}

	@Override
	public String getBasePrice() {
		if (_basePrice == null) {
			return StringPool.BLANK;
		}
		else {
			return _basePrice;
		}
	}

	@Override
	public void setBasePrice(String basePrice) {
		_basePrice = basePrice;
	}

	@Override
	public String getTaxName() {
		if (_taxName == null) {
			return StringPool.BLANK;
		}
		else {
			return _taxName;
		}
	}

	@Override
	public void setTaxName(String taxName) {
		_taxName = taxName;
	}

	@Override
	public String getTaxValue() {
		if (_taxValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _taxValue;
		}
	}

	@Override
	public void setTaxValue(String taxValue) {
		_taxValue = taxValue;
	}

	@Override
	public String getTotalPrice() {
		if (_totalPrice == null) {
			return StringPool.BLANK;
		}
		else {
			return _totalPrice;
		}
	}

	@Override
	public void setTotalPrice(String totalPrice) {
		_totalPrice = totalPrice;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPSellingPrice.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPSellingPrice toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPSellingPrice)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPSellingPriceImpl spSellingPriceImpl = new SPSellingPriceImpl();

		spSellingPriceImpl.setSpSellingPriceId(getSpSellingPriceId());
		spSellingPriceImpl.setGroupId(getGroupId());
		spSellingPriceImpl.setPriceRefId(getPriceRefId());
		spSellingPriceImpl.setPriceRefTypeId(getPriceRefTypeId());
		spSellingPriceImpl.setCurrencyCode(getCurrencyCode());
		spSellingPriceImpl.setBasePrice(getBasePrice());
		spSellingPriceImpl.setTaxName(getTaxName());
		spSellingPriceImpl.setTaxValue(getTaxValue());
		spSellingPriceImpl.setTotalPrice(getTotalPrice());
		spSellingPriceImpl.setCompanyId(getCompanyId());
		spSellingPriceImpl.setUserId(getUserId());
		spSellingPriceImpl.setUserName(getUserName());
		spSellingPriceImpl.setCreateDate(getCreateDate());
		spSellingPriceImpl.setModifiedDate(getModifiedDate());

		spSellingPriceImpl.resetOriginalValues();

		return spSellingPriceImpl;
	}

	@Override
	public int compareTo(SPSellingPrice spSellingPrice) {
		long primaryKey = spSellingPrice.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPSellingPrice)) {
			return false;
		}

		SPSellingPrice spSellingPrice = (SPSellingPrice)obj;

		long primaryKey = spSellingPrice.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPSellingPriceModelImpl spSellingPriceModelImpl = this;

		spSellingPriceModelImpl._originalPriceRefId = spSellingPriceModelImpl._priceRefId;

		spSellingPriceModelImpl._setOriginalPriceRefId = false;

		spSellingPriceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPSellingPrice> toCacheModel() {
		SPSellingPriceCacheModel spSellingPriceCacheModel = new SPSellingPriceCacheModel();

		spSellingPriceCacheModel.spSellingPriceId = getSpSellingPriceId();

		spSellingPriceCacheModel.groupId = getGroupId();

		spSellingPriceCacheModel.priceRefId = getPriceRefId();

		spSellingPriceCacheModel.priceRefTypeId = getPriceRefTypeId();

		spSellingPriceCacheModel.currencyCode = getCurrencyCode();

		String currencyCode = spSellingPriceCacheModel.currencyCode;

		if ((currencyCode != null) && (currencyCode.length() == 0)) {
			spSellingPriceCacheModel.currencyCode = null;
		}

		spSellingPriceCacheModel.basePrice = getBasePrice();

		String basePrice = spSellingPriceCacheModel.basePrice;

		if ((basePrice != null) && (basePrice.length() == 0)) {
			spSellingPriceCacheModel.basePrice = null;
		}

		spSellingPriceCacheModel.taxName = getTaxName();

		String taxName = spSellingPriceCacheModel.taxName;

		if ((taxName != null) && (taxName.length() == 0)) {
			spSellingPriceCacheModel.taxName = null;
		}

		spSellingPriceCacheModel.taxValue = getTaxValue();

		String taxValue = spSellingPriceCacheModel.taxValue;

		if ((taxValue != null) && (taxValue.length() == 0)) {
			spSellingPriceCacheModel.taxValue = null;
		}

		spSellingPriceCacheModel.totalPrice = getTotalPrice();

		String totalPrice = spSellingPriceCacheModel.totalPrice;

		if ((totalPrice != null) && (totalPrice.length() == 0)) {
			spSellingPriceCacheModel.totalPrice = null;
		}

		spSellingPriceCacheModel.companyId = getCompanyId();

		spSellingPriceCacheModel.userId = getUserId();

		spSellingPriceCacheModel.userName = getUserName();

		String userName = spSellingPriceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			spSellingPriceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			spSellingPriceCacheModel.createDate = createDate.getTime();
		}
		else {
			spSellingPriceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spSellingPriceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spSellingPriceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return spSellingPriceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{spSellingPriceId=");
		sb.append(getSpSellingPriceId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", priceRefId=");
		sb.append(getPriceRefId());
		sb.append(", priceRefTypeId=");
		sb.append(getPriceRefTypeId());
		sb.append(", currencyCode=");
		sb.append(getCurrencyCode());
		sb.append(", basePrice=");
		sb.append(getBasePrice());
		sb.append(", taxName=");
		sb.append(getTaxName());
		sb.append(", taxValue=");
		sb.append(getTaxValue());
		sb.append(", totalPrice=");
		sb.append(getTotalPrice());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.spshopping.model.SPSellingPrice");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spSellingPriceId</column-name><column-value><![CDATA[");
		sb.append(getSpSellingPriceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceRefId</column-name><column-value><![CDATA[");
		sb.append(getPriceRefId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>priceRefTypeId</column-name><column-value><![CDATA[");
		sb.append(getPriceRefTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currencyCode</column-name><column-value><![CDATA[");
		sb.append(getCurrencyCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>basePrice</column-name><column-value><![CDATA[");
		sb.append(getBasePrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxName</column-name><column-value><![CDATA[");
		sb.append(getTaxName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>taxValue</column-name><column-value><![CDATA[");
		sb.append(getTaxValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalPrice</column-name><column-value><![CDATA[");
		sb.append(getTotalPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPSellingPrice.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPSellingPrice.class
		};
	private long _spSellingPriceId;
	private long _groupId;
	private long _priceRefId;
	private long _originalPriceRefId;
	private boolean _setOriginalPriceRefId;
	private long _priceRefTypeId;
	private String _currencyCode;
	private String _basePrice;
	private String _taxName;
	private String _taxValue;
	private String _totalPrice;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private SPSellingPrice _escapedModel;
}
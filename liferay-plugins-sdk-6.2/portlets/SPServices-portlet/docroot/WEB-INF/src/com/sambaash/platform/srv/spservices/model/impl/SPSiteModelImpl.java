/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spservices.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spservices.model.SPSite;
import com.sambaash.platform.srv.spservices.model.SPSiteModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPSite service. Represents a row in the &quot;SPSite&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spservices.model.SPSiteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPSiteImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see SPSiteImpl
 * @see com.sambaash.platform.srv.spservices.model.SPSite
 * @see com.sambaash.platform.srv.spservices.model.SPSiteModel
 * @generated
 */
public class SPSiteModelImpl extends BaseModelImpl<SPSite>
	implements SPSiteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p site model instance should use the {@link com.sambaash.platform.srv.spservices.model.SPSite} interface instead.
	 */
	public static final String TABLE_NAME = "SPSite";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spSiteId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "virtualHostId", Types.BIGINT },
			{ "layoutSetId", Types.BIGINT },
			{ "authAccessId", Types.BIGINT },
			{ "loginType", Types.BIGINT },
			{ "password_", Types.VARCHAR },
			{ "active_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SPSite (uuid_ VARCHAR(75) null,spSiteId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,virtualHostId BIGINT(20),layoutSetId BIGINT(20),authAccessId BIGINT(20),loginType BIGINT(20),password_ VARCHAR(75) null,active_ BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SPSite";
	public static final String ORDER_BY_JPQL = " ORDER BY spSite.spSiteId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPSite.spSiteId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spservices.model.SPSite"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spservices.model.SPSite"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spservices.model.SPSite"),
			true);
	public static long AUTHACCESSID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static long UUID_COLUMN_BITMASK = 16L;
	public static long VIRTUALHOSTID_COLUMN_BITMASK = 32L;
	public static long SPSITEID_COLUMN_BITMASK = 64L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spservices.model.SPSite"));

	public SPSiteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spSiteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpSiteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spSiteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPSite.class;
	}

	@Override
	public String getModelClassName() {
		return SPSite.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("spSiteId", getSpSiteId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("virtualHostId", getVirtualHostId());
		attributes.put("layoutSetId", getLayoutSetId());
		attributes.put("authAccessId", getAuthAccessId());
		attributes.put("loginType", getLoginType());
		attributes.put("password", getPassword());
		attributes.put("active", getActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long spSiteId = (Long)attributes.get("spSiteId");

		if (spSiteId != null) {
			setSpSiteId(spSiteId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long virtualHostId = (Long)attributes.get("virtualHostId");

		if (virtualHostId != null) {
			setVirtualHostId(virtualHostId);
		}

		Long layoutSetId = (Long)attributes.get("layoutSetId");

		if (layoutSetId != null) {
			setLayoutSetId(layoutSetId);
		}

		Long authAccessId = (Long)attributes.get("authAccessId");

		if (authAccessId != null) {
			setAuthAccessId(authAccessId);
		}

		Long loginType = (Long)attributes.get("loginType");

		if (loginType != null) {
			setLoginType(loginType);
		}

		String password = (String)attributes.get("password");

		if (password != null) {
			setPassword(password);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getSpSiteId() {
		return _spSiteId;
	}

	@Override
	public void setSpSiteId(long spSiteId) {
		_spSiteId = spSiteId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getVirtualHostId() {
		return _virtualHostId;
	}

	@Override
	public void setVirtualHostId(long virtualHostId) {
		_columnBitmask |= VIRTUALHOSTID_COLUMN_BITMASK;

		if (!_setOriginalVirtualHostId) {
			_setOriginalVirtualHostId = true;

			_originalVirtualHostId = _virtualHostId;
		}

		_virtualHostId = virtualHostId;
	}

	public long getOriginalVirtualHostId() {
		return _originalVirtualHostId;
	}

	@Override
	public long getLayoutSetId() {
		return _layoutSetId;
	}

	@Override
	public void setLayoutSetId(long layoutSetId) {
		_layoutSetId = layoutSetId;
	}

	@Override
	public long getAuthAccessId() {
		return _authAccessId;
	}

	@Override
	public void setAuthAccessId(long authAccessId) {
		_columnBitmask |= AUTHACCESSID_COLUMN_BITMASK;

		if (!_setOriginalAuthAccessId) {
			_setOriginalAuthAccessId = true;

			_originalAuthAccessId = _authAccessId;
		}

		_authAccessId = authAccessId;
	}

	public long getOriginalAuthAccessId() {
		return _originalAuthAccessId;
	}

	@Override
	public long getLoginType() {
		return _loginType;
	}

	@Override
	public void setLoginType(long loginType) {
		_loginType = loginType;
	}

	@Override
	public String getPassword() {
		if (_password == null) {
			return StringPool.BLANK;
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		_password = password;
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				SPSite.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPSite.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPSite toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPSite)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPSiteImpl spSiteImpl = new SPSiteImpl();

		spSiteImpl.setUuid(getUuid());
		spSiteImpl.setSpSiteId(getSpSiteId());
		spSiteImpl.setGroupId(getGroupId());
		spSiteImpl.setCompanyId(getCompanyId());
		spSiteImpl.setUserId(getUserId());
		spSiteImpl.setUserName(getUserName());
		spSiteImpl.setCreateDate(getCreateDate());
		spSiteImpl.setModifiedDate(getModifiedDate());
		spSiteImpl.setVirtualHostId(getVirtualHostId());
		spSiteImpl.setLayoutSetId(getLayoutSetId());
		spSiteImpl.setAuthAccessId(getAuthAccessId());
		spSiteImpl.setLoginType(getLoginType());
		spSiteImpl.setPassword(getPassword());
		spSiteImpl.setActive(getActive());

		spSiteImpl.resetOriginalValues();

		return spSiteImpl;
	}

	@Override
	public int compareTo(SPSite spSite) {
		long primaryKey = spSite.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPSite)) {
			return false;
		}

		SPSite spSite = (SPSite)obj;

		long primaryKey = spSite.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPSiteModelImpl spSiteModelImpl = this;

		spSiteModelImpl._originalUuid = spSiteModelImpl._uuid;

		spSiteModelImpl._originalGroupId = spSiteModelImpl._groupId;

		spSiteModelImpl._setOriginalGroupId = false;

		spSiteModelImpl._originalCompanyId = spSiteModelImpl._companyId;

		spSiteModelImpl._setOriginalCompanyId = false;

		spSiteModelImpl._originalUserId = spSiteModelImpl._userId;

		spSiteModelImpl._setOriginalUserId = false;

		spSiteModelImpl._originalVirtualHostId = spSiteModelImpl._virtualHostId;

		spSiteModelImpl._setOriginalVirtualHostId = false;

		spSiteModelImpl._originalAuthAccessId = spSiteModelImpl._authAccessId;

		spSiteModelImpl._setOriginalAuthAccessId = false;

		spSiteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPSite> toCacheModel() {
		SPSiteCacheModel spSiteCacheModel = new SPSiteCacheModel();

		spSiteCacheModel.uuid = getUuid();

		String uuid = spSiteCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			spSiteCacheModel.uuid = null;
		}

		spSiteCacheModel.spSiteId = getSpSiteId();

		spSiteCacheModel.groupId = getGroupId();

		spSiteCacheModel.companyId = getCompanyId();

		spSiteCacheModel.userId = getUserId();

		spSiteCacheModel.userName = getUserName();

		String userName = spSiteCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			spSiteCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			spSiteCacheModel.createDate = createDate.getTime();
		}
		else {
			spSiteCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spSiteCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spSiteCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		spSiteCacheModel.virtualHostId = getVirtualHostId();

		spSiteCacheModel.layoutSetId = getLayoutSetId();

		spSiteCacheModel.authAccessId = getAuthAccessId();

		spSiteCacheModel.loginType = getLoginType();

		spSiteCacheModel.password = getPassword();

		String password = spSiteCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			spSiteCacheModel.password = null;
		}

		spSiteCacheModel.active = getActive();

		return spSiteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", spSiteId=");
		sb.append(getSpSiteId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", virtualHostId=");
		sb.append(getVirtualHostId());
		sb.append(", layoutSetId=");
		sb.append(getLayoutSetId());
		sb.append(", authAccessId=");
		sb.append(getAuthAccessId());
		sb.append(", loginType=");
		sb.append(getLoginType());
		sb.append(", password=");
		sb.append(getPassword());
		sb.append(", active=");
		sb.append(getActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.spservices.model.SPSite");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spSiteId</column-name><column-value><![CDATA[");
		sb.append(getSpSiteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualHostId</column-name><column-value><![CDATA[");
		sb.append(getVirtualHostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>layoutSetId</column-name><column-value><![CDATA[");
		sb.append(getLayoutSetId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authAccessId</column-name><column-value><![CDATA[");
		sb.append(getAuthAccessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>loginType</column-name><column-value><![CDATA[");
		sb.append(getLoginType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>password</column-name><column-value><![CDATA[");
		sb.append(getPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPSite.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { SPSite.class };
	private String _uuid;
	private String _originalUuid;
	private long _spSiteId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _virtualHostId;
	private long _originalVirtualHostId;
	private boolean _setOriginalVirtualHostId;
	private long _layoutSetId;
	private long _authAccessId;
	private long _originalAuthAccessId;
	private boolean _setOriginalAuthAccessId;
	private long _loginType;
	private String _password;
	private boolean _active;
	private long _columnBitmask;
	private SPSite _escapedModel;
}
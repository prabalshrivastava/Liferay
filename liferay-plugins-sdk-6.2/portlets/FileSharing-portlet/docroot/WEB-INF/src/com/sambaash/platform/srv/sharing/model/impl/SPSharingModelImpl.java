/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.sharing.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.sharing.model.SPSharing;
import com.sambaash.platform.srv.sharing.model.SPSharingModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPSharing service. Represents a row in the &quot;SPSharing&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.sharing.model.SPSharingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPSharingImpl}.
 * </p>
 *
 * @author harini
 * @see SPSharingImpl
 * @see com.sambaash.platform.srv.sharing.model.SPSharing
 * @see com.sambaash.platform.srv.sharing.model.SPSharingModel
 * @generated
 */
public class SPSharingModelImpl extends BaseModelImpl<SPSharing>
	implements SPSharingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p sharing model instance should use the {@link com.sambaash.platform.srv.sharing.model.SPSharing} interface instead.
	 */
	public static final String TABLE_NAME = "SPSharing";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spSharingId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createdBy", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "emailAddress", Types.VARCHAR },
			{ "classNameId", Types.BIGINT },
			{ "classPK", Types.BIGINT },
			{ "duration", Types.INTEGER },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "url", Types.VARCHAR },
			{ "expired", Types.BOOLEAN },
			{ "internalShare", Types.BOOLEAN },
			{ "writePermission", Types.BOOLEAN },
			{ "viewCount", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table SPSharing (spSharingId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),createdBy BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,userId BIGINT(20),emailAddress VARCHAR(75) null,classNameId BIGINT(20),classPK BIGINT(20),duration INTEGER,startDate DATETIME null,endDate DATETIME null,url VARCHAR(75) null,expired BOOLEAN,internalShare BOOLEAN,writePermission BOOLEAN,viewCount INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table SPSharing";
	public static final String ORDER_BY_JPQL = " ORDER BY spSharing.spSharingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPSharing.spSharingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.sharing.model.SPSharing"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.sharing.model.SPSharing"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.sharing.model.SPSharing"),
			true);
	public static long CLASSNAMEID_COLUMN_BITMASK = 1L;
	public static long CLASSPK_COLUMN_BITMASK = 2L;
	public static long CREATEDBY_COLUMN_BITMASK = 4L;
	public static long EMAILADDRESS_COLUMN_BITMASK = 8L;
	public static long ENDDATE_COLUMN_BITMASK = 16L;
	public static long INTERNALSHARE_COLUMN_BITMASK = 32L;
	public static long STARTDATE_COLUMN_BITMASK = 64L;
	public static long USERID_COLUMN_BITMASK = 128L;
	public static long SPSHARINGID_COLUMN_BITMASK = 256L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.sharing.model.SPSharing"));

	public SPSharingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spSharingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpSharingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spSharingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPSharing.class;
	}

	@Override
	public String getModelClassName() {
		return SPSharing.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spSharingId", getSpSharingId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("userId", getUserId());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("classNameId", getClassNameId());
		attributes.put("classPK", getClassPK());
		attributes.put("duration", getDuration());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("url", getUrl());
		attributes.put("expired", getExpired());
		attributes.put("internalShare", getInternalShare());
		attributes.put("writePermission", getWritePermission());
		attributes.put("viewCount", getViewCount());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spSharingId = (Long)attributes.get("spSharingId");

		if (spSharingId != null) {
			setSpSharingId(spSharingId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		Long classPK = (Long)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}

		Integer duration = (Integer)attributes.get("duration");

		if (duration != null) {
			setDuration(duration);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		Boolean expired = (Boolean)attributes.get("expired");

		if (expired != null) {
			setExpired(expired);
		}

		Boolean internalShare = (Boolean)attributes.get("internalShare");

		if (internalShare != null) {
			setInternalShare(internalShare);
		}

		Boolean writePermission = (Boolean)attributes.get("writePermission");

		if (writePermission != null) {
			setWritePermission(writePermission);
		}

		Integer viewCount = (Integer)attributes.get("viewCount");

		if (viewCount != null) {
			setViewCount(viewCount);
		}
	}

	@Override
	public long getSpSharingId() {
		return _spSharingId;
	}

	@Override
	public void setSpSharingId(long spSharingId) {
		_spSharingId = spSharingId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_columnBitmask |= CREATEDBY_COLUMN_BITMASK;

		if (!_setOriginalCreatedBy) {
			_setOriginalCreatedBy = true;

			_originalCreatedBy = _createdBy;
		}

		_createdBy = createdBy;
	}

	public long getOriginalCreatedBy() {
		return _originalCreatedBy;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_columnBitmask |= EMAILADDRESS_COLUMN_BITMASK;

		if (_originalEmailAddress == null) {
			_originalEmailAddress = _emailAddress;
		}

		_emailAddress = emailAddress;
	}

	public String getOriginalEmailAddress() {
		return GetterUtil.getString(_originalEmailAddress);
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_columnBitmask |= CLASSNAMEID_COLUMN_BITMASK;

		if (!_setOriginalClassNameId) {
			_setOriginalClassNameId = true;

			_originalClassNameId = _classNameId;
		}

		_classNameId = classNameId;
	}

	public long getOriginalClassNameId() {
		return _originalClassNameId;
	}

	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (!_setOriginalClassPK) {
			_setOriginalClassPK = true;

			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public long getOriginalClassPK() {
		return _originalClassPK;
	}

	@Override
	public int getDuration() {
		return _duration;
	}

	@Override
	public void setDuration(int duration) {
		_duration = duration;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_columnBitmask |= STARTDATE_COLUMN_BITMASK;

		if (_originalStartDate == null) {
			_originalStartDate = _startDate;
		}

		_startDate = startDate;
	}

	public Date getOriginalStartDate() {
		return _originalStartDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_columnBitmask |= ENDDATE_COLUMN_BITMASK;

		if (_originalEndDate == null) {
			_originalEndDate = _endDate;
		}

		_endDate = endDate;
	}

	public Date getOriginalEndDate() {
		return _originalEndDate;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return StringPool.BLANK;
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public boolean getExpired() {
		return _expired;
	}

	@Override
	public boolean isExpired() {
		return _expired;
	}

	@Override
	public void setExpired(boolean expired) {
		_expired = expired;
	}

	@Override
	public boolean getInternalShare() {
		return _internalShare;
	}

	@Override
	public boolean isInternalShare() {
		return _internalShare;
	}

	@Override
	public void setInternalShare(boolean internalShare) {
		_columnBitmask |= INTERNALSHARE_COLUMN_BITMASK;

		if (!_setOriginalInternalShare) {
			_setOriginalInternalShare = true;

			_originalInternalShare = _internalShare;
		}

		_internalShare = internalShare;
	}

	public boolean getOriginalInternalShare() {
		return _originalInternalShare;
	}

	@Override
	public boolean getWritePermission() {
		return _writePermission;
	}

	@Override
	public boolean isWritePermission() {
		return _writePermission;
	}

	@Override
	public void setWritePermission(boolean writePermission) {
		_writePermission = writePermission;
	}

	@Override
	public int getViewCount() {
		return _viewCount;
	}

	@Override
	public void setViewCount(int viewCount) {
		_viewCount = viewCount;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPSharing.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPSharing toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPSharing)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPSharingImpl spSharingImpl = new SPSharingImpl();

		spSharingImpl.setSpSharingId(getSpSharingId());
		spSharingImpl.setGroupId(getGroupId());
		spSharingImpl.setCompanyId(getCompanyId());
		spSharingImpl.setCreatedBy(getCreatedBy());
		spSharingImpl.setUserName(getUserName());
		spSharingImpl.setCreateDate(getCreateDate());
		spSharingImpl.setModifiedDate(getModifiedDate());
		spSharingImpl.setUserId(getUserId());
		spSharingImpl.setEmailAddress(getEmailAddress());
		spSharingImpl.setClassNameId(getClassNameId());
		spSharingImpl.setClassPK(getClassPK());
		spSharingImpl.setDuration(getDuration());
		spSharingImpl.setStartDate(getStartDate());
		spSharingImpl.setEndDate(getEndDate());
		spSharingImpl.setUrl(getUrl());
		spSharingImpl.setExpired(getExpired());
		spSharingImpl.setInternalShare(getInternalShare());
		spSharingImpl.setWritePermission(getWritePermission());
		spSharingImpl.setViewCount(getViewCount());

		spSharingImpl.resetOriginalValues();

		return spSharingImpl;
	}

	@Override
	public int compareTo(SPSharing spSharing) {
		long primaryKey = spSharing.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPSharing)) {
			return false;
		}

		SPSharing spSharing = (SPSharing)obj;

		long primaryKey = spSharing.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPSharingModelImpl spSharingModelImpl = this;

		spSharingModelImpl._originalCreatedBy = spSharingModelImpl._createdBy;

		spSharingModelImpl._setOriginalCreatedBy = false;

		spSharingModelImpl._originalUserId = spSharingModelImpl._userId;

		spSharingModelImpl._setOriginalUserId = false;

		spSharingModelImpl._originalEmailAddress = spSharingModelImpl._emailAddress;

		spSharingModelImpl._originalClassNameId = spSharingModelImpl._classNameId;

		spSharingModelImpl._setOriginalClassNameId = false;

		spSharingModelImpl._originalClassPK = spSharingModelImpl._classPK;

		spSharingModelImpl._setOriginalClassPK = false;

		spSharingModelImpl._originalStartDate = spSharingModelImpl._startDate;

		spSharingModelImpl._originalEndDate = spSharingModelImpl._endDate;

		spSharingModelImpl._originalInternalShare = spSharingModelImpl._internalShare;

		spSharingModelImpl._setOriginalInternalShare = false;

		spSharingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPSharing> toCacheModel() {
		SPSharingCacheModel spSharingCacheModel = new SPSharingCacheModel();

		spSharingCacheModel.spSharingId = getSpSharingId();

		spSharingCacheModel.groupId = getGroupId();

		spSharingCacheModel.companyId = getCompanyId();

		spSharingCacheModel.createdBy = getCreatedBy();

		spSharingCacheModel.userName = getUserName();

		String userName = spSharingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			spSharingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			spSharingCacheModel.createDate = createDate.getTime();
		}
		else {
			spSharingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spSharingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spSharingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		spSharingCacheModel.userId = getUserId();

		spSharingCacheModel.emailAddress = getEmailAddress();

		String emailAddress = spSharingCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			spSharingCacheModel.emailAddress = null;
		}

		spSharingCacheModel.classNameId = getClassNameId();

		spSharingCacheModel.classPK = getClassPK();

		spSharingCacheModel.duration = getDuration();

		Date startDate = getStartDate();

		if (startDate != null) {
			spSharingCacheModel.startDate = startDate.getTime();
		}
		else {
			spSharingCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			spSharingCacheModel.endDate = endDate.getTime();
		}
		else {
			spSharingCacheModel.endDate = Long.MIN_VALUE;
		}

		spSharingCacheModel.url = getUrl();

		String url = spSharingCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			spSharingCacheModel.url = null;
		}

		spSharingCacheModel.expired = getExpired();

		spSharingCacheModel.internalShare = getInternalShare();

		spSharingCacheModel.writePermission = getWritePermission();

		spSharingCacheModel.viewCount = getViewCount();

		return spSharingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{spSharingId=");
		sb.append(getSpSharingId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append(", duration=");
		sb.append(getDuration());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", expired=");
		sb.append(getExpired());
		sb.append(", internalShare=");
		sb.append(getInternalShare());
		sb.append(", writePermission=");
		sb.append(getWritePermission());
		sb.append(", viewCount=");
		sb.append(getViewCount());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.sharing.model.SPSharing");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spSharingId</column-name><column-value><![CDATA[");
		sb.append(getSpSharingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>duration</column-name><column-value><![CDATA[");
		sb.append(getDuration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expired</column-name><column-value><![CDATA[");
		sb.append(getExpired());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>internalShare</column-name><column-value><![CDATA[");
		sb.append(getInternalShare());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>writePermission</column-name><column-value><![CDATA[");
		sb.append(getWritePermission());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>viewCount</column-name><column-value><![CDATA[");
		sb.append(getViewCount());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPSharing.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPSharing.class
		};
	private long _spSharingId;
	private long _groupId;
	private long _companyId;
	private long _createdBy;
	private long _originalCreatedBy;
	private boolean _setOriginalCreatedBy;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _emailAddress;
	private String _originalEmailAddress;
	private long _classNameId;
	private long _originalClassNameId;
	private boolean _setOriginalClassNameId;
	private long _classPK;
	private long _originalClassPK;
	private boolean _setOriginalClassPK;
	private int _duration;
	private Date _startDate;
	private Date _originalStartDate;
	private Date _endDate;
	private Date _originalEndDate;
	private String _url;
	private boolean _expired;
	private boolean _internalShare;
	private boolean _originalInternalShare;
	private boolean _setOriginalInternalShare;
	private boolean _writePermission;
	private int _viewCount;
	private long _columnBitmask;
	private SPSharing _escapedModel;
}
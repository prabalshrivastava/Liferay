/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.enrolment.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.enrolment.model.EnrollUploadedTempRecords;
import com.sambaash.platform.srv.enrolment.model.EnrollUploadedTempRecordsModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EnrollUploadedTempRecords service. Represents a row in the &quot;enrolment_EnrollUploadedTempRecords&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.enrolment.model.EnrollUploadedTempRecordsModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EnrollUploadedTempRecordsImpl}.
 * </p>
 *
 * @author Baxture
 * @see EnrollUploadedTempRecordsImpl
 * @see com.sambaash.platform.srv.enrolment.model.EnrollUploadedTempRecords
 * @see com.sambaash.platform.srv.enrolment.model.EnrollUploadedTempRecordsModel
 * @generated
 */
public class EnrollUploadedTempRecordsModelImpl extends BaseModelImpl<EnrollUploadedTempRecords>
	implements EnrollUploadedTempRecordsModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a enroll uploaded temp records model instance should use the {@link com.sambaash.platform.srv.enrolment.model.EnrollUploadedTempRecords} interface instead.
	 */
	public static final String TABLE_NAME = "enrolment_EnrollUploadedTempRecords";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uploadedRecId", Types.BIGINT },
			{ "uploadTransactId", Types.VARCHAR },
			{ "sprCode", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "fullOfficialName", Types.VARCHAR },
			{ "gender", Types.VARCHAR },
			{ "dateofBirth", Types.VARCHAR },
			{ "email", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table enrolment_EnrollUploadedTempRecords (uploadedRecId BIGINT(20) not null primary key,uploadTransactId VARCHAR(75) null,sprCode VARCHAR(75) null,title VARCHAR(75) null,fullOfficialName VARCHAR(75) null,gender VARCHAR(75) null,dateofBirth VARCHAR(75) null,email VARCHAR(75) null,userId BIGINT(20),createDate DATETIME null,modifiedDate DATETIME null)";
	public static final String TABLE_SQL_DROP = "drop table enrolment_EnrollUploadedTempRecords";
	public static final String ORDER_BY_JPQL = " ORDER BY enrollUploadedTempRecords.uploadedRecId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY enrolment_EnrollUploadedTempRecords.uploadedRecId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.enrolment.model.EnrollUploadedTempRecords"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.enrolment.model.EnrollUploadedTempRecords"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.enrolment.model.EnrollUploadedTempRecords"),
			true);
	public static long UPLOADTRANSACTID_COLUMN_BITMASK = 1L;
	public static long UPLOADEDRECID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.enrolment.model.EnrollUploadedTempRecords"));

	public EnrollUploadedTempRecordsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _uploadedRecId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUploadedRecId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _uploadedRecId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return EnrollUploadedTempRecords.class;
	}

	@Override
	public String getModelClassName() {
		return EnrollUploadedTempRecords.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uploadedRecId", getUploadedRecId());
		attributes.put("uploadTransactId", getUploadTransactId());
		attributes.put("sprCode", getSprCode());
		attributes.put("title", getTitle());
		attributes.put("fullOfficialName", getFullOfficialName());
		attributes.put("gender", getGender());
		attributes.put("dateofBirth", getDateofBirth());
		attributes.put("email", getEmail());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long uploadedRecId = (Long)attributes.get("uploadedRecId");

		if (uploadedRecId != null) {
			setUploadedRecId(uploadedRecId);
		}

		String uploadTransactId = (String)attributes.get("uploadTransactId");

		if (uploadTransactId != null) {
			setUploadTransactId(uploadTransactId);
		}

		String sprCode = (String)attributes.get("sprCode");

		if (sprCode != null) {
			setSprCode(sprCode);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String fullOfficialName = (String)attributes.get("fullOfficialName");

		if (fullOfficialName != null) {
			setFullOfficialName(fullOfficialName);
		}

		String gender = (String)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		String dateofBirth = (String)attributes.get("dateofBirth");

		if (dateofBirth != null) {
			setDateofBirth(dateofBirth);
		}

		String email = (String)attributes.get("email");

		if (email != null) {
			setEmail(email);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getUploadedRecId() {
		return _uploadedRecId;
	}

	@Override
	public void setUploadedRecId(long uploadedRecId) {
		_uploadedRecId = uploadedRecId;
	}

	@Override
	public String getUploadTransactId() {
		if (_uploadTransactId == null) {
			return StringPool.BLANK;
		}
		else {
			return _uploadTransactId;
		}
	}

	@Override
	public void setUploadTransactId(String uploadTransactId) {
		_columnBitmask |= UPLOADTRANSACTID_COLUMN_BITMASK;

		if (_originalUploadTransactId == null) {
			_originalUploadTransactId = _uploadTransactId;
		}

		_uploadTransactId = uploadTransactId;
	}

	public String getOriginalUploadTransactId() {
		return GetterUtil.getString(_originalUploadTransactId);
	}

	@Override
	public String getSprCode() {
		if (_sprCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _sprCode;
		}
	}

	@Override
	public void setSprCode(String sprCode) {
		_sprCode = sprCode;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getFullOfficialName() {
		if (_fullOfficialName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fullOfficialName;
		}
	}

	@Override
	public void setFullOfficialName(String fullOfficialName) {
		_fullOfficialName = fullOfficialName;
	}

	@Override
	public String getGender() {
		if (_gender == null) {
			return StringPool.BLANK;
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		_gender = gender;
	}

	@Override
	public String getDateofBirth() {
		if (_dateofBirth == null) {
			return StringPool.BLANK;
		}
		else {
			return _dateofBirth;
		}
	}

	@Override
	public void setDateofBirth(String dateofBirth) {
		_dateofBirth = dateofBirth;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return StringPool.BLANK;
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		_email = email;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			EnrollUploadedTempRecords.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EnrollUploadedTempRecords toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (EnrollUploadedTempRecords)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		EnrollUploadedTempRecordsImpl enrollUploadedTempRecordsImpl = new EnrollUploadedTempRecordsImpl();

		enrollUploadedTempRecordsImpl.setUploadedRecId(getUploadedRecId());
		enrollUploadedTempRecordsImpl.setUploadTransactId(getUploadTransactId());
		enrollUploadedTempRecordsImpl.setSprCode(getSprCode());
		enrollUploadedTempRecordsImpl.setTitle(getTitle());
		enrollUploadedTempRecordsImpl.setFullOfficialName(getFullOfficialName());
		enrollUploadedTempRecordsImpl.setGender(getGender());
		enrollUploadedTempRecordsImpl.setDateofBirth(getDateofBirth());
		enrollUploadedTempRecordsImpl.setEmail(getEmail());
		enrollUploadedTempRecordsImpl.setUserId(getUserId());
		enrollUploadedTempRecordsImpl.setCreateDate(getCreateDate());
		enrollUploadedTempRecordsImpl.setModifiedDate(getModifiedDate());

		enrollUploadedTempRecordsImpl.resetOriginalValues();

		return enrollUploadedTempRecordsImpl;
	}

	@Override
	public int compareTo(EnrollUploadedTempRecords enrollUploadedTempRecords) {
		long primaryKey = enrollUploadedTempRecords.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof EnrollUploadedTempRecords)) {
			return false;
		}

		EnrollUploadedTempRecords enrollUploadedTempRecords = (EnrollUploadedTempRecords)obj;

		long primaryKey = enrollUploadedTempRecords.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EnrollUploadedTempRecordsModelImpl enrollUploadedTempRecordsModelImpl = this;

		enrollUploadedTempRecordsModelImpl._originalUploadTransactId = enrollUploadedTempRecordsModelImpl._uploadTransactId;

		enrollUploadedTempRecordsModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EnrollUploadedTempRecords> toCacheModel() {
		EnrollUploadedTempRecordsCacheModel enrollUploadedTempRecordsCacheModel = new EnrollUploadedTempRecordsCacheModel();

		enrollUploadedTempRecordsCacheModel.uploadedRecId = getUploadedRecId();

		enrollUploadedTempRecordsCacheModel.uploadTransactId = getUploadTransactId();

		String uploadTransactId = enrollUploadedTempRecordsCacheModel.uploadTransactId;

		if ((uploadTransactId != null) && (uploadTransactId.length() == 0)) {
			enrollUploadedTempRecordsCacheModel.uploadTransactId = null;
		}

		enrollUploadedTempRecordsCacheModel.sprCode = getSprCode();

		String sprCode = enrollUploadedTempRecordsCacheModel.sprCode;

		if ((sprCode != null) && (sprCode.length() == 0)) {
			enrollUploadedTempRecordsCacheModel.sprCode = null;
		}

		enrollUploadedTempRecordsCacheModel.title = getTitle();

		String title = enrollUploadedTempRecordsCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			enrollUploadedTempRecordsCacheModel.title = null;
		}

		enrollUploadedTempRecordsCacheModel.fullOfficialName = getFullOfficialName();

		String fullOfficialName = enrollUploadedTempRecordsCacheModel.fullOfficialName;

		if ((fullOfficialName != null) && (fullOfficialName.length() == 0)) {
			enrollUploadedTempRecordsCacheModel.fullOfficialName = null;
		}

		enrollUploadedTempRecordsCacheModel.gender = getGender();

		String gender = enrollUploadedTempRecordsCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			enrollUploadedTempRecordsCacheModel.gender = null;
		}

		enrollUploadedTempRecordsCacheModel.dateofBirth = getDateofBirth();

		String dateofBirth = enrollUploadedTempRecordsCacheModel.dateofBirth;

		if ((dateofBirth != null) && (dateofBirth.length() == 0)) {
			enrollUploadedTempRecordsCacheModel.dateofBirth = null;
		}

		enrollUploadedTempRecordsCacheModel.email = getEmail();

		String email = enrollUploadedTempRecordsCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			enrollUploadedTempRecordsCacheModel.email = null;
		}

		enrollUploadedTempRecordsCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			enrollUploadedTempRecordsCacheModel.createDate = createDate.getTime();
		}
		else {
			enrollUploadedTempRecordsCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			enrollUploadedTempRecordsCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			enrollUploadedTempRecordsCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return enrollUploadedTempRecordsCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uploadedRecId=");
		sb.append(getUploadedRecId());
		sb.append(", uploadTransactId=");
		sb.append(getUploadTransactId());
		sb.append(", sprCode=");
		sb.append(getSprCode());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", fullOfficialName=");
		sb.append(getFullOfficialName());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", dateofBirth=");
		sb.append(getDateofBirth());
		sb.append(", email=");
		sb.append(getEmail());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append(
			"com.sambaash.platform.srv.enrolment.model.EnrollUploadedTempRecords");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uploadedRecId</column-name><column-value><![CDATA[");
		sb.append(getUploadedRecId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uploadTransactId</column-name><column-value><![CDATA[");
		sb.append(getUploadTransactId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sprCode</column-name><column-value><![CDATA[");
		sb.append(getSprCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fullOfficialName</column-name><column-value><![CDATA[");
		sb.append(getFullOfficialName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dateofBirth</column-name><column-value><![CDATA[");
		sb.append(getDateofBirth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>email</column-name><column-value><![CDATA[");
		sb.append(getEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EnrollUploadedTempRecords.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			EnrollUploadedTempRecords.class
		};
	private long _uploadedRecId;
	private String _uploadTransactId;
	private String _originalUploadTransactId;
	private String _sprCode;
	private String _title;
	private String _fullOfficialName;
	private String _gender;
	private String _dateofBirth;
	private String _email;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private EnrollUploadedTempRecords _escapedModel;
}
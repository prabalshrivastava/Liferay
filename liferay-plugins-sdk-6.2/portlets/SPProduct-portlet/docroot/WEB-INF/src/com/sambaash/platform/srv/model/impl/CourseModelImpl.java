/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.model.Course;
import com.sambaash.platform.srv.model.CourseModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Course service. Represents a row in the &quot;SPCourse&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.model.CourseModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CourseImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see CourseImpl
 * @see com.sambaash.platform.srv.model.Course
 * @see com.sambaash.platform.srv.model.CourseModel
 * @generated
 */
public class CourseModelImpl extends BaseModelImpl<Course>
	implements CourseModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a course model instance should use the {@link com.sambaash.platform.srv.model.Course} interface instead.
	 */
	public static final String TABLE_NAME = "SPCourse";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spCourseId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "countryId", Types.VARCHAR },
			{ "courseCode", Types.VARCHAR },
			{ "courseName", Types.VARCHAR },
			{ "displayCourseName", Types.BOOLEAN },
			{ "courseDesc", Types.VARCHAR },
			{ "courseDurationFullTime", Types.VARCHAR },
			{ "learningDurationFullTime", Types.VARCHAR },
			{ "courseDurationPartTime", Types.VARCHAR },
			{ "learningDurationPartTime", Types.VARCHAR },
			{ "complexityLevel", Types.VARCHAR },
			{ "courseType", Types.BIGINT },
			{ "frameworkApprovalStatus", Types.BOOLEAN },
			{ "graduationCriteriaDesc", Types.VARCHAR },
			{ "fundingDescPre", Types.VARCHAR },
			{ "fundingDescPost", Types.VARCHAR },
			{ "feeDetailsDesc", Types.VARCHAR },
			{ "testLink", Types.VARCHAR },
			{ "courseOutcomeTitle", Types.VARCHAR },
			{ "courseOutcomeDesc", Types.VARCHAR },
			{ "personaDesc", Types.VARCHAR },
			{ "certificateTitle", Types.VARCHAR },
			{ "awardingBodyId", Types.BIGINT },
			{ "courseLevel", Types.BIGINT },
			{ "miscFeeDesc", Types.VARCHAR },
			{ "courseDeveloperId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPCourse (spCourseId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,countryId VARCHAR(75) null,courseCode VARCHAR(75) null,courseName VARCHAR(500) null,displayCourseName BOOLEAN,courseDesc LONGTEXT null,courseDurationFullTime VARCHAR(75) null,learningDurationFullTime VARCHAR(75) null,courseDurationPartTime VARCHAR(75) null,learningDurationPartTime VARCHAR(75) null,complexityLevel VARCHAR(75) null,courseType BIGINT(20),frameworkApprovalStatus BOOLEAN,graduationCriteriaDesc LONGTEXT null,fundingDescPre LONGTEXT null,fundingDescPost LONGTEXT null,feeDetailsDesc LONGTEXT null,testLink VARCHAR(500) null,courseOutcomeTitle LONGTEXT null,courseOutcomeDesc LONGTEXT null,personaDesc LONGTEXT null,certificateTitle LONGTEXT null,awardingBodyId BIGINT(20),courseLevel BIGINT(20),miscFeeDesc LONGTEXT null,courseDeveloperId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPCourse";
	public static final String ORDER_BY_JPQL = " ORDER BY course.courseName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPCourse.courseName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.model.Course"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.model.Course"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.model.Course"),
			true);
	public static long COUNTRYID_COLUMN_BITMASK = 1L;
	public static long COURSECODE_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long COURSENAME_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.model.Course"));

	public CourseModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spCourseId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpCourseId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spCourseId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Course.class;
	}

	@Override
	public String getModelClassName() {
		return Course.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spCourseId", getSpCourseId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("countryId", getCountryId());
		attributes.put("courseCode", getCourseCode());
		attributes.put("courseName", getCourseName());
		attributes.put("displayCourseName", getDisplayCourseName());
		attributes.put("courseDesc", getCourseDesc());
		attributes.put("courseDurationFullTime", getCourseDurationFullTime());
		attributes.put("learningDurationFullTime", getLearningDurationFullTime());
		attributes.put("courseDurationPartTime", getCourseDurationPartTime());
		attributes.put("learningDurationPartTime", getLearningDurationPartTime());
		attributes.put("complexityLevel", getComplexityLevel());
		attributes.put("courseType", getCourseType());
		attributes.put("frameworkApprovalStatus", getFrameworkApprovalStatus());
		attributes.put("graduationCriteriaDesc", getGraduationCriteriaDesc());
		attributes.put("fundingDescPre", getFundingDescPre());
		attributes.put("fundingDescPost", getFundingDescPost());
		attributes.put("feeDetailsDesc", getFeeDetailsDesc());
		attributes.put("testLink", getTestLink());
		attributes.put("courseOutcomeTitle", getCourseOutcomeTitle());
		attributes.put("courseOutcomeDesc", getCourseOutcomeDesc());
		attributes.put("personaDesc", getPersonaDesc());
		attributes.put("certificateTitle", getCertificateTitle());
		attributes.put("awardingBodyId", getAwardingBodyId());
		attributes.put("courseLevel", getCourseLevel());
		attributes.put("miscFeeDesc", getMiscFeeDesc());
		attributes.put("courseDeveloperId", getCourseDeveloperId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spCourseId = (Long)attributes.get("spCourseId");

		if (spCourseId != null) {
			setSpCourseId(spCourseId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String countryId = (String)attributes.get("countryId");

		if (countryId != null) {
			setCountryId(countryId);
		}

		String courseCode = (String)attributes.get("courseCode");

		if (courseCode != null) {
			setCourseCode(courseCode);
		}

		String courseName = (String)attributes.get("courseName");

		if (courseName != null) {
			setCourseName(courseName);
		}

		Boolean displayCourseName = (Boolean)attributes.get("displayCourseName");

		if (displayCourseName != null) {
			setDisplayCourseName(displayCourseName);
		}

		String courseDesc = (String)attributes.get("courseDesc");

		if (courseDesc != null) {
			setCourseDesc(courseDesc);
		}

		String courseDurationFullTime = (String)attributes.get(
				"courseDurationFullTime");

		if (courseDurationFullTime != null) {
			setCourseDurationFullTime(courseDurationFullTime);
		}

		String learningDurationFullTime = (String)attributes.get(
				"learningDurationFullTime");

		if (learningDurationFullTime != null) {
			setLearningDurationFullTime(learningDurationFullTime);
		}

		String courseDurationPartTime = (String)attributes.get(
				"courseDurationPartTime");

		if (courseDurationPartTime != null) {
			setCourseDurationPartTime(courseDurationPartTime);
		}

		String learningDurationPartTime = (String)attributes.get(
				"learningDurationPartTime");

		if (learningDurationPartTime != null) {
			setLearningDurationPartTime(learningDurationPartTime);
		}

		String complexityLevel = (String)attributes.get("complexityLevel");

		if (complexityLevel != null) {
			setComplexityLevel(complexityLevel);
		}

		Long courseType = (Long)attributes.get("courseType");

		if (courseType != null) {
			setCourseType(courseType);
		}

		Boolean frameworkApprovalStatus = (Boolean)attributes.get(
				"frameworkApprovalStatus");

		if (frameworkApprovalStatus != null) {
			setFrameworkApprovalStatus(frameworkApprovalStatus);
		}

		String graduationCriteriaDesc = (String)attributes.get(
				"graduationCriteriaDesc");

		if (graduationCriteriaDesc != null) {
			setGraduationCriteriaDesc(graduationCriteriaDesc);
		}

		String fundingDescPre = (String)attributes.get("fundingDescPre");

		if (fundingDescPre != null) {
			setFundingDescPre(fundingDescPre);
		}

		String fundingDescPost = (String)attributes.get("fundingDescPost");

		if (fundingDescPost != null) {
			setFundingDescPost(fundingDescPost);
		}

		String feeDetailsDesc = (String)attributes.get("feeDetailsDesc");

		if (feeDetailsDesc != null) {
			setFeeDetailsDesc(feeDetailsDesc);
		}

		String testLink = (String)attributes.get("testLink");

		if (testLink != null) {
			setTestLink(testLink);
		}

		String courseOutcomeTitle = (String)attributes.get("courseOutcomeTitle");

		if (courseOutcomeTitle != null) {
			setCourseOutcomeTitle(courseOutcomeTitle);
		}

		String courseOutcomeDesc = (String)attributes.get("courseOutcomeDesc");

		if (courseOutcomeDesc != null) {
			setCourseOutcomeDesc(courseOutcomeDesc);
		}

		String personaDesc = (String)attributes.get("personaDesc");

		if (personaDesc != null) {
			setPersonaDesc(personaDesc);
		}

		String certificateTitle = (String)attributes.get("certificateTitle");

		if (certificateTitle != null) {
			setCertificateTitle(certificateTitle);
		}

		Long awardingBodyId = (Long)attributes.get("awardingBodyId");

		if (awardingBodyId != null) {
			setAwardingBodyId(awardingBodyId);
		}

		Long courseLevel = (Long)attributes.get("courseLevel");

		if (courseLevel != null) {
			setCourseLevel(courseLevel);
		}

		String miscFeeDesc = (String)attributes.get("miscFeeDesc");

		if (miscFeeDesc != null) {
			setMiscFeeDesc(miscFeeDesc);
		}

		Long courseDeveloperId = (Long)attributes.get("courseDeveloperId");

		if (courseDeveloperId != null) {
			setCourseDeveloperId(courseDeveloperId);
		}
	}

	@Override
	public long getSpCourseId() {
		return _spCourseId;
	}

	@Override
	public void setSpCourseId(long spCourseId) {
		_spCourseId = spCourseId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getCountryId() {
		if (_countryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _countryId;
		}
	}

	@Override
	public void setCountryId(String countryId) {
		_columnBitmask |= COUNTRYID_COLUMN_BITMASK;

		if (_originalCountryId == null) {
			_originalCountryId = _countryId;
		}

		_countryId = countryId;
	}

	public String getOriginalCountryId() {
		return GetterUtil.getString(_originalCountryId);
	}

	@Override
	public String getCourseCode() {
		if (_courseCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _courseCode;
		}
	}

	@Override
	public void setCourseCode(String courseCode) {
		_columnBitmask |= COURSECODE_COLUMN_BITMASK;

		if (_originalCourseCode == null) {
			_originalCourseCode = _courseCode;
		}

		_courseCode = courseCode;
	}

	public String getOriginalCourseCode() {
		return GetterUtil.getString(_originalCourseCode);
	}

	@Override
	public String getCourseName() {
		if (_courseName == null) {
			return StringPool.BLANK;
		}
		else {
			return _courseName;
		}
	}

	@Override
	public void setCourseName(String courseName) {
		_columnBitmask = -1L;

		_courseName = courseName;
	}

	@Override
	public boolean getDisplayCourseName() {
		return _displayCourseName;
	}

	@Override
	public boolean isDisplayCourseName() {
		return _displayCourseName;
	}

	@Override
	public void setDisplayCourseName(boolean displayCourseName) {
		_displayCourseName = displayCourseName;
	}

	@Override
	public String getCourseDesc() {
		if (_courseDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _courseDesc;
		}
	}

	@Override
	public void setCourseDesc(String courseDesc) {
		_courseDesc = courseDesc;
	}

	@Override
	public String getCourseDurationFullTime() {
		if (_courseDurationFullTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _courseDurationFullTime;
		}
	}

	@Override
	public void setCourseDurationFullTime(String courseDurationFullTime) {
		_courseDurationFullTime = courseDurationFullTime;
	}

	@Override
	public String getLearningDurationFullTime() {
		if (_learningDurationFullTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _learningDurationFullTime;
		}
	}

	@Override
	public void setLearningDurationFullTime(String learningDurationFullTime) {
		_learningDurationFullTime = learningDurationFullTime;
	}

	@Override
	public String getCourseDurationPartTime() {
		if (_courseDurationPartTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _courseDurationPartTime;
		}
	}

	@Override
	public void setCourseDurationPartTime(String courseDurationPartTime) {
		_courseDurationPartTime = courseDurationPartTime;
	}

	@Override
	public String getLearningDurationPartTime() {
		if (_learningDurationPartTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _learningDurationPartTime;
		}
	}

	@Override
	public void setLearningDurationPartTime(String learningDurationPartTime) {
		_learningDurationPartTime = learningDurationPartTime;
	}

	@Override
	public String getComplexityLevel() {
		if (_complexityLevel == null) {
			return StringPool.BLANK;
		}
		else {
			return _complexityLevel;
		}
	}

	@Override
	public void setComplexityLevel(String complexityLevel) {
		_complexityLevel = complexityLevel;
	}

	@Override
	public long getCourseType() {
		return _courseType;
	}

	@Override
	public void setCourseType(long courseType) {
		_courseType = courseType;
	}

	@Override
	public boolean getFrameworkApprovalStatus() {
		return _frameworkApprovalStatus;
	}

	@Override
	public boolean isFrameworkApprovalStatus() {
		return _frameworkApprovalStatus;
	}

	@Override
	public void setFrameworkApprovalStatus(boolean frameworkApprovalStatus) {
		_frameworkApprovalStatus = frameworkApprovalStatus;
	}

	@Override
	public String getGraduationCriteriaDesc() {
		if (_graduationCriteriaDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _graduationCriteriaDesc;
		}
	}

	@Override
	public void setGraduationCriteriaDesc(String graduationCriteriaDesc) {
		_graduationCriteriaDesc = graduationCriteriaDesc;
	}

	@Override
	public String getFundingDescPre() {
		if (_fundingDescPre == null) {
			return StringPool.BLANK;
		}
		else {
			return _fundingDescPre;
		}
	}

	@Override
	public void setFundingDescPre(String fundingDescPre) {
		_fundingDescPre = fundingDescPre;
	}

	@Override
	public String getFundingDescPost() {
		if (_fundingDescPost == null) {
			return StringPool.BLANK;
		}
		else {
			return _fundingDescPost;
		}
	}

	@Override
	public void setFundingDescPost(String fundingDescPost) {
		_fundingDescPost = fundingDescPost;
	}

	@Override
	public String getFeeDetailsDesc() {
		if (_feeDetailsDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _feeDetailsDesc;
		}
	}

	@Override
	public void setFeeDetailsDesc(String feeDetailsDesc) {
		_feeDetailsDesc = feeDetailsDesc;
	}

	@Override
	public String getTestLink() {
		if (_testLink == null) {
			return StringPool.BLANK;
		}
		else {
			return _testLink;
		}
	}

	@Override
	public void setTestLink(String testLink) {
		_testLink = testLink;
	}

	@Override
	public String getCourseOutcomeTitle() {
		if (_courseOutcomeTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _courseOutcomeTitle;
		}
	}

	@Override
	public void setCourseOutcomeTitle(String courseOutcomeTitle) {
		_courseOutcomeTitle = courseOutcomeTitle;
	}

	@Override
	public String getCourseOutcomeDesc() {
		if (_courseOutcomeDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _courseOutcomeDesc;
		}
	}

	@Override
	public void setCourseOutcomeDesc(String courseOutcomeDesc) {
		_courseOutcomeDesc = courseOutcomeDesc;
	}

	@Override
	public String getPersonaDesc() {
		if (_personaDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _personaDesc;
		}
	}

	@Override
	public void setPersonaDesc(String personaDesc) {
		_personaDesc = personaDesc;
	}

	@Override
	public String getCertificateTitle() {
		if (_certificateTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _certificateTitle;
		}
	}

	@Override
	public void setCertificateTitle(String certificateTitle) {
		_certificateTitle = certificateTitle;
	}

	@Override
	public long getAwardingBodyId() {
		return _awardingBodyId;
	}

	@Override
	public void setAwardingBodyId(long awardingBodyId) {
		_awardingBodyId = awardingBodyId;
	}

	@Override
	public long getCourseLevel() {
		return _courseLevel;
	}

	@Override
	public void setCourseLevel(long courseLevel) {
		_courseLevel = courseLevel;
	}

	@Override
	public String getMiscFeeDesc() {
		if (_miscFeeDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _miscFeeDesc;
		}
	}

	@Override
	public void setMiscFeeDesc(String miscFeeDesc) {
		_miscFeeDesc = miscFeeDesc;
	}

	@Override
	public long getCourseDeveloperId() {
		return _courseDeveloperId;
	}

	@Override
	public void setCourseDeveloperId(long courseDeveloperId) {
		_courseDeveloperId = courseDeveloperId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Course.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Course toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Course)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CourseImpl courseImpl = new CourseImpl();

		courseImpl.setSpCourseId(getSpCourseId());
		courseImpl.setGroupId(getGroupId());
		courseImpl.setCompanyId(getCompanyId());
		courseImpl.setUserId(getUserId());
		courseImpl.setUserName(getUserName());
		courseImpl.setCreateDate(getCreateDate());
		courseImpl.setModifiedDate(getModifiedDate());
		courseImpl.setCountryId(getCountryId());
		courseImpl.setCourseCode(getCourseCode());
		courseImpl.setCourseName(getCourseName());
		courseImpl.setDisplayCourseName(getDisplayCourseName());
		courseImpl.setCourseDesc(getCourseDesc());
		courseImpl.setCourseDurationFullTime(getCourseDurationFullTime());
		courseImpl.setLearningDurationFullTime(getLearningDurationFullTime());
		courseImpl.setCourseDurationPartTime(getCourseDurationPartTime());
		courseImpl.setLearningDurationPartTime(getLearningDurationPartTime());
		courseImpl.setComplexityLevel(getComplexityLevel());
		courseImpl.setCourseType(getCourseType());
		courseImpl.setFrameworkApprovalStatus(getFrameworkApprovalStatus());
		courseImpl.setGraduationCriteriaDesc(getGraduationCriteriaDesc());
		courseImpl.setFundingDescPre(getFundingDescPre());
		courseImpl.setFundingDescPost(getFundingDescPost());
		courseImpl.setFeeDetailsDesc(getFeeDetailsDesc());
		courseImpl.setTestLink(getTestLink());
		courseImpl.setCourseOutcomeTitle(getCourseOutcomeTitle());
		courseImpl.setCourseOutcomeDesc(getCourseOutcomeDesc());
		courseImpl.setPersonaDesc(getPersonaDesc());
		courseImpl.setCertificateTitle(getCertificateTitle());
		courseImpl.setAwardingBodyId(getAwardingBodyId());
		courseImpl.setCourseLevel(getCourseLevel());
		courseImpl.setMiscFeeDesc(getMiscFeeDesc());
		courseImpl.setCourseDeveloperId(getCourseDeveloperId());

		courseImpl.resetOriginalValues();

		return courseImpl;
	}

	@Override
	public int compareTo(Course course) {
		int value = 0;

		value = getCourseName().compareTo(course.getCourseName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Course)) {
			return false;
		}

		Course course = (Course)obj;

		long primaryKey = course.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CourseModelImpl courseModelImpl = this;

		courseModelImpl._originalGroupId = courseModelImpl._groupId;

		courseModelImpl._setOriginalGroupId = false;

		courseModelImpl._originalCountryId = courseModelImpl._countryId;

		courseModelImpl._originalCourseCode = courseModelImpl._courseCode;

		courseModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Course> toCacheModel() {
		CourseCacheModel courseCacheModel = new CourseCacheModel();

		courseCacheModel.spCourseId = getSpCourseId();

		courseCacheModel.groupId = getGroupId();

		courseCacheModel.companyId = getCompanyId();

		courseCacheModel.userId = getUserId();

		courseCacheModel.userName = getUserName();

		String userName = courseCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			courseCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			courseCacheModel.createDate = createDate.getTime();
		}
		else {
			courseCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			courseCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			courseCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		courseCacheModel.countryId = getCountryId();

		String countryId = courseCacheModel.countryId;

		if ((countryId != null) && (countryId.length() == 0)) {
			courseCacheModel.countryId = null;
		}

		courseCacheModel.courseCode = getCourseCode();

		String courseCode = courseCacheModel.courseCode;

		if ((courseCode != null) && (courseCode.length() == 0)) {
			courseCacheModel.courseCode = null;
		}

		courseCacheModel.courseName = getCourseName();

		String courseName = courseCacheModel.courseName;

		if ((courseName != null) && (courseName.length() == 0)) {
			courseCacheModel.courseName = null;
		}

		courseCacheModel.displayCourseName = getDisplayCourseName();

		courseCacheModel.courseDesc = getCourseDesc();

		String courseDesc = courseCacheModel.courseDesc;

		if ((courseDesc != null) && (courseDesc.length() == 0)) {
			courseCacheModel.courseDesc = null;
		}

		courseCacheModel.courseDurationFullTime = getCourseDurationFullTime();

		String courseDurationFullTime = courseCacheModel.courseDurationFullTime;

		if ((courseDurationFullTime != null) &&
				(courseDurationFullTime.length() == 0)) {
			courseCacheModel.courseDurationFullTime = null;
		}

		courseCacheModel.learningDurationFullTime = getLearningDurationFullTime();

		String learningDurationFullTime = courseCacheModel.learningDurationFullTime;

		if ((learningDurationFullTime != null) &&
				(learningDurationFullTime.length() == 0)) {
			courseCacheModel.learningDurationFullTime = null;
		}

		courseCacheModel.courseDurationPartTime = getCourseDurationPartTime();

		String courseDurationPartTime = courseCacheModel.courseDurationPartTime;

		if ((courseDurationPartTime != null) &&
				(courseDurationPartTime.length() == 0)) {
			courseCacheModel.courseDurationPartTime = null;
		}

		courseCacheModel.learningDurationPartTime = getLearningDurationPartTime();

		String learningDurationPartTime = courseCacheModel.learningDurationPartTime;

		if ((learningDurationPartTime != null) &&
				(learningDurationPartTime.length() == 0)) {
			courseCacheModel.learningDurationPartTime = null;
		}

		courseCacheModel.complexityLevel = getComplexityLevel();

		String complexityLevel = courseCacheModel.complexityLevel;

		if ((complexityLevel != null) && (complexityLevel.length() == 0)) {
			courseCacheModel.complexityLevel = null;
		}

		courseCacheModel.courseType = getCourseType();

		courseCacheModel.frameworkApprovalStatus = getFrameworkApprovalStatus();

		courseCacheModel.graduationCriteriaDesc = getGraduationCriteriaDesc();

		String graduationCriteriaDesc = courseCacheModel.graduationCriteriaDesc;

		if ((graduationCriteriaDesc != null) &&
				(graduationCriteriaDesc.length() == 0)) {
			courseCacheModel.graduationCriteriaDesc = null;
		}

		courseCacheModel.fundingDescPre = getFundingDescPre();

		String fundingDescPre = courseCacheModel.fundingDescPre;

		if ((fundingDescPre != null) && (fundingDescPre.length() == 0)) {
			courseCacheModel.fundingDescPre = null;
		}

		courseCacheModel.fundingDescPost = getFundingDescPost();

		String fundingDescPost = courseCacheModel.fundingDescPost;

		if ((fundingDescPost != null) && (fundingDescPost.length() == 0)) {
			courseCacheModel.fundingDescPost = null;
		}

		courseCacheModel.feeDetailsDesc = getFeeDetailsDesc();

		String feeDetailsDesc = courseCacheModel.feeDetailsDesc;

		if ((feeDetailsDesc != null) && (feeDetailsDesc.length() == 0)) {
			courseCacheModel.feeDetailsDesc = null;
		}

		courseCacheModel.testLink = getTestLink();

		String testLink = courseCacheModel.testLink;

		if ((testLink != null) && (testLink.length() == 0)) {
			courseCacheModel.testLink = null;
		}

		courseCacheModel.courseOutcomeTitle = getCourseOutcomeTitle();

		String courseOutcomeTitle = courseCacheModel.courseOutcomeTitle;

		if ((courseOutcomeTitle != null) && (courseOutcomeTitle.length() == 0)) {
			courseCacheModel.courseOutcomeTitle = null;
		}

		courseCacheModel.courseOutcomeDesc = getCourseOutcomeDesc();

		String courseOutcomeDesc = courseCacheModel.courseOutcomeDesc;

		if ((courseOutcomeDesc != null) && (courseOutcomeDesc.length() == 0)) {
			courseCacheModel.courseOutcomeDesc = null;
		}

		courseCacheModel.personaDesc = getPersonaDesc();

		String personaDesc = courseCacheModel.personaDesc;

		if ((personaDesc != null) && (personaDesc.length() == 0)) {
			courseCacheModel.personaDesc = null;
		}

		courseCacheModel.certificateTitle = getCertificateTitle();

		String certificateTitle = courseCacheModel.certificateTitle;

		if ((certificateTitle != null) && (certificateTitle.length() == 0)) {
			courseCacheModel.certificateTitle = null;
		}

		courseCacheModel.awardingBodyId = getAwardingBodyId();

		courseCacheModel.courseLevel = getCourseLevel();

		courseCacheModel.miscFeeDesc = getMiscFeeDesc();

		String miscFeeDesc = courseCacheModel.miscFeeDesc;

		if ((miscFeeDesc != null) && (miscFeeDesc.length() == 0)) {
			courseCacheModel.miscFeeDesc = null;
		}

		courseCacheModel.courseDeveloperId = getCourseDeveloperId();

		return courseCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(65);

		sb.append("{spCourseId=");
		sb.append(getSpCourseId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", countryId=");
		sb.append(getCountryId());
		sb.append(", courseCode=");
		sb.append(getCourseCode());
		sb.append(", courseName=");
		sb.append(getCourseName());
		sb.append(", displayCourseName=");
		sb.append(getDisplayCourseName());
		sb.append(", courseDesc=");
		sb.append(getCourseDesc());
		sb.append(", courseDurationFullTime=");
		sb.append(getCourseDurationFullTime());
		sb.append(", learningDurationFullTime=");
		sb.append(getLearningDurationFullTime());
		sb.append(", courseDurationPartTime=");
		sb.append(getCourseDurationPartTime());
		sb.append(", learningDurationPartTime=");
		sb.append(getLearningDurationPartTime());
		sb.append(", complexityLevel=");
		sb.append(getComplexityLevel());
		sb.append(", courseType=");
		sb.append(getCourseType());
		sb.append(", frameworkApprovalStatus=");
		sb.append(getFrameworkApprovalStatus());
		sb.append(", graduationCriteriaDesc=");
		sb.append(getGraduationCriteriaDesc());
		sb.append(", fundingDescPre=");
		sb.append(getFundingDescPre());
		sb.append(", fundingDescPost=");
		sb.append(getFundingDescPost());
		sb.append(", feeDetailsDesc=");
		sb.append(getFeeDetailsDesc());
		sb.append(", testLink=");
		sb.append(getTestLink());
		sb.append(", courseOutcomeTitle=");
		sb.append(getCourseOutcomeTitle());
		sb.append(", courseOutcomeDesc=");
		sb.append(getCourseOutcomeDesc());
		sb.append(", personaDesc=");
		sb.append(getPersonaDesc());
		sb.append(", certificateTitle=");
		sb.append(getCertificateTitle());
		sb.append(", awardingBodyId=");
		sb.append(getAwardingBodyId());
		sb.append(", courseLevel=");
		sb.append(getCourseLevel());
		sb.append(", miscFeeDesc=");
		sb.append(getMiscFeeDesc());
		sb.append(", courseDeveloperId=");
		sb.append(getCourseDeveloperId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(100);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.model.Course");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spCourseId</column-name><column-value><![CDATA[");
		sb.append(getSpCourseId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryId</column-name><column-value><![CDATA[");
		sb.append(getCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseCode</column-name><column-value><![CDATA[");
		sb.append(getCourseCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseName</column-name><column-value><![CDATA[");
		sb.append(getCourseName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>displayCourseName</column-name><column-value><![CDATA[");
		sb.append(getDisplayCourseName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseDesc</column-name><column-value><![CDATA[");
		sb.append(getCourseDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseDurationFullTime</column-name><column-value><![CDATA[");
		sb.append(getCourseDurationFullTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>learningDurationFullTime</column-name><column-value><![CDATA[");
		sb.append(getLearningDurationFullTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseDurationPartTime</column-name><column-value><![CDATA[");
		sb.append(getCourseDurationPartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>learningDurationPartTime</column-name><column-value><![CDATA[");
		sb.append(getLearningDurationPartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complexityLevel</column-name><column-value><![CDATA[");
		sb.append(getComplexityLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseType</column-name><column-value><![CDATA[");
		sb.append(getCourseType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>frameworkApprovalStatus</column-name><column-value><![CDATA[");
		sb.append(getFrameworkApprovalStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>graduationCriteriaDesc</column-name><column-value><![CDATA[");
		sb.append(getGraduationCriteriaDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fundingDescPre</column-name><column-value><![CDATA[");
		sb.append(getFundingDescPre());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fundingDescPost</column-name><column-value><![CDATA[");
		sb.append(getFundingDescPost());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>feeDetailsDesc</column-name><column-value><![CDATA[");
		sb.append(getFeeDetailsDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>testLink</column-name><column-value><![CDATA[");
		sb.append(getTestLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseOutcomeTitle</column-name><column-value><![CDATA[");
		sb.append(getCourseOutcomeTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseOutcomeDesc</column-name><column-value><![CDATA[");
		sb.append(getCourseOutcomeDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personaDesc</column-name><column-value><![CDATA[");
		sb.append(getPersonaDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>certificateTitle</column-name><column-value><![CDATA[");
		sb.append(getCertificateTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>awardingBodyId</column-name><column-value><![CDATA[");
		sb.append(getAwardingBodyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseLevel</column-name><column-value><![CDATA[");
		sb.append(getCourseLevel());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>miscFeeDesc</column-name><column-value><![CDATA[");
		sb.append(getMiscFeeDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>courseDeveloperId</column-name><column-value><![CDATA[");
		sb.append(getCourseDeveloperId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Course.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Course.class };
	private long _spCourseId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _countryId;
	private String _originalCountryId;
	private String _courseCode;
	private String _originalCourseCode;
	private String _courseName;
	private boolean _displayCourseName;
	private String _courseDesc;
	private String _courseDurationFullTime;
	private String _learningDurationFullTime;
	private String _courseDurationPartTime;
	private String _learningDurationPartTime;
	private String _complexityLevel;
	private long _courseType;
	private boolean _frameworkApprovalStatus;
	private String _graduationCriteriaDesc;
	private String _fundingDescPre;
	private String _fundingDescPost;
	private String _feeDetailsDesc;
	private String _testLink;
	private String _courseOutcomeTitle;
	private String _courseOutcomeDesc;
	private String _personaDesc;
	private String _certificateTitle;
	private long _awardingBodyId;
	private long _courseLevel;
	private String _miscFeeDesc;
	private long _courseDeveloperId;
	private long _columnBitmask;
	private Course _escapedModel;
}
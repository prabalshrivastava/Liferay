@import "sp_custom_variables";


@mixin vendor-prefix($name, $argument) {
  -webkit-#{$name}: #{$argument};
  -ms-#{$name}: #{$argument};
  -moz-#{$name}: #{$argument};
  -o-#{$name}: #{$argument};
  #{$name}: #{$argument};
}


@mixin animate-cubic($time){
 	@include vendor-prefix(transition, all cubic-bezier(.06,.76,.25,.96) #{$time});
}

/** Button css **/

@mixin primary{
	  padding: 10px 15px;
	  background: $btn-primary-bg-color;
	  border: 1px solid $btn-primary-border-color;
	  color: $btn-primary-color;
	  text-decoration: none;
	  -webkit-border-radius: 3px;
	  -ms-border-radius: 3px;
	  -moz-border-radius: 3px;
	  -o-border-radius: 3px;
	  border-radius: 3px;
	  -webkit-transition: all cubic-bezier(0.06, 0.76, 0.25, 0.96) 0.4s;
	  -ms-transition: all cubic-bezier(0.06, 0.76, 0.25, 0.96) 0.4s;
	  -moz-transition: all cubic-bezier(0.06, 0.76, 0.25, 0.96) 0.4s;
	  -o-transition: all cubic-bezier(0.06, 0.76, 0.25, 0.96) 0.4s;
	  transition: all cubic-bezier(0.06, 0.76, 0.25, 0.96) 0.4s;
	  text-align: center;
	  font-size: 12pt;
	  font: $fontFamily;
	  text-shadow: none;
	  vertical-align: middle; 
}

@mixin primary-hover{
	background: $btn-primary-hover-bg-color;
    color: $btn-primary-hover-color;
    border: 1px solid $btn-primary-hover-border-color; 
}

@mixin primary-active{
	background: $btn-primary-bg-color;
    color: $btn-primary-color;
    border: 1px solid $btn-primary-border-color; 
}

//@include fontcolor-size(green, 12px);
@mixin fontcolor-size ($color, $size) {
    color: $color;
    font-size: $size;
}

//@include fontcolor-size(green, 12px);
@mixin fontsize-weight ( $size, $weight) {
    font-size: $size, ;
    font-weight: $weight;
}

//@include fontcolor-size-weight(green, 12px, 600);
@mixin fontcolor-size-weight ($color-1, $size-1, $weight-1) {
    color: $color-1;
    font-size: $size-1;
    font-weight: $weight-1;
}

//Linear Gradient
//Linear Gradient
@mixin linearGradient($top, $bottom) {
    background: $top;
    /* Old browsers */
    background: -moz-linear-gradient(top, $top 0%, $bottom 100%);
    /* FF3.6+ */
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%, $top), color-stop(100%, $bottom));
    /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(top, $top 0%, $bottom 100%);
    /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(top, $top 0%, $bottom 100%);
    /* Opera 11.10+ */
    background: -ms-linear-gradient(top, $top 0%, $bottom 100%);
    /* IE10+ */
    background: linear-gradient(to bottom, $top 0%, $bottom 100%);
    /* W3C */
    // filter: progid: DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000', GradientType=0);
    /* IE6-9 */
}

@mixin linearGradientLeft($right, $left) {
    background: $right;
    /* Old browsers */
    background: -moz-linear-gradient(right, $right 0%, $left 100%);
    /* FF3.6+ */
    background: -webkit-gradient(linear, left right, left left, color-stop(0%, $right), color-stop(100%, $left));
    /* Chrome,Safari4+ */
    background: -webkit-linear-gradient(right, $right 0%, $left 100%);
    /* Chrome10+,Safari5.1+ */
    background: -o-linear-gradient(right, $right 0%, $left 100%);
    /* Opera 11.10+ */
    background: -ms-linear-gradient(right, $right 0%, $left 100%);
    /* IE10+ */
    background: linear-gradient(to left, $right 0%, $left 100%);
    /* W3C */
    // filter: progid: DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000', GradientType=0);
    /* IE6-9 */
}

//@include radial-gradient(#555A5F, #000);
@mixin radial-gradient($from, $to) {
    background: -moz-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%, $from), color-stop(100%, $to));
    background: -webkit-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -o-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: -ms-radial-gradient(center, circle cover, $from 0%, $to 100%);
    background: radial-gradient(center, circle cover, $from 0%, $to 100%);
    background-color: $from;
}

@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}

//borders
@mixin border( $coordinates: 0 0 0 0, $colour: #000000, $style: solid) {
    $top: nth($coordinates, 1);
    $right: nth($coordinates, 2);
    $bottom: nth($coordinates, 3);
    $left: nth($coordinates, 4);
    @if not(unitless($top)) {
        border-top: $top $style $colour;
    }
    @if not(unitless($right)) {
        border-right: $right $style $colour;
    }
    @if not(unitless($bottom)) {
        border-bottom: $bottom $style $colour;
    }
    @if not(unitless($left)) {
        border-left: $left $style $colour;
    }
}

//@include box-sizing(border-box);
@mixin box-sizing($box-model) {
    -webkit-box-sizing: $box-model; // Safari <= 5
    -moz-box-sizing: $box-model; // Firefox <= 19
    box-sizing: $box-model;
}
//Button
@mixin button-bg($bg) {
    background: $bg;
    &:hover {
        background: darken($bg, 8%);
        transition: all 0.3s ease;
    }
    &:active {
        background: darken($bg, 25%);
    }
}

//template mixins
@mixin linx ($link, $visit, $hover, $active) {
    a {
        color: $link;
        &:visited {
            color: $visit;
        }
        &:hover {
            color: $hover;
        }
        &:active {
            color: $active;
        }
    }
}

//@include multiLineEllipsis($lineHeight: 1.2em, $lineCount: 3, $bgColor: white); 
@mixin multiLineEllipsis($lineHeight: 1.3em, $lineCount: 1, $bgColor: white) {
    overflow: hidden;
    position: relative;
    line-height: $lineHeight;
    max-height: $lineHeight * $lineCount;
    text-align: justify;
    margin-right: -1em;
    padding-right: 1em;
    &:before {
        content: '...';
        position: absolute;
        right: 0;
        bottom: 0;
    }
    &:after {
        content: '';
        position: absolute;
        right: 0;
        width: 1em;
        height: 1em;
        margin-top: 0.2em;
        background: $bgColor;
    }
}

@mixin full-image($image-url) {
    position: relative;
    display: inline-block;
    width: 100%;
    background: url($image-url) no-repeat center center fixed  !important;
    background-size: cover;
}

@mixin padding($padding) {
    padding: $padding;
}

@mixin margin($margin) {
    margin: $margin;
}
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    -ms-border-radius: $radius;
    border-radius: $radius;
}

//transitions
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
    -webkit-animation: #{$str};
    -moz-animation: #{$str};
    -ms-animation: #{$str};
    -o-animation: #{$str};
    animation: #{$str};
}

@mixin transition($args...) {
    -webkit-transition: $args;
    -moz-transition: $args;
    -ms-transition: $args;
    -o-transition: $args;
    transition: $args;
}

//FULL IMAGE
@mixin full-image($image-url) {
    position: relative;
    display: inline-block;
    width: 100%;
    background: url($image-url) no-repeat center center fixed;
    background-size: cover;
}

/* FONT MIXINS */
@function calculateRem($size) {
  $remSize: $size / 12pt;
  @return $remSize * 1rem;
}

@mixin font-size($size) {
  font-size: $size;
  font-size: calculateRem($size);
}

@mixin fontsize-weight ( $size, $weight) {
    font-size: $size, ;
    font-weight: $weight;
}

//@include fontcolor-size-weight(green, 12px, 600);
@mixin fontcolor-size-weight ($color-1, $size-1, $weight-1) {
    color: $color-1;
    font-size: $size-1;
    font-weight: $weight-1;
}

@mixin fontcolor-weight ($color, $weight-2) {
    color: $color;
    font-weight: $weight-2;
}


//ADDED BY KARTHIk
//@include opacity(0.8);
@mixin opacity($opacity) {
    opacity: $opacity;
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity=$opacity-ie); //IE8
}

// @include center-block;
@mixin center-block {
    display: $display-block;
    margin-left: auto;
    margin-right: auto;
}

//@include abs-pos(10px, 10px, 5px, 15px);
@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
    position: $position-absolute;
}

//@include rel-pos(10px, 10px, 5px, 15px);
@mixin rel-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
    position: $position-relative;
}

//LANDING PAGE
@mixin transition($transition...) {
    -moz-transition: $transition;
    -o-transition: $transition;
    -webkit-transition: $transition;
    transition: $transition;
}

@mixin transition-property($property...) {
    -moz-transition-property: $property;
    -o-transition-property: $property;
    -webkit-transition-property: $property;
    transition-property: $property;
}

@mixin transition-duration($duration...) {
    -moz-transition-property: $duration;
    -o-transition-property: $duration;
    -webkit-transition-property: $duration;
    transition-property: $duration;
}

@mixin transition-timing-function($timing...) {
    -moz-transition-timing-function: $timing;
    -o-transition-timing-function: $timing;
    -webkit-transition-timing-function: $timing;
    transition-timing-function: $timing;
}

@mixin transition-delay($delay...) {
    -moz-transition-delay: $delay;
    -o-transition-delay: $delay;
    -webkit-transition-delay: $delay;
    transition-delay: $delay;
}

//FLEX BOX
@mixin flexbox {
    display: -webkit-box;
    display: -webkit-flex;
    display: -moz-flex;
    display: -ms-flexbox;
    display: flex;
}

@mixin inline-flex {
    display: -webkit-inline-box;
    display: -webkit-inline-flex;
    display: -moz-inline-flex;
    display: -ms-inline-flexbox;
    display: inline-flex;
}

// Flexbox Direction
@mixin flex-direction($value: row) {
    @if $value==row-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: horizontal;
    }
    @else if $value==column {
        -webkit-box-direction: normal;
        -webkit-box-orient: vertical;
    }
    @else if $value==column-reverse {
        -webkit-box-direction: reverse;
        -webkit-box-orient: vertical;
    }
    @else {
        -webkit-box-direction: normal;
        -webkit-box-orient: horizontal;
    }
    -webkit-flex-direction: $value;
    -moz-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
}

// Shorter version:
@mixin flex-dir($args...) {
    @include flex-direction($args...);
}

//----------------------------------------------------------------------
// Flexbox Wrap
@mixin flex-wrap($value: nowrap) {
    // No Webkit Box fallback.
    -webkit-flex-wrap: $value;
    -moz-flex-wrap: $value;
    @if $value==nowrap {
        -ms-flex-wrap: none;
    }
    @else {
        -ms-flex-wrap: $value;
    }
    flex-wrap: $value;
}

//----------------------------------------------------------------------
// Flexbox Flow (shorthand)
@mixin flex-flow($values: (row nowrap)) {
    // No Webkit Box fallback.
    -webkit-flex-flow: $values;
    -moz-flex-flow: $values;
    -ms-flex-flow: $values;
    flex-flow: $values;
}

//----------------------------------------------------------------------
// Flexbox Order
@mixin order($int: 0) {
    -webkit-box-ordinal-group: $int + 1;
    -webkit-order: $int;
    -moz-order: $int;
    -ms-flex-order: $int;
    order: $int;
}

//----------------------------------------------------------------------
// Flexbox Grow
@mixin flex-grow($int: 0) {
    -webkit-box-flex: $int;
    -webkit-flex-grow: $int;
    -moz-flex-grow: $int;
    -ms-flex-positive: $int;
    flex-grow: $int;
}

//----------------------------------------------------------------------
// Flexbox Shrink
@mixin flex-shrink($int: 1) {
    -webkit-flex-shrink: $int;
    -moz-flex-shrink: $int;
    -ms-flex-negative: $int;
    flex-shrink: $int;
}

//----------------------------------------------------------------------
// Flexbox Basis
@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    -moz-flex-basis: $value;
    -ms-flex-preferred-size: $value;
    flex-basis: $value;
}

//----------------------------------------------------------------------
// Flexbox "Flex" (shorthand)
@mixin flex($fg: 1, $fs: null, $fb: null) {
    // Set a variable to be used by box-flex properties
    $fg-boxflex: $fg;
    // Box-Flex only supports a flex-grow value so let's grab the
    // first item in the list and just return that.
    @if type-of($fg)=='list' {
        $fg-boxflex: nth($fg, 1);
    }
    -webkit-box-flex: $fg-boxflex;
    -webkit-flex: $fg $fs $fb;
    -moz-box-flex: $fg-boxflex;
    -moz-flex: $fg $fs $fb;
    -ms-flex: $fg $fs $fb;
    flex: $fg $fs $fb;
}

//----------------------------------------------------------------------
// Flexbox Justify Content
@mixin justify-content($value: flex-start) {
    @if $value==flex-start {
        -webkit-box-pack: start;
        -ms-flex-pack: start;
    }
    @else if $value==flex-end {
        -webkit-box-pack: end;
        -ms-flex-pack: end;
    }
    @else if $value==space-between {
        -webkit-box-pack: justify;
        -ms-flex-pack: justify;
    }
    @else if $value==space-around {
        -ms-flex-pack: distribute;
    }
    @else {
        -webkit-box-pack: $value;
        -ms-flex-pack: $value;
    }
    -webkit-justify-content: $value;
    -moz-justify-content: $value;
    justify-content: $value;
}

// Shorter version:
@mixin flex-just($args...) {
    @include justify-content($args...);
}

//----------------------------------------------------------------------
// Flexbox Align Items
@mixin align-items($value: stretch) {
    @if $value==flex-start {
        -webkit-box-align: start;
        -ms-flex-align: start;
    }
    @else if $value==flex-end {
        -webkit-box-align: end;
        -ms-flex-align: end;
    }
    @else {
        -webkit-box-align: $value;
        -ms-flex-align: $value;
    }
    -webkit-align-items: $value;
    -moz-align-items: $value;
    align-items: $value;
}

//----------------------------------
// Flexbox Align Self
@mixin align-self($value: auto) {
    // No Webkit Box Fallback.
    -webkit-align-self: $value;
    -moz-align-self: $value;
    @if $value==flex-start {
        -ms-flex-item-align: start;
    }
    @else if $value==flex-end {
        -ms-flex-item-align: end;
    }
    @else {
        -ms-flex-item-align: $value;
    }
    align-self: $value;
}

//----------------------------------------------------------------------
// Flexbox Align Content
// Values: flex-start | flex-end | center | space-between | space-around | stretch
// Default: stretch
@mixin align-content($value: stretch) {
    // No Webkit Box Fallback.
    -webkit-align-content: $value;
    -moz-align-content: $value;
    @if $value==flex-start {
        -ms-flex-line-pack: start;
    }
    @else if $value==flex-end {
        -ms-flex-line-pack: end;
    }
    @else {
        -ms-flex-line-pack: $value;
    }
    align-content: $value;
}


//NAVIGATION

/*********************

RESPONSIVE BREAKPOINT
**********************/

@mixin breakpoint($point) {
    @if $point==1024 {
        @media (max-width: 1024px) {
            @content;
        }
    }
    @else if $point==another-break-point {
        @media (max-width: 0) {
            @content;
        }
    }
}

//TRANSFORM
@mixin transform-style($style) {
    transform-style: $style;
    -moz-transform-style: $style;
    -o-transform-style: $style;
    -ms-transform-style: $style;
    -webkit-transform-style: $style;
}

//TRANSITIONS
@mixin transition($transition...) {
    -moz-transition: $transition;
    -o-transition: $transition;
    -webkit-transition: $transition;
    transition: $transition;
}

@mixin transition-property($property...) {
    -moz-transition-property: $property;
    -o-transition-property: $property;
    -webkit-transition-property: $property;
    transition-property: $property;
}

@mixin transition-duration($duration...) {
    -moz-transition-property: $duration;
    -o-transition-property: $duration;
    -webkit-transition-property: $duration;
    transition-property: $duration;
}

@mixin transition-timing-function($timing...) {
    -moz-transition-timing-function: $timing;
    -o-transition-timing-function: $timing;
    -webkit-transition-timing-function: $timing;
    transition-timing-function: $timing;
}

@mixin transition-delay($delay...) {
    -moz-transition-delay: $delay;
    -o-transition-delay: $delay;
    -webkit-transition-delay: $delay;
    transition-delay: $delay;
}

//TRANSFORM
// generic transform
@mixin transform($transforms) {
    -moz-transform: $transforms;
    -o-transform: $transforms;
    -ms-transform: $transforms;
    -webkit-transform: $transforms;
    transform: $transforms;
}

// rotate
@mixin rotate ($deg) {
    @include transform(rotate(#{$deg}deg));
}

// scale
@mixin scale($scale) {
    @include transform(scale($scale));
}

// translate
@mixin translate ($x, $y) {
    @include transform(translate($x, $y));
}

// skew
@mixin skew ($x, $y) {
    @include transform(skew(#{$x}deg, #{$y}deg));
}

//transform origin
@mixin transform-origin ($origin) {
    moz-transform-origin: $origin;
    -o-transform-origin: $origin;
    -ms-transform-origin: $origin;
    -webkit-transform-origin: $origin;
    transform-origin: $origin;
}

@mixin centerer {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}



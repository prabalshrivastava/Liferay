/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.sppayment.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.sambaash.platform.srv.sppayment.model.SPPaymentCustomer;
import com.sambaash.platform.srv.sppayment.service.SPPaymentCustomerLocalService;
import com.sambaash.platform.srv.sppayment.service.persistence.SPPaymentCustomerPersistence;
import com.sambaash.platform.srv.sppayment.service.persistence.SPPurchasePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the s p payment customer local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.sambaash.platform.srv.sppayment.service.impl.SPPaymentCustomerLocalServiceImpl}.
 * </p>
 *
 * @author pradeep
 * @see com.sambaash.platform.srv.sppayment.service.impl.SPPaymentCustomerLocalServiceImpl
 * @see com.sambaash.platform.srv.sppayment.service.SPPaymentCustomerLocalServiceUtil
 * @generated
 */
public abstract class SPPaymentCustomerLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements SPPaymentCustomerLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.sambaash.platform.srv.sppayment.service.SPPaymentCustomerLocalServiceUtil} to access the s p payment customer local service.
	 */

	/**
	 * Adds the s p payment customer to the database. Also notifies the appropriate model listeners.
	 *
	 * @param spPaymentCustomer the s p payment customer
	 * @return the s p payment customer that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SPPaymentCustomer addSPPaymentCustomer(
		SPPaymentCustomer spPaymentCustomer) throws SystemException {
		spPaymentCustomer.setNew(true);

		return spPaymentCustomerPersistence.update(spPaymentCustomer);
	}

	/**
	 * Creates a new s p payment customer with the primary key. Does not add the s p payment customer to the database.
	 *
	 * @param sPPaymentCustomerId the primary key for the new s p payment customer
	 * @return the new s p payment customer
	 */
	@Override
	public SPPaymentCustomer createSPPaymentCustomer(long sPPaymentCustomerId) {
		return spPaymentCustomerPersistence.create(sPPaymentCustomerId);
	}

	/**
	 * Deletes the s p payment customer with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param sPPaymentCustomerId the primary key of the s p payment customer
	 * @return the s p payment customer that was removed
	 * @throws PortalException if a s p payment customer with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SPPaymentCustomer deleteSPPaymentCustomer(long sPPaymentCustomerId)
		throws PortalException, SystemException {
		return spPaymentCustomerPersistence.remove(sPPaymentCustomerId);
	}

	/**
	 * Deletes the s p payment customer from the database. Also notifies the appropriate model listeners.
	 *
	 * @param spPaymentCustomer the s p payment customer
	 * @return the s p payment customer that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public SPPaymentCustomer deleteSPPaymentCustomer(
		SPPaymentCustomer spPaymentCustomer) throws SystemException {
		return spPaymentCustomerPersistence.remove(spPaymentCustomer);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(SPPaymentCustomer.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return spPaymentCustomerPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sambaash.platform.srv.sppayment.model.impl.SPPaymentCustomerModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return spPaymentCustomerPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sambaash.platform.srv.sppayment.model.impl.SPPaymentCustomerModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return spPaymentCustomerPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return spPaymentCustomerPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return spPaymentCustomerPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public SPPaymentCustomer fetchSPPaymentCustomer(long sPPaymentCustomerId)
		throws SystemException {
		return spPaymentCustomerPersistence.fetchByPrimaryKey(sPPaymentCustomerId);
	}

	/**
	 * Returns the s p payment customer with the primary key.
	 *
	 * @param sPPaymentCustomerId the primary key of the s p payment customer
	 * @return the s p payment customer
	 * @throws PortalException if a s p payment customer with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public SPPaymentCustomer getSPPaymentCustomer(long sPPaymentCustomerId)
		throws PortalException, SystemException {
		return spPaymentCustomerPersistence.findByPrimaryKey(sPPaymentCustomerId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return spPaymentCustomerPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the s p payment customers.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sambaash.platform.srv.sppayment.model.impl.SPPaymentCustomerModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of s p payment customers
	 * @param end the upper bound of the range of s p payment customers (not inclusive)
	 * @return the range of s p payment customers
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<SPPaymentCustomer> getSPPaymentCustomers(int start, int end)
		throws SystemException {
		return spPaymentCustomerPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of s p payment customers.
	 *
	 * @return the number of s p payment customers
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getSPPaymentCustomersCount() throws SystemException {
		return spPaymentCustomerPersistence.countAll();
	}

	/**
	 * Updates the s p payment customer in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param spPaymentCustomer the s p payment customer
	 * @return the s p payment customer that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public SPPaymentCustomer updateSPPaymentCustomer(
		SPPaymentCustomer spPaymentCustomer) throws SystemException {
		return spPaymentCustomerPersistence.update(spPaymentCustomer);
	}

	/**
	 * Returns the s p payment local service.
	 *
	 * @return the s p payment local service
	 */
	public com.sambaash.platform.srv.sppayment.service.SPPaymentLocalService getSPPaymentLocalService() {
		return spPaymentLocalService;
	}

	/**
	 * Sets the s p payment local service.
	 *
	 * @param spPaymentLocalService the s p payment local service
	 */
	public void setSPPaymentLocalService(
		com.sambaash.platform.srv.sppayment.service.SPPaymentLocalService spPaymentLocalService) {
		this.spPaymentLocalService = spPaymentLocalService;
	}

	/**
	 * Returns the s p payment customer local service.
	 *
	 * @return the s p payment customer local service
	 */
	public com.sambaash.platform.srv.sppayment.service.SPPaymentCustomerLocalService getSPPaymentCustomerLocalService() {
		return spPaymentCustomerLocalService;
	}

	/**
	 * Sets the s p payment customer local service.
	 *
	 * @param spPaymentCustomerLocalService the s p payment customer local service
	 */
	public void setSPPaymentCustomerLocalService(
		com.sambaash.platform.srv.sppayment.service.SPPaymentCustomerLocalService spPaymentCustomerLocalService) {
		this.spPaymentCustomerLocalService = spPaymentCustomerLocalService;
	}

	/**
	 * Returns the s p payment customer persistence.
	 *
	 * @return the s p payment customer persistence
	 */
	public SPPaymentCustomerPersistence getSPPaymentCustomerPersistence() {
		return spPaymentCustomerPersistence;
	}

	/**
	 * Sets the s p payment customer persistence.
	 *
	 * @param spPaymentCustomerPersistence the s p payment customer persistence
	 */
	public void setSPPaymentCustomerPersistence(
		SPPaymentCustomerPersistence spPaymentCustomerPersistence) {
		this.spPaymentCustomerPersistence = spPaymentCustomerPersistence;
	}

	/**
	 * Returns the s p purchase local service.
	 *
	 * @return the s p purchase local service
	 */
	public com.sambaash.platform.srv.sppayment.service.SPPurchaseLocalService getSPPurchaseLocalService() {
		return spPurchaseLocalService;
	}

	/**
	 * Sets the s p purchase local service.
	 *
	 * @param spPurchaseLocalService the s p purchase local service
	 */
	public void setSPPurchaseLocalService(
		com.sambaash.platform.srv.sppayment.service.SPPurchaseLocalService spPurchaseLocalService) {
		this.spPurchaseLocalService = spPurchaseLocalService;
	}

	/**
	 * Returns the s p purchase persistence.
	 *
	 * @return the s p purchase persistence
	 */
	public SPPurchasePersistence getSPPurchasePersistence() {
		return spPurchasePersistence;
	}

	/**
	 * Sets the s p purchase persistence.
	 *
	 * @param spPurchasePersistence the s p purchase persistence
	 */
	public void setSPPurchasePersistence(
		SPPurchasePersistence spPurchasePersistence) {
		this.spPurchasePersistence = spPurchasePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.sambaash.platform.srv.sppayment.model.SPPaymentCustomer",
			spPaymentCustomerLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.sambaash.platform.srv.sppayment.model.SPPaymentCustomer");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return SPPaymentCustomer.class;
	}

	protected String getModelClassName() {
		return SPPaymentCustomer.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = spPaymentCustomerPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.sambaash.platform.srv.sppayment.service.SPPaymentLocalService.class)
	protected com.sambaash.platform.srv.sppayment.service.SPPaymentLocalService spPaymentLocalService;
	@BeanReference(type = com.sambaash.platform.srv.sppayment.service.SPPaymentCustomerLocalService.class)
	protected com.sambaash.platform.srv.sppayment.service.SPPaymentCustomerLocalService spPaymentCustomerLocalService;
	@BeanReference(type = SPPaymentCustomerPersistence.class)
	protected SPPaymentCustomerPersistence spPaymentCustomerPersistence;
	@BeanReference(type = com.sambaash.platform.srv.sppayment.service.SPPurchaseLocalService.class)
	protected com.sambaash.platform.srv.sppayment.service.SPPurchaseLocalService spPurchaseLocalService;
	@BeanReference(type = SPPurchasePersistence.class)
	protected SPPurchasePersistence spPurchasePersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private SPPaymentCustomerLocalServiceClpInvoker _clpInvoker = new SPPaymentCustomerLocalServiceClpInvoker();
}
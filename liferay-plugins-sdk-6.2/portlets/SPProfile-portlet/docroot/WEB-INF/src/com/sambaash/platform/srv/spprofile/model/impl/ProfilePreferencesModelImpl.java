/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spprofile.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spprofile.model.ProfilePreferences;
import com.sambaash.platform.srv.spprofile.model.ProfilePreferencesModel;
import com.sambaash.platform.srv.spprofile.model.ProfilePreferencesSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProfilePreferences service. Represents a row in the &quot;SPProfilePreferences&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spprofile.model.ProfilePreferencesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProfilePreferencesImpl}.
 * </p>
 *
 * @author harini
 * @see ProfilePreferencesImpl
 * @see com.sambaash.platform.srv.spprofile.model.ProfilePreferences
 * @see com.sambaash.platform.srv.spprofile.model.ProfilePreferencesModel
 * @generated
 */
@JSON(strict = true)
public class ProfilePreferencesModelImpl extends BaseModelImpl<ProfilePreferences>
	implements ProfilePreferencesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a profile preferences model instance should use the {@link com.sambaash.platform.srv.spprofile.model.ProfilePreferences} interface instead.
	 */
	public static final String TABLE_NAME = "SPProfilePreferences";
	public static final Object[][] TABLE_COLUMNS = {
			{ "proferenceId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "layoutId", Types.VARCHAR },
			{ "portletId", Types.VARCHAR },
			{ "preferenceName", Types.VARCHAR },
			{ "portletPreferences", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SPProfilePreferences (proferenceId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,layoutId VARCHAR(75) null,portletId VARCHAR(75) null,preferenceName VARCHAR(75) null,portletPreferences VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SPProfilePreferences";
	public static final String ORDER_BY_JPQL = " ORDER BY profilePreferences.proferenceId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPProfilePreferences.proferenceId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spprofile.model.ProfilePreferences"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spprofile.model.ProfilePreferences"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spprofile.model.ProfilePreferences"),
			true);
	public static long LAYOUTID_COLUMN_BITMASK = 1L;
	public static long PORTLETID_COLUMN_BITMASK = 2L;
	public static long PREFERENCENAME_COLUMN_BITMASK = 4L;
	public static long PROFERENCEID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProfilePreferences toModel(ProfilePreferencesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProfilePreferences model = new ProfilePreferencesImpl();

		model.setProferenceId(soapModel.getProferenceId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLayoutId(soapModel.getLayoutId());
		model.setPortletId(soapModel.getPortletId());
		model.setPreferenceName(soapModel.getPreferenceName());
		model.setPortletPreferences(soapModel.getPortletPreferences());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProfilePreferences> toModels(
		ProfilePreferencesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProfilePreferences> models = new ArrayList<ProfilePreferences>(soapModels.length);

		for (ProfilePreferencesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spprofile.model.ProfilePreferences"));

	public ProfilePreferencesModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _proferenceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProferenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _proferenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProfilePreferences.class;
	}

	@Override
	public String getModelClassName() {
		return ProfilePreferences.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("proferenceId", getProferenceId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("layoutId", getLayoutId());
		attributes.put("portletId", getPortletId());
		attributes.put("preferenceName", getPreferenceName());
		attributes.put("portletPreferences", getPortletPreferences());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long proferenceId = (Long)attributes.get("proferenceId");

		if (proferenceId != null) {
			setProferenceId(proferenceId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String layoutId = (String)attributes.get("layoutId");

		if (layoutId != null) {
			setLayoutId(layoutId);
		}

		String portletId = (String)attributes.get("portletId");

		if (portletId != null) {
			setPortletId(portletId);
		}

		String preferenceName = (String)attributes.get("preferenceName");

		if (preferenceName != null) {
			setPreferenceName(preferenceName);
		}

		String portletPreferences = (String)attributes.get("portletPreferences");

		if (portletPreferences != null) {
			setPortletPreferences(portletPreferences);
		}
	}

	@JSON
	@Override
	public long getProferenceId() {
		return _proferenceId;
	}

	@Override
	public void setProferenceId(long proferenceId) {
		_proferenceId = proferenceId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getLayoutId() {
		if (_layoutId == null) {
			return StringPool.BLANK;
		}
		else {
			return _layoutId;
		}
	}

	@Override
	public void setLayoutId(String layoutId) {
		_columnBitmask |= LAYOUTID_COLUMN_BITMASK;

		if (_originalLayoutId == null) {
			_originalLayoutId = _layoutId;
		}

		_layoutId = layoutId;
	}

	public String getOriginalLayoutId() {
		return GetterUtil.getString(_originalLayoutId);
	}

	@JSON
	@Override
	public String getPortletId() {
		if (_portletId == null) {
			return StringPool.BLANK;
		}
		else {
			return _portletId;
		}
	}

	@Override
	public void setPortletId(String portletId) {
		_columnBitmask |= PORTLETID_COLUMN_BITMASK;

		if (_originalPortletId == null) {
			_originalPortletId = _portletId;
		}

		_portletId = portletId;
	}

	public String getOriginalPortletId() {
		return GetterUtil.getString(_originalPortletId);
	}

	@JSON
	@Override
	public String getPreferenceName() {
		if (_preferenceName == null) {
			return StringPool.BLANK;
		}
		else {
			return _preferenceName;
		}
	}

	@Override
	public void setPreferenceName(String preferenceName) {
		_columnBitmask |= PREFERENCENAME_COLUMN_BITMASK;

		if (_originalPreferenceName == null) {
			_originalPreferenceName = _preferenceName;
		}

		_preferenceName = preferenceName;
	}

	public String getOriginalPreferenceName() {
		return GetterUtil.getString(_originalPreferenceName);
	}

	@JSON
	@Override
	public String getPortletPreferences() {
		if (_portletPreferences == null) {
			return StringPool.BLANK;
		}
		else {
			return _portletPreferences;
		}
	}

	@Override
	public void setPortletPreferences(String portletPreferences) {
		_portletPreferences = portletPreferences;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ProfilePreferences.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProfilePreferences toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProfilePreferences)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProfilePreferencesImpl profilePreferencesImpl = new ProfilePreferencesImpl();

		profilePreferencesImpl.setProferenceId(getProferenceId());
		profilePreferencesImpl.setGroupId(getGroupId());
		profilePreferencesImpl.setCompanyId(getCompanyId());
		profilePreferencesImpl.setUserId(getUserId());
		profilePreferencesImpl.setUserName(getUserName());
		profilePreferencesImpl.setCreateDate(getCreateDate());
		profilePreferencesImpl.setModifiedDate(getModifiedDate());
		profilePreferencesImpl.setLayoutId(getLayoutId());
		profilePreferencesImpl.setPortletId(getPortletId());
		profilePreferencesImpl.setPreferenceName(getPreferenceName());
		profilePreferencesImpl.setPortletPreferences(getPortletPreferences());

		profilePreferencesImpl.resetOriginalValues();

		return profilePreferencesImpl;
	}

	@Override
	public int compareTo(ProfilePreferences profilePreferences) {
		long primaryKey = profilePreferences.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProfilePreferences)) {
			return false;
		}

		ProfilePreferences profilePreferences = (ProfilePreferences)obj;

		long primaryKey = profilePreferences.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProfilePreferencesModelImpl profilePreferencesModelImpl = this;

		profilePreferencesModelImpl._originalLayoutId = profilePreferencesModelImpl._layoutId;

		profilePreferencesModelImpl._originalPortletId = profilePreferencesModelImpl._portletId;

		profilePreferencesModelImpl._originalPreferenceName = profilePreferencesModelImpl._preferenceName;

		profilePreferencesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProfilePreferences> toCacheModel() {
		ProfilePreferencesCacheModel profilePreferencesCacheModel = new ProfilePreferencesCacheModel();

		profilePreferencesCacheModel.proferenceId = getProferenceId();

		profilePreferencesCacheModel.groupId = getGroupId();

		profilePreferencesCacheModel.companyId = getCompanyId();

		profilePreferencesCacheModel.userId = getUserId();

		profilePreferencesCacheModel.userName = getUserName();

		String userName = profilePreferencesCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			profilePreferencesCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			profilePreferencesCacheModel.createDate = createDate.getTime();
		}
		else {
			profilePreferencesCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			profilePreferencesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			profilePreferencesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		profilePreferencesCacheModel.layoutId = getLayoutId();

		String layoutId = profilePreferencesCacheModel.layoutId;

		if ((layoutId != null) && (layoutId.length() == 0)) {
			profilePreferencesCacheModel.layoutId = null;
		}

		profilePreferencesCacheModel.portletId = getPortletId();

		String portletId = profilePreferencesCacheModel.portletId;

		if ((portletId != null) && (portletId.length() == 0)) {
			profilePreferencesCacheModel.portletId = null;
		}

		profilePreferencesCacheModel.preferenceName = getPreferenceName();

		String preferenceName = profilePreferencesCacheModel.preferenceName;

		if ((preferenceName != null) && (preferenceName.length() == 0)) {
			profilePreferencesCacheModel.preferenceName = null;
		}

		profilePreferencesCacheModel.portletPreferences = getPortletPreferences();

		String portletPreferences = profilePreferencesCacheModel.portletPreferences;

		if ((portletPreferences != null) && (portletPreferences.length() == 0)) {
			profilePreferencesCacheModel.portletPreferences = null;
		}

		return profilePreferencesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{proferenceId=");
		sb.append(getProferenceId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", layoutId=");
		sb.append(getLayoutId());
		sb.append(", portletId=");
		sb.append(getPortletId());
		sb.append(", preferenceName=");
		sb.append(getPreferenceName());
		sb.append(", portletPreferences=");
		sb.append(getPortletPreferences());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append(
			"com.sambaash.platform.srv.spprofile.model.ProfilePreferences");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>proferenceId</column-name><column-value><![CDATA[");
		sb.append(getProferenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>layoutId</column-name><column-value><![CDATA[");
		sb.append(getLayoutId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portletId</column-name><column-value><![CDATA[");
		sb.append(getPortletId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preferenceName</column-name><column-value><![CDATA[");
		sb.append(getPreferenceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portletPreferences</column-name><column-value><![CDATA[");
		sb.append(getPortletPreferences());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ProfilePreferences.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ProfilePreferences.class
		};
	private long _proferenceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _layoutId;
	private String _originalLayoutId;
	private String _portletId;
	private String _originalPortletId;
	private String _preferenceName;
	private String _originalPreferenceName;
	private String _portletPreferences;
	private long _columnBitmask;
	private ProfilePreferences _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spservices.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spservices.model.SPUserTypeConfig;
import com.sambaash.platform.srv.spservices.model.SPUserTypeConfigModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPUserTypeConfig service. Represents a row in the &quot;SPUserConfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spservices.model.SPUserTypeConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPUserTypeConfigImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see SPUserTypeConfigImpl
 * @see com.sambaash.platform.srv.spservices.model.SPUserTypeConfig
 * @see com.sambaash.platform.srv.spservices.model.SPUserTypeConfigModel
 * @generated
 */
public class SPUserTypeConfigModelImpl extends BaseModelImpl<SPUserTypeConfig>
	implements SPUserTypeConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p user type config model instance should use the {@link com.sambaash.platform.srv.spservices.model.SPUserTypeConfig} interface instead.
	 */
	public static final String TABLE_NAME = "SPUserConfig";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spUserTypeConfigId", Types.BIGINT },
			{ "userType", Types.VARCHAR },
			{ "userTypeId", Types.BIGINT },
			{ "virtualHostId", Types.BIGINT },
			{ "declarationId", Types.BIGINT },
			{ "declarationYearly", Types.BOOLEAN },
			{ "declarationFixedDate", Types.TIMESTAMP },
			{ "pdpaId", Types.BIGINT },
			{ "accountCreationTemplateName", Types.VARCHAR },
			{ "welcomeTemplateName", Types.VARCHAR },
			{ "passwordChangeTemplateName", Types.VARCHAR },
			{ "passwordResetTemplateName", Types.VARCHAR },
			{ "emailVerificationTemplateName", Types.VARCHAR },
			{ "defauleRoleIds", Types.VARCHAR },
			{ "validations", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createdBy", Types.BIGINT },
			{ "modifiedBy", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table SPUserConfig (uuid_ VARCHAR(75) null,spUserTypeConfigId BIGINT(20) not null primary key,userType VARCHAR(75) null,userTypeId BIGINT(20),virtualHostId BIGINT(20),declarationId BIGINT(20),declarationYearly BOOLEAN,declarationFixedDate DATETIME null,pdpaId BIGINT(20),accountCreationTemplateName VARCHAR(75) null,welcomeTemplateName VARCHAR(75) null,passwordChangeTemplateName VARCHAR(75) null,passwordResetTemplateName VARCHAR(75) null,emailVerificationTemplateName VARCHAR(75) null,defauleRoleIds VARCHAR(75) null,validations VARCHAR(75) null,groupId BIGINT(20),companyId BIGINT(20),createdBy BIGINT(20),modifiedBy BIGINT(20),createdDate DATETIME null,modifiedDate DATETIME null)";
	public static final String TABLE_SQL_DROP = "drop table SPUserConfig";
	public static final String ORDER_BY_JPQL = " ORDER BY spUserTypeConfig.spUserTypeConfigId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPUserConfig.spUserTypeConfigId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spservices.model.SPUserTypeConfig"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spservices.model.SPUserTypeConfig"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spservices.model.SPUserTypeConfig"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long USERTYPE_COLUMN_BITMASK = 4L;
	public static long USERTYPEID_COLUMN_BITMASK = 8L;
	public static long UUID_COLUMN_BITMASK = 16L;
	public static long VIRTUALHOSTID_COLUMN_BITMASK = 32L;
	public static long SPUSERTYPECONFIGID_COLUMN_BITMASK = 64L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spservices.model.SPUserTypeConfig"));

	public SPUserTypeConfigModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spUserTypeConfigId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpUserTypeConfigId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spUserTypeConfigId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPUserTypeConfig.class;
	}

	@Override
	public String getModelClassName() {
		return SPUserTypeConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("spUserTypeConfigId", getSpUserTypeConfigId());
		attributes.put("userType", getUserType());
		attributes.put("userTypeId", getUserTypeId());
		attributes.put("virtualHostId", getVirtualHostId());
		attributes.put("declarationId", getDeclarationId());
		attributes.put("declarationYearly", getDeclarationYearly());
		attributes.put("declarationFixedDate", getDeclarationFixedDate());
		attributes.put("pdpaId", getPdpaId());
		attributes.put("accountCreationTemplateName",
			getAccountCreationTemplateName());
		attributes.put("welcomeTemplateName", getWelcomeTemplateName());
		attributes.put("passwordChangeTemplateName",
			getPasswordChangeTemplateName());
		attributes.put("passwordResetTemplateName",
			getPasswordResetTemplateName());
		attributes.put("emailVerificationTemplateName",
			getEmailVerificationTemplateName());
		attributes.put("defauleRoleIds", getDefauleRoleIds());
		attributes.put("validations", getValidations());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long spUserTypeConfigId = (Long)attributes.get("spUserTypeConfigId");

		if (spUserTypeConfigId != null) {
			setSpUserTypeConfigId(spUserTypeConfigId);
		}

		String userType = (String)attributes.get("userType");

		if (userType != null) {
			setUserType(userType);
		}

		Long userTypeId = (Long)attributes.get("userTypeId");

		if (userTypeId != null) {
			setUserTypeId(userTypeId);
		}

		Long virtualHostId = (Long)attributes.get("virtualHostId");

		if (virtualHostId != null) {
			setVirtualHostId(virtualHostId);
		}

		Long declarationId = (Long)attributes.get("declarationId");

		if (declarationId != null) {
			setDeclarationId(declarationId);
		}

		Boolean declarationYearly = (Boolean)attributes.get("declarationYearly");

		if (declarationYearly != null) {
			setDeclarationYearly(declarationYearly);
		}

		Date declarationFixedDate = (Date)attributes.get("declarationFixedDate");

		if (declarationFixedDate != null) {
			setDeclarationFixedDate(declarationFixedDate);
		}

		Long pdpaId = (Long)attributes.get("pdpaId");

		if (pdpaId != null) {
			setPdpaId(pdpaId);
		}

		String accountCreationTemplateName = (String)attributes.get(
				"accountCreationTemplateName");

		if (accountCreationTemplateName != null) {
			setAccountCreationTemplateName(accountCreationTemplateName);
		}

		String welcomeTemplateName = (String)attributes.get(
				"welcomeTemplateName");

		if (welcomeTemplateName != null) {
			setWelcomeTemplateName(welcomeTemplateName);
		}

		String passwordChangeTemplateName = (String)attributes.get(
				"passwordChangeTemplateName");

		if (passwordChangeTemplateName != null) {
			setPasswordChangeTemplateName(passwordChangeTemplateName);
		}

		String passwordResetTemplateName = (String)attributes.get(
				"passwordResetTemplateName");

		if (passwordResetTemplateName != null) {
			setPasswordResetTemplateName(passwordResetTemplateName);
		}

		String emailVerificationTemplateName = (String)attributes.get(
				"emailVerificationTemplateName");

		if (emailVerificationTemplateName != null) {
			setEmailVerificationTemplateName(emailVerificationTemplateName);
		}

		String defauleRoleIds = (String)attributes.get("defauleRoleIds");

		if (defauleRoleIds != null) {
			setDefauleRoleIds(defauleRoleIds);
		}

		String validations = (String)attributes.get("validations");

		if (validations != null) {
			setValidations(validations);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getSpUserTypeConfigId() {
		return _spUserTypeConfigId;
	}

	@Override
	public void setSpUserTypeConfigId(long spUserTypeConfigId) {
		_spUserTypeConfigId = spUserTypeConfigId;
	}

	@Override
	public String getUserType() {
		if (_userType == null) {
			return StringPool.BLANK;
		}
		else {
			return _userType;
		}
	}

	@Override
	public void setUserType(String userType) {
		_columnBitmask |= USERTYPE_COLUMN_BITMASK;

		if (_originalUserType == null) {
			_originalUserType = _userType;
		}

		_userType = userType;
	}

	public String getOriginalUserType() {
		return GetterUtil.getString(_originalUserType);
	}

	@Override
	public long getUserTypeId() {
		return _userTypeId;
	}

	@Override
	public void setUserTypeId(long userTypeId) {
		_columnBitmask |= USERTYPEID_COLUMN_BITMASK;

		if (!_setOriginalUserTypeId) {
			_setOriginalUserTypeId = true;

			_originalUserTypeId = _userTypeId;
		}

		_userTypeId = userTypeId;
	}

	public long getOriginalUserTypeId() {
		return _originalUserTypeId;
	}

	@Override
	public long getVirtualHostId() {
		return _virtualHostId;
	}

	@Override
	public void setVirtualHostId(long virtualHostId) {
		_columnBitmask |= VIRTUALHOSTID_COLUMN_BITMASK;

		if (!_setOriginalVirtualHostId) {
			_setOriginalVirtualHostId = true;

			_originalVirtualHostId = _virtualHostId;
		}

		_virtualHostId = virtualHostId;
	}

	public long getOriginalVirtualHostId() {
		return _originalVirtualHostId;
	}

	@Override
	public long getDeclarationId() {
		return _declarationId;
	}

	@Override
	public void setDeclarationId(long declarationId) {
		_declarationId = declarationId;
	}

	@Override
	public boolean getDeclarationYearly() {
		return _declarationYearly;
	}

	@Override
	public boolean isDeclarationYearly() {
		return _declarationYearly;
	}

	@Override
	public void setDeclarationYearly(boolean declarationYearly) {
		_declarationYearly = declarationYearly;
	}

	@Override
	public Date getDeclarationFixedDate() {
		return _declarationFixedDate;
	}

	@Override
	public void setDeclarationFixedDate(Date declarationFixedDate) {
		_declarationFixedDate = declarationFixedDate;
	}

	@Override
	public long getPdpaId() {
		return _pdpaId;
	}

	@Override
	public void setPdpaId(long pdpaId) {
		_pdpaId = pdpaId;
	}

	@Override
	public String getAccountCreationTemplateName() {
		if (_accountCreationTemplateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _accountCreationTemplateName;
		}
	}

	@Override
	public void setAccountCreationTemplateName(
		String accountCreationTemplateName) {
		_accountCreationTemplateName = accountCreationTemplateName;
	}

	@Override
	public String getWelcomeTemplateName() {
		if (_welcomeTemplateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _welcomeTemplateName;
		}
	}

	@Override
	public void setWelcomeTemplateName(String welcomeTemplateName) {
		_welcomeTemplateName = welcomeTemplateName;
	}

	@Override
	public String getPasswordChangeTemplateName() {
		if (_passwordChangeTemplateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _passwordChangeTemplateName;
		}
	}

	@Override
	public void setPasswordChangeTemplateName(String passwordChangeTemplateName) {
		_passwordChangeTemplateName = passwordChangeTemplateName;
	}

	@Override
	public String getPasswordResetTemplateName() {
		if (_passwordResetTemplateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _passwordResetTemplateName;
		}
	}

	@Override
	public void setPasswordResetTemplateName(String passwordResetTemplateName) {
		_passwordResetTemplateName = passwordResetTemplateName;
	}

	@Override
	public String getEmailVerificationTemplateName() {
		if (_emailVerificationTemplateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailVerificationTemplateName;
		}
	}

	@Override
	public void setEmailVerificationTemplateName(
		String emailVerificationTemplateName) {
		_emailVerificationTemplateName = emailVerificationTemplateName;
	}

	@Override
	public String getDefauleRoleIds() {
		if (_defauleRoleIds == null) {
			return StringPool.BLANK;
		}
		else {
			return _defauleRoleIds;
		}
	}

	@Override
	public void setDefauleRoleIds(String defauleRoleIds) {
		_defauleRoleIds = defauleRoleIds;
	}

	@Override
	public String getValidations() {
		if (_validations == null) {
			return StringPool.BLANK;
		}
		else {
			return _validations;
		}
	}

	@Override
	public void setValidations(String validations) {
		_validations = validations;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPUserTypeConfig.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPUserTypeConfig toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPUserTypeConfig)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPUserTypeConfigImpl spUserTypeConfigImpl = new SPUserTypeConfigImpl();

		spUserTypeConfigImpl.setUuid(getUuid());
		spUserTypeConfigImpl.setSpUserTypeConfigId(getSpUserTypeConfigId());
		spUserTypeConfigImpl.setUserType(getUserType());
		spUserTypeConfigImpl.setUserTypeId(getUserTypeId());
		spUserTypeConfigImpl.setVirtualHostId(getVirtualHostId());
		spUserTypeConfigImpl.setDeclarationId(getDeclarationId());
		spUserTypeConfigImpl.setDeclarationYearly(getDeclarationYearly());
		spUserTypeConfigImpl.setDeclarationFixedDate(getDeclarationFixedDate());
		spUserTypeConfigImpl.setPdpaId(getPdpaId());
		spUserTypeConfigImpl.setAccountCreationTemplateName(getAccountCreationTemplateName());
		spUserTypeConfigImpl.setWelcomeTemplateName(getWelcomeTemplateName());
		spUserTypeConfigImpl.setPasswordChangeTemplateName(getPasswordChangeTemplateName());
		spUserTypeConfigImpl.setPasswordResetTemplateName(getPasswordResetTemplateName());
		spUserTypeConfigImpl.setEmailVerificationTemplateName(getEmailVerificationTemplateName());
		spUserTypeConfigImpl.setDefauleRoleIds(getDefauleRoleIds());
		spUserTypeConfigImpl.setValidations(getValidations());
		spUserTypeConfigImpl.setGroupId(getGroupId());
		spUserTypeConfigImpl.setCompanyId(getCompanyId());
		spUserTypeConfigImpl.setCreatedBy(getCreatedBy());
		spUserTypeConfigImpl.setModifiedBy(getModifiedBy());
		spUserTypeConfigImpl.setCreatedDate(getCreatedDate());
		spUserTypeConfigImpl.setModifiedDate(getModifiedDate());

		spUserTypeConfigImpl.resetOriginalValues();

		return spUserTypeConfigImpl;
	}

	@Override
	public int compareTo(SPUserTypeConfig spUserTypeConfig) {
		long primaryKey = spUserTypeConfig.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPUserTypeConfig)) {
			return false;
		}

		SPUserTypeConfig spUserTypeConfig = (SPUserTypeConfig)obj;

		long primaryKey = spUserTypeConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPUserTypeConfigModelImpl spUserTypeConfigModelImpl = this;

		spUserTypeConfigModelImpl._originalUuid = spUserTypeConfigModelImpl._uuid;

		spUserTypeConfigModelImpl._originalUserType = spUserTypeConfigModelImpl._userType;

		spUserTypeConfigModelImpl._originalUserTypeId = spUserTypeConfigModelImpl._userTypeId;

		spUserTypeConfigModelImpl._setOriginalUserTypeId = false;

		spUserTypeConfigModelImpl._originalVirtualHostId = spUserTypeConfigModelImpl._virtualHostId;

		spUserTypeConfigModelImpl._setOriginalVirtualHostId = false;

		spUserTypeConfigModelImpl._originalGroupId = spUserTypeConfigModelImpl._groupId;

		spUserTypeConfigModelImpl._setOriginalGroupId = false;

		spUserTypeConfigModelImpl._originalCompanyId = spUserTypeConfigModelImpl._companyId;

		spUserTypeConfigModelImpl._setOriginalCompanyId = false;

		spUserTypeConfigModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPUserTypeConfig> toCacheModel() {
		SPUserTypeConfigCacheModel spUserTypeConfigCacheModel = new SPUserTypeConfigCacheModel();

		spUserTypeConfigCacheModel.uuid = getUuid();

		String uuid = spUserTypeConfigCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			spUserTypeConfigCacheModel.uuid = null;
		}

		spUserTypeConfigCacheModel.spUserTypeConfigId = getSpUserTypeConfigId();

		spUserTypeConfigCacheModel.userType = getUserType();

		String userType = spUserTypeConfigCacheModel.userType;

		if ((userType != null) && (userType.length() == 0)) {
			spUserTypeConfigCacheModel.userType = null;
		}

		spUserTypeConfigCacheModel.userTypeId = getUserTypeId();

		spUserTypeConfigCacheModel.virtualHostId = getVirtualHostId();

		spUserTypeConfigCacheModel.declarationId = getDeclarationId();

		spUserTypeConfigCacheModel.declarationYearly = getDeclarationYearly();

		Date declarationFixedDate = getDeclarationFixedDate();

		if (declarationFixedDate != null) {
			spUserTypeConfigCacheModel.declarationFixedDate = declarationFixedDate.getTime();
		}
		else {
			spUserTypeConfigCacheModel.declarationFixedDate = Long.MIN_VALUE;
		}

		spUserTypeConfigCacheModel.pdpaId = getPdpaId();

		spUserTypeConfigCacheModel.accountCreationTemplateName = getAccountCreationTemplateName();

		String accountCreationTemplateName = spUserTypeConfigCacheModel.accountCreationTemplateName;

		if ((accountCreationTemplateName != null) &&
				(accountCreationTemplateName.length() == 0)) {
			spUserTypeConfigCacheModel.accountCreationTemplateName = null;
		}

		spUserTypeConfigCacheModel.welcomeTemplateName = getWelcomeTemplateName();

		String welcomeTemplateName = spUserTypeConfigCacheModel.welcomeTemplateName;

		if ((welcomeTemplateName != null) &&
				(welcomeTemplateName.length() == 0)) {
			spUserTypeConfigCacheModel.welcomeTemplateName = null;
		}

		spUserTypeConfigCacheModel.passwordChangeTemplateName = getPasswordChangeTemplateName();

		String passwordChangeTemplateName = spUserTypeConfigCacheModel.passwordChangeTemplateName;

		if ((passwordChangeTemplateName != null) &&
				(passwordChangeTemplateName.length() == 0)) {
			spUserTypeConfigCacheModel.passwordChangeTemplateName = null;
		}

		spUserTypeConfigCacheModel.passwordResetTemplateName = getPasswordResetTemplateName();

		String passwordResetTemplateName = spUserTypeConfigCacheModel.passwordResetTemplateName;

		if ((passwordResetTemplateName != null) &&
				(passwordResetTemplateName.length() == 0)) {
			spUserTypeConfigCacheModel.passwordResetTemplateName = null;
		}

		spUserTypeConfigCacheModel.emailVerificationTemplateName = getEmailVerificationTemplateName();

		String emailVerificationTemplateName = spUserTypeConfigCacheModel.emailVerificationTemplateName;

		if ((emailVerificationTemplateName != null) &&
				(emailVerificationTemplateName.length() == 0)) {
			spUserTypeConfigCacheModel.emailVerificationTemplateName = null;
		}

		spUserTypeConfigCacheModel.defauleRoleIds = getDefauleRoleIds();

		String defauleRoleIds = spUserTypeConfigCacheModel.defauleRoleIds;

		if ((defauleRoleIds != null) && (defauleRoleIds.length() == 0)) {
			spUserTypeConfigCacheModel.defauleRoleIds = null;
		}

		spUserTypeConfigCacheModel.validations = getValidations();

		String validations = spUserTypeConfigCacheModel.validations;

		if ((validations != null) && (validations.length() == 0)) {
			spUserTypeConfigCacheModel.validations = null;
		}

		spUserTypeConfigCacheModel.groupId = getGroupId();

		spUserTypeConfigCacheModel.companyId = getCompanyId();

		spUserTypeConfigCacheModel.createdBy = getCreatedBy();

		spUserTypeConfigCacheModel.modifiedBy = getModifiedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			spUserTypeConfigCacheModel.createdDate = createdDate.getTime();
		}
		else {
			spUserTypeConfigCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spUserTypeConfigCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spUserTypeConfigCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return spUserTypeConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(45);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", spUserTypeConfigId=");
		sb.append(getSpUserTypeConfigId());
		sb.append(", userType=");
		sb.append(getUserType());
		sb.append(", userTypeId=");
		sb.append(getUserTypeId());
		sb.append(", virtualHostId=");
		sb.append(getVirtualHostId());
		sb.append(", declarationId=");
		sb.append(getDeclarationId());
		sb.append(", declarationYearly=");
		sb.append(getDeclarationYearly());
		sb.append(", declarationFixedDate=");
		sb.append(getDeclarationFixedDate());
		sb.append(", pdpaId=");
		sb.append(getPdpaId());
		sb.append(", accountCreationTemplateName=");
		sb.append(getAccountCreationTemplateName());
		sb.append(", welcomeTemplateName=");
		sb.append(getWelcomeTemplateName());
		sb.append(", passwordChangeTemplateName=");
		sb.append(getPasswordChangeTemplateName());
		sb.append(", passwordResetTemplateName=");
		sb.append(getPasswordResetTemplateName());
		sb.append(", emailVerificationTemplateName=");
		sb.append(getEmailVerificationTemplateName());
		sb.append(", defauleRoleIds=");
		sb.append(getDefauleRoleIds());
		sb.append(", validations=");
		sb.append(getValidations());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(70);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.spservices.model.SPUserTypeConfig");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spUserTypeConfigId</column-name><column-value><![CDATA[");
		sb.append(getSpUserTypeConfigId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userType</column-name><column-value><![CDATA[");
		sb.append(getUserType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userTypeId</column-name><column-value><![CDATA[");
		sb.append(getUserTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>virtualHostId</column-name><column-value><![CDATA[");
		sb.append(getVirtualHostId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>declarationId</column-name><column-value><![CDATA[");
		sb.append(getDeclarationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>declarationYearly</column-name><column-value><![CDATA[");
		sb.append(getDeclarationYearly());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>declarationFixedDate</column-name><column-value><![CDATA[");
		sb.append(getDeclarationFixedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdpaId</column-name><column-value><![CDATA[");
		sb.append(getPdpaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountCreationTemplateName</column-name><column-value><![CDATA[");
		sb.append(getAccountCreationTemplateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>welcomeTemplateName</column-name><column-value><![CDATA[");
		sb.append(getWelcomeTemplateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passwordChangeTemplateName</column-name><column-value><![CDATA[");
		sb.append(getPasswordChangeTemplateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>passwordResetTemplateName</column-name><column-value><![CDATA[");
		sb.append(getPasswordResetTemplateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailVerificationTemplateName</column-name><column-value><![CDATA[");
		sb.append(getEmailVerificationTemplateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defauleRoleIds</column-name><column-value><![CDATA[");
		sb.append(getDefauleRoleIds());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>validations</column-name><column-value><![CDATA[");
		sb.append(getValidations());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPUserTypeConfig.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPUserTypeConfig.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _spUserTypeConfigId;
	private String _userType;
	private String _originalUserType;
	private long _userTypeId;
	private long _originalUserTypeId;
	private boolean _setOriginalUserTypeId;
	private long _virtualHostId;
	private long _originalVirtualHostId;
	private boolean _setOriginalVirtualHostId;
	private long _declarationId;
	private boolean _declarationYearly;
	private Date _declarationFixedDate;
	private long _pdpaId;
	private String _accountCreationTemplateName;
	private String _welcomeTemplateName;
	private String _passwordChangeTemplateName;
	private String _passwordResetTemplateName;
	private String _emailVerificationTemplateName;
	private String _defauleRoleIds;
	private String _validations;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _createdBy;
	private long _modifiedBy;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private SPUserTypeConfig _escapedModel;
}
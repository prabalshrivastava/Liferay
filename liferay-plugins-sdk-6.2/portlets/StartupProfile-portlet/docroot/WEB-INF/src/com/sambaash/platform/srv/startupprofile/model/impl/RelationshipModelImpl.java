/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.startupprofile.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.startupprofile.model.Relationship;
import com.sambaash.platform.srv.startupprofile.model.RelationshipModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Relationship service. Represents a row in the &quot;SPRelationships&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.startupprofile.model.RelationshipModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RelationshipImpl}.
 * </p>
 *
 * @author pradeep
 * @see RelationshipImpl
 * @see com.sambaash.platform.srv.startupprofile.model.Relationship
 * @see com.sambaash.platform.srv.startupprofile.model.RelationshipModel
 * @generated
 */
public class RelationshipModelImpl extends BaseModelImpl<Relationship>
	implements RelationshipModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a relationship model instance should use the {@link com.sambaash.platform.srv.startupprofile.model.Relationship} interface instead.
	 */
	public static final String TABLE_NAME = "SPRelationships";
	public static final Object[][] TABLE_COLUMNS = {
			{ "relationshipId", Types.BIGINT },
			{ "organizationId", Types.BIGINT },
			{ "refId", Types.BIGINT },
			{ "refTypeId", Types.BIGINT },
			{ "relation", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "active_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SPRelationships (relationshipId BIGINT(20) not null primary key,organizationId BIGINT(20),refId BIGINT(20),refTypeId BIGINT(20),relation BIGINT(20),groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,active_ BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SPRelationships";
	public static final String ORDER_BY_JPQL = " ORDER BY relationship.relationshipId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPRelationships.relationshipId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.startupprofile.model.Relationship"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.startupprofile.model.Relationship"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.startupprofile.model.Relationship"));

	public RelationshipModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _relationshipId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRelationshipId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _relationshipId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Relationship.class;
	}

	@Override
	public String getModelClassName() {
		return Relationship.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("relationshipId", getRelationshipId());
		attributes.put("organizationId", getOrganizationId());
		attributes.put("refId", getRefId());
		attributes.put("refTypeId", getRefTypeId());
		attributes.put("relation", getRelation());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("active", getActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long relationshipId = (Long)attributes.get("relationshipId");

		if (relationshipId != null) {
			setRelationshipId(relationshipId);
		}

		Long organizationId = (Long)attributes.get("organizationId");

		if (organizationId != null) {
			setOrganizationId(organizationId);
		}

		Long refId = (Long)attributes.get("refId");

		if (refId != null) {
			setRefId(refId);
		}

		Long refTypeId = (Long)attributes.get("refTypeId");

		if (refTypeId != null) {
			setRefTypeId(refTypeId);
		}

		Long relation = (Long)attributes.get("relation");

		if (relation != null) {
			setRelation(relation);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}
	}

	@Override
	public long getRelationshipId() {
		return _relationshipId;
	}

	@Override
	public void setRelationshipId(long relationshipId) {
		_relationshipId = relationshipId;
	}

	@Override
	public long getOrganizationId() {
		return _organizationId;
	}

	@Override
	public void setOrganizationId(long organizationId) {
		_organizationId = organizationId;
	}

	@Override
	public long getRefId() {
		return _refId;
	}

	@Override
	public void setRefId(long refId) {
		_refId = refId;
	}

	@Override
	public long getRefTypeId() {
		return _refTypeId;
	}

	@Override
	public void setRefTypeId(long refTypeId) {
		_refTypeId = refTypeId;
	}

	@Override
	public long getRelation() {
		return _relation;
	}

	@Override
	public void setRelation(long relation) {
		_relation = relation;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Relationship.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Relationship toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Relationship)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RelationshipImpl relationshipImpl = new RelationshipImpl();

		relationshipImpl.setRelationshipId(getRelationshipId());
		relationshipImpl.setOrganizationId(getOrganizationId());
		relationshipImpl.setRefId(getRefId());
		relationshipImpl.setRefTypeId(getRefTypeId());
		relationshipImpl.setRelation(getRelation());
		relationshipImpl.setGroupId(getGroupId());
		relationshipImpl.setCompanyId(getCompanyId());
		relationshipImpl.setUserId(getUserId());
		relationshipImpl.setUserName(getUserName());
		relationshipImpl.setCreateDate(getCreateDate());
		relationshipImpl.setModifiedDate(getModifiedDate());
		relationshipImpl.setActive(getActive());

		relationshipImpl.resetOriginalValues();

		return relationshipImpl;
	}

	@Override
	public int compareTo(Relationship relationship) {
		long primaryKey = relationship.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Relationship)) {
			return false;
		}

		Relationship relationship = (Relationship)obj;

		long primaryKey = relationship.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Relationship> toCacheModel() {
		RelationshipCacheModel relationshipCacheModel = new RelationshipCacheModel();

		relationshipCacheModel.relationshipId = getRelationshipId();

		relationshipCacheModel.organizationId = getOrganizationId();

		relationshipCacheModel.refId = getRefId();

		relationshipCacheModel.refTypeId = getRefTypeId();

		relationshipCacheModel.relation = getRelation();

		relationshipCacheModel.groupId = getGroupId();

		relationshipCacheModel.companyId = getCompanyId();

		relationshipCacheModel.userId = getUserId();

		relationshipCacheModel.userName = getUserName();

		String userName = relationshipCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			relationshipCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			relationshipCacheModel.createDate = createDate.getTime();
		}
		else {
			relationshipCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			relationshipCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			relationshipCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		relationshipCacheModel.active = getActive();

		return relationshipCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{relationshipId=");
		sb.append(getRelationshipId());
		sb.append(", organizationId=");
		sb.append(getOrganizationId());
		sb.append(", refId=");
		sb.append(getRefId());
		sb.append(", refTypeId=");
		sb.append(getRefTypeId());
		sb.append(", relation=");
		sb.append(getRelation());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", active=");
		sb.append(getActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.startupprofile.model.Relationship");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>relationshipId</column-name><column-value><![CDATA[");
		sb.append(getRelationshipId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>organizationId</column-name><column-value><![CDATA[");
		sb.append(getOrganizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>refId</column-name><column-value><![CDATA[");
		sb.append(getRefId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>refTypeId</column-name><column-value><![CDATA[");
		sb.append(getRefTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>relation</column-name><column-value><![CDATA[");
		sb.append(getRelation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Relationship.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Relationship.class
		};
	private long _relationshipId;
	private long _organizationId;
	private long _refId;
	private long _refTypeId;
	private long _relation;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _active;
	private Relationship _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.processbuilder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.processbuilder.model.PEProcessState;
import com.sambaash.platform.srv.processbuilder.model.PEProcessStateModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PEProcessState service. Represents a row in the &quot;SPPEProcessState&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.processbuilder.model.PEProcessStateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PEProcessStateImpl}.
 * </p>
 *
 * @author nareshchebolu
 * @see PEProcessStateImpl
 * @see com.sambaash.platform.srv.processbuilder.model.PEProcessState
 * @see com.sambaash.platform.srv.processbuilder.model.PEProcessStateModel
 * @generated
 */
public class PEProcessStateModelImpl extends BaseModelImpl<PEProcessState>
	implements PEProcessStateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a p e process state model instance should use the {@link com.sambaash.platform.srv.processbuilder.model.PEProcessState} interface instead.
	 */
	public static final String TABLE_NAME = "SPPEProcessState";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spPEProcessStateId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "spPEProcessId", Types.BIGINT },
			{ "entityClassId", Types.BIGINT },
			{ "entityId", Types.BIGINT },
			{ "userIdProcess", Types.BIGINT },
			{ "userIdCreator", Types.BIGINT },
			{ "statusTypeId", Types.BIGINT },
			{ "spPEProcessStageId", Types.BIGINT },
			{ "status", Types.VARCHAR },
			{ "nodeId", Types.BIGINT },
			{ "nodeIdLastProcessed", Types.BIGINT },
			{ "nodeIdLastDisplayed", Types.BIGINT },
			{ "nodeIdLastDataSubmitted", Types.BIGINT },
			{ "data_", Types.CLOB },
			{ "lastErrorCode", Types.BIGINT },
			{ "lastErrorMsg", Types.VARCHAR },
			{ "lastErrorDate", Types.TIMESTAMP },
			{ "currentStatusTypeApprovers", Types.VARCHAR },
			{ "currentNodeSubmitters", Types.VARCHAR },
			{ "lock_", Types.INTEGER },
			{ "lockDate", Types.TIMESTAMP },
			{ "userIdSupervisor", Types.BIGINT },
			{ "userIdAgent", Types.BIGINT },
			{ "closedStageId", Types.BIGINT },
			{ "closedDate", Types.TIMESTAMP },
			{ "closedReasonCatId", Types.BIGINT },
			{ "closedDescription", Types.VARCHAR },
			{ "convertedFromProcessStateId", Types.BIGINT },
			{ "convertedToProcessStateId", Types.BIGINT },
			{ "activeStatus", Types.INTEGER },
			{ "amount", Types.VARCHAR },
			{ "sourceClassId", Types.BIGINT },
			{ "sourceEntityID", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPPEProcessState (uuid_ VARCHAR(75) null,spPEProcessStateId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,spPEProcessId BIGINT(20),entityClassId BIGINT(20),entityId BIGINT(20),userIdProcess BIGINT(20),userIdCreator BIGINT(20),statusTypeId BIGINT(20),spPEProcessStageId BIGINT(20),status VARCHAR(75) null,nodeId BIGINT(20),nodeIdLastProcessed BIGINT(20),nodeIdLastDisplayed BIGINT(20),nodeIdLastDataSubmitted BIGINT(20),data_ LONGTEXT null,lastErrorCode BIGINT(20),lastErrorMsg VARCHAR(75) null,lastErrorDate DATETIME null,currentStatusTypeApprovers VARCHAR(75) null,currentNodeSubmitters VARCHAR(75) null,lock_ INTEGER,lockDate DATETIME null,userIdSupervisor BIGINT(20),userIdAgent BIGINT(20),closedStageId BIGINT(20),closedDate DATETIME null,closedReasonCatId BIGINT(20),closedDescription VARCHAR(75) null,convertedFromProcessStateId BIGINT(20),convertedToProcessStateId BIGINT(20),activeStatus INTEGER,amount VARCHAR(75) null,sourceClassId BIGINT(20),sourceEntityID BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPPEProcessState";
	public static final String ORDER_BY_JPQL = " ORDER BY peProcessState.spPEProcessStateId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPPEProcessState.spPEProcessStateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.processbuilder.model.PEProcessState"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.processbuilder.model.PEProcessState"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.processbuilder.model.PEProcessState"),
			true);
	public static long ACTIVESTATUS_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long ENTITYCLASSID_COLUMN_BITMASK = 4L;
	public static long ENTITYID_COLUMN_BITMASK = 8L;
	public static long GROUPID_COLUMN_BITMASK = 16L;
	public static long SOURCECLASSID_COLUMN_BITMASK = 32L;
	public static long SOURCEENTITYID_COLUMN_BITMASK = 64L;
	public static long SPPEPROCESSID_COLUMN_BITMASK = 128L;
	public static long SPPEPROCESSSTAGEID_COLUMN_BITMASK = 256L;
	public static long USERIDPROCESS_COLUMN_BITMASK = 512L;
	public static long UUID_COLUMN_BITMASK = 1024L;
	public static long SPPEPROCESSSTATEID_COLUMN_BITMASK = 2048L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.processbuilder.model.PEProcessState"));

	public PEProcessStateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spPEProcessStateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpPEProcessStateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spPEProcessStateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PEProcessState.class;
	}

	@Override
	public String getModelClassName() {
		return PEProcessState.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("spPEProcessStateId", getSpPEProcessStateId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("spPEProcessId", getSpPEProcessId());
		attributes.put("entityClassId", getEntityClassId());
		attributes.put("entityId", getEntityId());
		attributes.put("userIdProcess", getUserIdProcess());
		attributes.put("userIdCreator", getUserIdCreator());
		attributes.put("statusTypeId", getStatusTypeId());
		attributes.put("spPEProcessStageId", getSpPEProcessStageId());
		attributes.put("status", getStatus());
		attributes.put("nodeId", getNodeId());
		attributes.put("nodeIdLastProcessed", getNodeIdLastProcessed());
		attributes.put("nodeIdLastDisplayed", getNodeIdLastDisplayed());
		attributes.put("nodeIdLastDataSubmitted", getNodeIdLastDataSubmitted());
		attributes.put("data", getData());
		attributes.put("lastErrorCode", getLastErrorCode());
		attributes.put("lastErrorMsg", getLastErrorMsg());
		attributes.put("lastErrorDate", getLastErrorDate());
		attributes.put("currentStatusTypeApprovers",
			getCurrentStatusTypeApprovers());
		attributes.put("currentNodeSubmitters", getCurrentNodeSubmitters());
		attributes.put("lock", getLock());
		attributes.put("lockDate", getLockDate());
		attributes.put("userIdSupervisor", getUserIdSupervisor());
		attributes.put("userIdAgent", getUserIdAgent());
		attributes.put("closedStageId", getClosedStageId());
		attributes.put("closedDate", getClosedDate());
		attributes.put("closedReasonCatId", getClosedReasonCatId());
		attributes.put("closedDescription", getClosedDescription());
		attributes.put("convertedFromProcessStateId",
			getConvertedFromProcessStateId());
		attributes.put("convertedToProcessStateId",
			getConvertedToProcessStateId());
		attributes.put("activeStatus", getActiveStatus());
		attributes.put("amount", getAmount());
		attributes.put("sourceClassId", getSourceClassId());
		attributes.put("sourceEntityID", getSourceEntityID());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long spPEProcessStateId = (Long)attributes.get("spPEProcessStateId");

		if (spPEProcessStateId != null) {
			setSpPEProcessStateId(spPEProcessStateId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long spPEProcessId = (Long)attributes.get("spPEProcessId");

		if (spPEProcessId != null) {
			setSpPEProcessId(spPEProcessId);
		}

		Long entityClassId = (Long)attributes.get("entityClassId");

		if (entityClassId != null) {
			setEntityClassId(entityClassId);
		}

		Long entityId = (Long)attributes.get("entityId");

		if (entityId != null) {
			setEntityId(entityId);
		}

		Long userIdProcess = (Long)attributes.get("userIdProcess");

		if (userIdProcess != null) {
			setUserIdProcess(userIdProcess);
		}

		Long userIdCreator = (Long)attributes.get("userIdCreator");

		if (userIdCreator != null) {
			setUserIdCreator(userIdCreator);
		}

		Long statusTypeId = (Long)attributes.get("statusTypeId");

		if (statusTypeId != null) {
			setStatusTypeId(statusTypeId);
		}

		Long spPEProcessStageId = (Long)attributes.get("spPEProcessStageId");

		if (spPEProcessStageId != null) {
			setSpPEProcessStageId(spPEProcessStageId);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long nodeId = (Long)attributes.get("nodeId");

		if (nodeId != null) {
			setNodeId(nodeId);
		}

		Long nodeIdLastProcessed = (Long)attributes.get("nodeIdLastProcessed");

		if (nodeIdLastProcessed != null) {
			setNodeIdLastProcessed(nodeIdLastProcessed);
		}

		Long nodeIdLastDisplayed = (Long)attributes.get("nodeIdLastDisplayed");

		if (nodeIdLastDisplayed != null) {
			setNodeIdLastDisplayed(nodeIdLastDisplayed);
		}

		Long nodeIdLastDataSubmitted = (Long)attributes.get(
				"nodeIdLastDataSubmitted");

		if (nodeIdLastDataSubmitted != null) {
			setNodeIdLastDataSubmitted(nodeIdLastDataSubmitted);
		}

		String data = (String)attributes.get("data");

		if (data != null) {
			setData(data);
		}

		Long lastErrorCode = (Long)attributes.get("lastErrorCode");

		if (lastErrorCode != null) {
			setLastErrorCode(lastErrorCode);
		}

		String lastErrorMsg = (String)attributes.get("lastErrorMsg");

		if (lastErrorMsg != null) {
			setLastErrorMsg(lastErrorMsg);
		}

		Date lastErrorDate = (Date)attributes.get("lastErrorDate");

		if (lastErrorDate != null) {
			setLastErrorDate(lastErrorDate);
		}

		String currentStatusTypeApprovers = (String)attributes.get(
				"currentStatusTypeApprovers");

		if (currentStatusTypeApprovers != null) {
			setCurrentStatusTypeApprovers(currentStatusTypeApprovers);
		}

		String currentNodeSubmitters = (String)attributes.get(
				"currentNodeSubmitters");

		if (currentNodeSubmitters != null) {
			setCurrentNodeSubmitters(currentNodeSubmitters);
		}

		Integer lock = (Integer)attributes.get("lock");

		if (lock != null) {
			setLock(lock);
		}

		Date lockDate = (Date)attributes.get("lockDate");

		if (lockDate != null) {
			setLockDate(lockDate);
		}

		Long userIdSupervisor = (Long)attributes.get("userIdSupervisor");

		if (userIdSupervisor != null) {
			setUserIdSupervisor(userIdSupervisor);
		}

		Long userIdAgent = (Long)attributes.get("userIdAgent");

		if (userIdAgent != null) {
			setUserIdAgent(userIdAgent);
		}

		Long closedStageId = (Long)attributes.get("closedStageId");

		if (closedStageId != null) {
			setClosedStageId(closedStageId);
		}

		Date closedDate = (Date)attributes.get("closedDate");

		if (closedDate != null) {
			setClosedDate(closedDate);
		}

		Long closedReasonCatId = (Long)attributes.get("closedReasonCatId");

		if (closedReasonCatId != null) {
			setClosedReasonCatId(closedReasonCatId);
		}

		String closedDescription = (String)attributes.get("closedDescription");

		if (closedDescription != null) {
			setClosedDescription(closedDescription);
		}

		Long convertedFromProcessStateId = (Long)attributes.get(
				"convertedFromProcessStateId");

		if (convertedFromProcessStateId != null) {
			setConvertedFromProcessStateId(convertedFromProcessStateId);
		}

		Long convertedToProcessStateId = (Long)attributes.get(
				"convertedToProcessStateId");

		if (convertedToProcessStateId != null) {
			setConvertedToProcessStateId(convertedToProcessStateId);
		}

		Integer activeStatus = (Integer)attributes.get("activeStatus");

		if (activeStatus != null) {
			setActiveStatus(activeStatus);
		}

		String amount = (String)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		Long sourceClassId = (Long)attributes.get("sourceClassId");

		if (sourceClassId != null) {
			setSourceClassId(sourceClassId);
		}

		Long sourceEntityID = (Long)attributes.get("sourceEntityID");

		if (sourceEntityID != null) {
			setSourceEntityID(sourceEntityID);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getSpPEProcessStateId() {
		return _spPEProcessStateId;
	}

	@Override
	public void setSpPEProcessStateId(long spPEProcessStateId) {
		_spPEProcessStateId = spPEProcessStateId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getSpPEProcessId() {
		return _spPEProcessId;
	}

	@Override
	public void setSpPEProcessId(long spPEProcessId) {
		_columnBitmask |= SPPEPROCESSID_COLUMN_BITMASK;

		if (!_setOriginalSpPEProcessId) {
			_setOriginalSpPEProcessId = true;

			_originalSpPEProcessId = _spPEProcessId;
		}

		_spPEProcessId = spPEProcessId;
	}

	public long getOriginalSpPEProcessId() {
		return _originalSpPEProcessId;
	}

	@Override
	public long getEntityClassId() {
		return _entityClassId;
	}

	@Override
	public void setEntityClassId(long entityClassId) {
		_columnBitmask |= ENTITYCLASSID_COLUMN_BITMASK;

		if (!_setOriginalEntityClassId) {
			_setOriginalEntityClassId = true;

			_originalEntityClassId = _entityClassId;
		}

		_entityClassId = entityClassId;
	}

	public long getOriginalEntityClassId() {
		return _originalEntityClassId;
	}

	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		_columnBitmask |= ENTITYID_COLUMN_BITMASK;

		if (!_setOriginalEntityId) {
			_setOriginalEntityId = true;

			_originalEntityId = _entityId;
		}

		_entityId = entityId;
	}

	public long getOriginalEntityId() {
		return _originalEntityId;
	}

	@Override
	public long getUserIdProcess() {
		return _userIdProcess;
	}

	@Override
	public void setUserIdProcess(long userIdProcess) {
		_columnBitmask |= USERIDPROCESS_COLUMN_BITMASK;

		if (!_setOriginalUserIdProcess) {
			_setOriginalUserIdProcess = true;

			_originalUserIdProcess = _userIdProcess;
		}

		_userIdProcess = userIdProcess;
	}

	public long getOriginalUserIdProcess() {
		return _originalUserIdProcess;
	}

	@Override
	public long getUserIdCreator() {
		return _userIdCreator;
	}

	@Override
	public void setUserIdCreator(long userIdCreator) {
		_userIdCreator = userIdCreator;
	}

	@Override
	public long getStatusTypeId() {
		return _statusTypeId;
	}

	@Override
	public void setStatusTypeId(long statusTypeId) {
		_statusTypeId = statusTypeId;
	}

	@Override
	public long getSpPEProcessStageId() {
		return _spPEProcessStageId;
	}

	@Override
	public void setSpPEProcessStageId(long spPEProcessStageId) {
		_columnBitmask |= SPPEPROCESSSTAGEID_COLUMN_BITMASK;

		if (!_setOriginalSpPEProcessStageId) {
			_setOriginalSpPEProcessStageId = true;

			_originalSpPEProcessStageId = _spPEProcessStageId;
		}

		_spPEProcessStageId = spPEProcessStageId;
	}

	public long getOriginalSpPEProcessStageId() {
		return _originalSpPEProcessStageId;
	}

	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public long getNodeId() {
		return _nodeId;
	}

	@Override
	public void setNodeId(long nodeId) {
		_nodeId = nodeId;
	}

	@Override
	public long getNodeIdLastProcessed() {
		return _nodeIdLastProcessed;
	}

	@Override
	public void setNodeIdLastProcessed(long nodeIdLastProcessed) {
		_nodeIdLastProcessed = nodeIdLastProcessed;
	}

	@Override
	public long getNodeIdLastDisplayed() {
		return _nodeIdLastDisplayed;
	}

	@Override
	public void setNodeIdLastDisplayed(long nodeIdLastDisplayed) {
		_nodeIdLastDisplayed = nodeIdLastDisplayed;
	}

	@Override
	public long getNodeIdLastDataSubmitted() {
		return _nodeIdLastDataSubmitted;
	}

	@Override
	public void setNodeIdLastDataSubmitted(long nodeIdLastDataSubmitted) {
		_nodeIdLastDataSubmitted = nodeIdLastDataSubmitted;
	}

	@Override
	public String getData() {
		if (_data == null) {
			return StringPool.BLANK;
		}
		else {
			return _data;
		}
	}

	@Override
	public void setData(String data) {
		_data = data;
	}

	@Override
	public long getLastErrorCode() {
		return _lastErrorCode;
	}

	@Override
	public void setLastErrorCode(long lastErrorCode) {
		_lastErrorCode = lastErrorCode;
	}

	@Override
	public String getLastErrorMsg() {
		if (_lastErrorMsg == null) {
			return StringPool.BLANK;
		}
		else {
			return _lastErrorMsg;
		}
	}

	@Override
	public void setLastErrorMsg(String lastErrorMsg) {
		_lastErrorMsg = lastErrorMsg;
	}

	@Override
	public Date getLastErrorDate() {
		return _lastErrorDate;
	}

	@Override
	public void setLastErrorDate(Date lastErrorDate) {
		_lastErrorDate = lastErrorDate;
	}

	@Override
	public String getCurrentStatusTypeApprovers() {
		if (_currentStatusTypeApprovers == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentStatusTypeApprovers;
		}
	}

	@Override
	public void setCurrentStatusTypeApprovers(String currentStatusTypeApprovers) {
		_currentStatusTypeApprovers = currentStatusTypeApprovers;
	}

	@Override
	public String getCurrentNodeSubmitters() {
		if (_currentNodeSubmitters == null) {
			return StringPool.BLANK;
		}
		else {
			return _currentNodeSubmitters;
		}
	}

	@Override
	public void setCurrentNodeSubmitters(String currentNodeSubmitters) {
		_currentNodeSubmitters = currentNodeSubmitters;
	}

	@Override
	public int getLock() {
		return _lock;
	}

	@Override
	public void setLock(int lock) {
		_lock = lock;
	}

	@Override
	public Date getLockDate() {
		return _lockDate;
	}

	@Override
	public void setLockDate(Date lockDate) {
		_lockDate = lockDate;
	}

	@Override
	public long getUserIdSupervisor() {
		return _userIdSupervisor;
	}

	@Override
	public void setUserIdSupervisor(long userIdSupervisor) {
		_userIdSupervisor = userIdSupervisor;
	}

	@Override
	public long getUserIdAgent() {
		return _userIdAgent;
	}

	@Override
	public void setUserIdAgent(long userIdAgent) {
		_userIdAgent = userIdAgent;
	}

	@Override
	public long getClosedStageId() {
		return _closedStageId;
	}

	@Override
	public void setClosedStageId(long closedStageId) {
		_closedStageId = closedStageId;
	}

	@Override
	public Date getClosedDate() {
		return _closedDate;
	}

	@Override
	public void setClosedDate(Date closedDate) {
		_closedDate = closedDate;
	}

	@Override
	public long getClosedReasonCatId() {
		return _closedReasonCatId;
	}

	@Override
	public void setClosedReasonCatId(long closedReasonCatId) {
		_closedReasonCatId = closedReasonCatId;
	}

	@Override
	public String getClosedDescription() {
		if (_closedDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _closedDescription;
		}
	}

	@Override
	public void setClosedDescription(String closedDescription) {
		_closedDescription = closedDescription;
	}

	@Override
	public long getConvertedFromProcessStateId() {
		return _convertedFromProcessStateId;
	}

	@Override
	public void setConvertedFromProcessStateId(long convertedFromProcessStateId) {
		_convertedFromProcessStateId = convertedFromProcessStateId;
	}

	@Override
	public long getConvertedToProcessStateId() {
		return _convertedToProcessStateId;
	}

	@Override
	public void setConvertedToProcessStateId(long convertedToProcessStateId) {
		_convertedToProcessStateId = convertedToProcessStateId;
	}

	@Override
	public int getActiveStatus() {
		return _activeStatus;
	}

	@Override
	public void setActiveStatus(int activeStatus) {
		_columnBitmask |= ACTIVESTATUS_COLUMN_BITMASK;

		if (!_setOriginalActiveStatus) {
			_setOriginalActiveStatus = true;

			_originalActiveStatus = _activeStatus;
		}

		_activeStatus = activeStatus;
	}

	public int getOriginalActiveStatus() {
		return _originalActiveStatus;
	}

	@Override
	public String getAmount() {
		if (_amount == null) {
			return StringPool.BLANK;
		}
		else {
			return _amount;
		}
	}

	@Override
	public void setAmount(String amount) {
		_amount = amount;
	}

	@Override
	public long getSourceClassId() {
		return _sourceClassId;
	}

	@Override
	public void setSourceClassId(long sourceClassId) {
		_columnBitmask |= SOURCECLASSID_COLUMN_BITMASK;

		if (!_setOriginalSourceClassId) {
			_setOriginalSourceClassId = true;

			_originalSourceClassId = _sourceClassId;
		}

		_sourceClassId = sourceClassId;
	}

	public long getOriginalSourceClassId() {
		return _originalSourceClassId;
	}

	@Override
	public long getSourceEntityID() {
		return _sourceEntityID;
	}

	@Override
	public void setSourceEntityID(long sourceEntityID) {
		_columnBitmask |= SOURCEENTITYID_COLUMN_BITMASK;

		if (!_setOriginalSourceEntityID) {
			_setOriginalSourceEntityID = true;

			_originalSourceEntityID = _sourceEntityID;
		}

		_sourceEntityID = sourceEntityID;
	}

	public long getOriginalSourceEntityID() {
		return _originalSourceEntityID;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				PEProcessState.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			PEProcessState.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PEProcessState toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PEProcessState)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PEProcessStateImpl peProcessStateImpl = new PEProcessStateImpl();

		peProcessStateImpl.setUuid(getUuid());
		peProcessStateImpl.setSpPEProcessStateId(getSpPEProcessStateId());
		peProcessStateImpl.setGroupId(getGroupId());
		peProcessStateImpl.setCompanyId(getCompanyId());
		peProcessStateImpl.setUserId(getUserId());
		peProcessStateImpl.setUserName(getUserName());
		peProcessStateImpl.setCreateDate(getCreateDate());
		peProcessStateImpl.setModifiedDate(getModifiedDate());
		peProcessStateImpl.setSpPEProcessId(getSpPEProcessId());
		peProcessStateImpl.setEntityClassId(getEntityClassId());
		peProcessStateImpl.setEntityId(getEntityId());
		peProcessStateImpl.setUserIdProcess(getUserIdProcess());
		peProcessStateImpl.setUserIdCreator(getUserIdCreator());
		peProcessStateImpl.setStatusTypeId(getStatusTypeId());
		peProcessStateImpl.setSpPEProcessStageId(getSpPEProcessStageId());
		peProcessStateImpl.setStatus(getStatus());
		peProcessStateImpl.setNodeId(getNodeId());
		peProcessStateImpl.setNodeIdLastProcessed(getNodeIdLastProcessed());
		peProcessStateImpl.setNodeIdLastDisplayed(getNodeIdLastDisplayed());
		peProcessStateImpl.setNodeIdLastDataSubmitted(getNodeIdLastDataSubmitted());
		peProcessStateImpl.setData(getData());
		peProcessStateImpl.setLastErrorCode(getLastErrorCode());
		peProcessStateImpl.setLastErrorMsg(getLastErrorMsg());
		peProcessStateImpl.setLastErrorDate(getLastErrorDate());
		peProcessStateImpl.setCurrentStatusTypeApprovers(getCurrentStatusTypeApprovers());
		peProcessStateImpl.setCurrentNodeSubmitters(getCurrentNodeSubmitters());
		peProcessStateImpl.setLock(getLock());
		peProcessStateImpl.setLockDate(getLockDate());
		peProcessStateImpl.setUserIdSupervisor(getUserIdSupervisor());
		peProcessStateImpl.setUserIdAgent(getUserIdAgent());
		peProcessStateImpl.setClosedStageId(getClosedStageId());
		peProcessStateImpl.setClosedDate(getClosedDate());
		peProcessStateImpl.setClosedReasonCatId(getClosedReasonCatId());
		peProcessStateImpl.setClosedDescription(getClosedDescription());
		peProcessStateImpl.setConvertedFromProcessStateId(getConvertedFromProcessStateId());
		peProcessStateImpl.setConvertedToProcessStateId(getConvertedToProcessStateId());
		peProcessStateImpl.setActiveStatus(getActiveStatus());
		peProcessStateImpl.setAmount(getAmount());
		peProcessStateImpl.setSourceClassId(getSourceClassId());
		peProcessStateImpl.setSourceEntityID(getSourceEntityID());

		peProcessStateImpl.resetOriginalValues();

		return peProcessStateImpl;
	}

	@Override
	public int compareTo(PEProcessState peProcessState) {
		long primaryKey = peProcessState.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PEProcessState)) {
			return false;
		}

		PEProcessState peProcessState = (PEProcessState)obj;

		long primaryKey = peProcessState.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PEProcessStateModelImpl peProcessStateModelImpl = this;

		peProcessStateModelImpl._originalUuid = peProcessStateModelImpl._uuid;

		peProcessStateModelImpl._originalGroupId = peProcessStateModelImpl._groupId;

		peProcessStateModelImpl._setOriginalGroupId = false;

		peProcessStateModelImpl._originalCompanyId = peProcessStateModelImpl._companyId;

		peProcessStateModelImpl._setOriginalCompanyId = false;

		peProcessStateModelImpl._originalSpPEProcessId = peProcessStateModelImpl._spPEProcessId;

		peProcessStateModelImpl._setOriginalSpPEProcessId = false;

		peProcessStateModelImpl._originalEntityClassId = peProcessStateModelImpl._entityClassId;

		peProcessStateModelImpl._setOriginalEntityClassId = false;

		peProcessStateModelImpl._originalEntityId = peProcessStateModelImpl._entityId;

		peProcessStateModelImpl._setOriginalEntityId = false;

		peProcessStateModelImpl._originalUserIdProcess = peProcessStateModelImpl._userIdProcess;

		peProcessStateModelImpl._setOriginalUserIdProcess = false;

		peProcessStateModelImpl._originalSpPEProcessStageId = peProcessStateModelImpl._spPEProcessStageId;

		peProcessStateModelImpl._setOriginalSpPEProcessStageId = false;

		peProcessStateModelImpl._originalActiveStatus = peProcessStateModelImpl._activeStatus;

		peProcessStateModelImpl._setOriginalActiveStatus = false;

		peProcessStateModelImpl._originalSourceClassId = peProcessStateModelImpl._sourceClassId;

		peProcessStateModelImpl._setOriginalSourceClassId = false;

		peProcessStateModelImpl._originalSourceEntityID = peProcessStateModelImpl._sourceEntityID;

		peProcessStateModelImpl._setOriginalSourceEntityID = false;

		peProcessStateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<PEProcessState> toCacheModel() {
		PEProcessStateCacheModel peProcessStateCacheModel = new PEProcessStateCacheModel();

		peProcessStateCacheModel.uuid = getUuid();

		String uuid = peProcessStateCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			peProcessStateCacheModel.uuid = null;
		}

		peProcessStateCacheModel.spPEProcessStateId = getSpPEProcessStateId();

		peProcessStateCacheModel.groupId = getGroupId();

		peProcessStateCacheModel.companyId = getCompanyId();

		peProcessStateCacheModel.userId = getUserId();

		peProcessStateCacheModel.userName = getUserName();

		String userName = peProcessStateCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			peProcessStateCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			peProcessStateCacheModel.createDate = createDate.getTime();
		}
		else {
			peProcessStateCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			peProcessStateCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			peProcessStateCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		peProcessStateCacheModel.spPEProcessId = getSpPEProcessId();

		peProcessStateCacheModel.entityClassId = getEntityClassId();

		peProcessStateCacheModel.entityId = getEntityId();

		peProcessStateCacheModel.userIdProcess = getUserIdProcess();

		peProcessStateCacheModel.userIdCreator = getUserIdCreator();

		peProcessStateCacheModel.statusTypeId = getStatusTypeId();

		peProcessStateCacheModel.spPEProcessStageId = getSpPEProcessStageId();

		peProcessStateCacheModel.status = getStatus();

		String status = peProcessStateCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			peProcessStateCacheModel.status = null;
		}

		peProcessStateCacheModel.nodeId = getNodeId();

		peProcessStateCacheModel.nodeIdLastProcessed = getNodeIdLastProcessed();

		peProcessStateCacheModel.nodeIdLastDisplayed = getNodeIdLastDisplayed();

		peProcessStateCacheModel.nodeIdLastDataSubmitted = getNodeIdLastDataSubmitted();

		peProcessStateCacheModel.data = getData();

		String data = peProcessStateCacheModel.data;

		if ((data != null) && (data.length() == 0)) {
			peProcessStateCacheModel.data = null;
		}

		peProcessStateCacheModel.lastErrorCode = getLastErrorCode();

		peProcessStateCacheModel.lastErrorMsg = getLastErrorMsg();

		String lastErrorMsg = peProcessStateCacheModel.lastErrorMsg;

		if ((lastErrorMsg != null) && (lastErrorMsg.length() == 0)) {
			peProcessStateCacheModel.lastErrorMsg = null;
		}

		Date lastErrorDate = getLastErrorDate();

		if (lastErrorDate != null) {
			peProcessStateCacheModel.lastErrorDate = lastErrorDate.getTime();
		}
		else {
			peProcessStateCacheModel.lastErrorDate = Long.MIN_VALUE;
		}

		peProcessStateCacheModel.currentStatusTypeApprovers = getCurrentStatusTypeApprovers();

		String currentStatusTypeApprovers = peProcessStateCacheModel.currentStatusTypeApprovers;

		if ((currentStatusTypeApprovers != null) &&
				(currentStatusTypeApprovers.length() == 0)) {
			peProcessStateCacheModel.currentStatusTypeApprovers = null;
		}

		peProcessStateCacheModel.currentNodeSubmitters = getCurrentNodeSubmitters();

		String currentNodeSubmitters = peProcessStateCacheModel.currentNodeSubmitters;

		if ((currentNodeSubmitters != null) &&
				(currentNodeSubmitters.length() == 0)) {
			peProcessStateCacheModel.currentNodeSubmitters = null;
		}

		peProcessStateCacheModel.lock = getLock();

		Date lockDate = getLockDate();

		if (lockDate != null) {
			peProcessStateCacheModel.lockDate = lockDate.getTime();
		}
		else {
			peProcessStateCacheModel.lockDate = Long.MIN_VALUE;
		}

		peProcessStateCacheModel.userIdSupervisor = getUserIdSupervisor();

		peProcessStateCacheModel.userIdAgent = getUserIdAgent();

		peProcessStateCacheModel.closedStageId = getClosedStageId();

		Date closedDate = getClosedDate();

		if (closedDate != null) {
			peProcessStateCacheModel.closedDate = closedDate.getTime();
		}
		else {
			peProcessStateCacheModel.closedDate = Long.MIN_VALUE;
		}

		peProcessStateCacheModel.closedReasonCatId = getClosedReasonCatId();

		peProcessStateCacheModel.closedDescription = getClosedDescription();

		String closedDescription = peProcessStateCacheModel.closedDescription;

		if ((closedDescription != null) && (closedDescription.length() == 0)) {
			peProcessStateCacheModel.closedDescription = null;
		}

		peProcessStateCacheModel.convertedFromProcessStateId = getConvertedFromProcessStateId();

		peProcessStateCacheModel.convertedToProcessStateId = getConvertedToProcessStateId();

		peProcessStateCacheModel.activeStatus = getActiveStatus();

		peProcessStateCacheModel.amount = getAmount();

		String amount = peProcessStateCacheModel.amount;

		if ((amount != null) && (amount.length() == 0)) {
			peProcessStateCacheModel.amount = null;
		}

		peProcessStateCacheModel.sourceClassId = getSourceClassId();

		peProcessStateCacheModel.sourceEntityID = getSourceEntityID();

		return peProcessStateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(81);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", spPEProcessStateId=");
		sb.append(getSpPEProcessStateId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", spPEProcessId=");
		sb.append(getSpPEProcessId());
		sb.append(", entityClassId=");
		sb.append(getEntityClassId());
		sb.append(", entityId=");
		sb.append(getEntityId());
		sb.append(", userIdProcess=");
		sb.append(getUserIdProcess());
		sb.append(", userIdCreator=");
		sb.append(getUserIdCreator());
		sb.append(", statusTypeId=");
		sb.append(getStatusTypeId());
		sb.append(", spPEProcessStageId=");
		sb.append(getSpPEProcessStageId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", nodeId=");
		sb.append(getNodeId());
		sb.append(", nodeIdLastProcessed=");
		sb.append(getNodeIdLastProcessed());
		sb.append(", nodeIdLastDisplayed=");
		sb.append(getNodeIdLastDisplayed());
		sb.append(", nodeIdLastDataSubmitted=");
		sb.append(getNodeIdLastDataSubmitted());
		sb.append(", data=");
		sb.append(getData());
		sb.append(", lastErrorCode=");
		sb.append(getLastErrorCode());
		sb.append(", lastErrorMsg=");
		sb.append(getLastErrorMsg());
		sb.append(", lastErrorDate=");
		sb.append(getLastErrorDate());
		sb.append(", currentStatusTypeApprovers=");
		sb.append(getCurrentStatusTypeApprovers());
		sb.append(", currentNodeSubmitters=");
		sb.append(getCurrentNodeSubmitters());
		sb.append(", lock=");
		sb.append(getLock());
		sb.append(", lockDate=");
		sb.append(getLockDate());
		sb.append(", userIdSupervisor=");
		sb.append(getUserIdSupervisor());
		sb.append(", userIdAgent=");
		sb.append(getUserIdAgent());
		sb.append(", closedStageId=");
		sb.append(getClosedStageId());
		sb.append(", closedDate=");
		sb.append(getClosedDate());
		sb.append(", closedReasonCatId=");
		sb.append(getClosedReasonCatId());
		sb.append(", closedDescription=");
		sb.append(getClosedDescription());
		sb.append(", convertedFromProcessStateId=");
		sb.append(getConvertedFromProcessStateId());
		sb.append(", convertedToProcessStateId=");
		sb.append(getConvertedToProcessStateId());
		sb.append(", activeStatus=");
		sb.append(getActiveStatus());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", sourceClassId=");
		sb.append(getSourceClassId());
		sb.append(", sourceEntityID=");
		sb.append(getSourceEntityID());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(124);

		sb.append("<model><model-name>");
		sb.append(
			"com.sambaash.platform.srv.processbuilder.model.PEProcessState");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spPEProcessStateId</column-name><column-value><![CDATA[");
		sb.append(getSpPEProcessStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spPEProcessId</column-name><column-value><![CDATA[");
		sb.append(getSpPEProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityClassId</column-name><column-value><![CDATA[");
		sb.append(getEntityClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityId</column-name><column-value><![CDATA[");
		sb.append(getEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userIdProcess</column-name><column-value><![CDATA[");
		sb.append(getUserIdProcess());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userIdCreator</column-name><column-value><![CDATA[");
		sb.append(getUserIdCreator());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusTypeId</column-name><column-value><![CDATA[");
		sb.append(getStatusTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spPEProcessStageId</column-name><column-value><![CDATA[");
		sb.append(getSpPEProcessStageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nodeId</column-name><column-value><![CDATA[");
		sb.append(getNodeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nodeIdLastProcessed</column-name><column-value><![CDATA[");
		sb.append(getNodeIdLastProcessed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nodeIdLastDisplayed</column-name><column-value><![CDATA[");
		sb.append(getNodeIdLastDisplayed());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nodeIdLastDataSubmitted</column-name><column-value><![CDATA[");
		sb.append(getNodeIdLastDataSubmitted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>data</column-name><column-value><![CDATA[");
		sb.append(getData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastErrorCode</column-name><column-value><![CDATA[");
		sb.append(getLastErrorCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastErrorMsg</column-name><column-value><![CDATA[");
		sb.append(getLastErrorMsg());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastErrorDate</column-name><column-value><![CDATA[");
		sb.append(getLastErrorDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentStatusTypeApprovers</column-name><column-value><![CDATA[");
		sb.append(getCurrentStatusTypeApprovers());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currentNodeSubmitters</column-name><column-value><![CDATA[");
		sb.append(getCurrentNodeSubmitters());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lock</column-name><column-value><![CDATA[");
		sb.append(getLock());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lockDate</column-name><column-value><![CDATA[");
		sb.append(getLockDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userIdSupervisor</column-name><column-value><![CDATA[");
		sb.append(getUserIdSupervisor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userIdAgent</column-name><column-value><![CDATA[");
		sb.append(getUserIdAgent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>closedStageId</column-name><column-value><![CDATA[");
		sb.append(getClosedStageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>closedDate</column-name><column-value><![CDATA[");
		sb.append(getClosedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>closedReasonCatId</column-name><column-value><![CDATA[");
		sb.append(getClosedReasonCatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>closedDescription</column-name><column-value><![CDATA[");
		sb.append(getClosedDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>convertedFromProcessStateId</column-name><column-value><![CDATA[");
		sb.append(getConvertedFromProcessStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>convertedToProcessStateId</column-name><column-value><![CDATA[");
		sb.append(getConvertedToProcessStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activeStatus</column-name><column-value><![CDATA[");
		sb.append(getActiveStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sourceClassId</column-name><column-value><![CDATA[");
		sb.append(getSourceClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sourceEntityID</column-name><column-value><![CDATA[");
		sb.append(getSourceEntityID());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PEProcessState.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PEProcessState.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _spPEProcessStateId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _spPEProcessId;
	private long _originalSpPEProcessId;
	private boolean _setOriginalSpPEProcessId;
	private long _entityClassId;
	private long _originalEntityClassId;
	private boolean _setOriginalEntityClassId;
	private long _entityId;
	private long _originalEntityId;
	private boolean _setOriginalEntityId;
	private long _userIdProcess;
	private long _originalUserIdProcess;
	private boolean _setOriginalUserIdProcess;
	private long _userIdCreator;
	private long _statusTypeId;
	private long _spPEProcessStageId;
	private long _originalSpPEProcessStageId;
	private boolean _setOriginalSpPEProcessStageId;
	private String _status;
	private long _nodeId;
	private long _nodeIdLastProcessed;
	private long _nodeIdLastDisplayed;
	private long _nodeIdLastDataSubmitted;
	private String _data;
	private long _lastErrorCode;
	private String _lastErrorMsg;
	private Date _lastErrorDate;
	private String _currentStatusTypeApprovers;
	private String _currentNodeSubmitters;
	private int _lock;
	private Date _lockDate;
	private long _userIdSupervisor;
	private long _userIdAgent;
	private long _closedStageId;
	private Date _closedDate;
	private long _closedReasonCatId;
	private String _closedDescription;
	private long _convertedFromProcessStateId;
	private long _convertedToProcessStateId;
	private int _activeStatus;
	private int _originalActiveStatus;
	private boolean _setOriginalActiveStatus;
	private String _amount;
	private long _sourceClassId;
	private long _originalSourceClassId;
	private boolean _setOriginalSourceClassId;
	private long _sourceEntityID;
	private long _originalSourceEntityID;
	private boolean _setOriginalSourceEntityID;
	private long _columnBitmask;
	private PEProcessState _escapedModel;
}
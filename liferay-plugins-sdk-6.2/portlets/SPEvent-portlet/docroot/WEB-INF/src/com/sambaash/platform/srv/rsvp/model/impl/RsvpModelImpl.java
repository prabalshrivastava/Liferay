/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.rsvp.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.rsvp.model.Rsvp;
import com.sambaash.platform.srv.rsvp.model.RsvpModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Rsvp service. Represents a row in the &quot;SPRsvp&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.rsvp.model.RsvpModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RsvpImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see RsvpImpl
 * @see com.sambaash.platform.srv.rsvp.model.Rsvp
 * @see com.sambaash.platform.srv.rsvp.model.RsvpModel
 * @generated
 */
public class RsvpModelImpl extends BaseModelImpl<Rsvp> implements RsvpModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rsvp model instance should use the {@link com.sambaash.platform.srv.rsvp.model.Rsvp} interface instead.
	 */
	public static final String TABLE_NAME = "SPRsvp";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spRsvpId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "title", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "eventId", Types.BIGINT },
			{ "spAssetTypeId", Types.BIGINT },
			{ "status", Types.BOOLEAN },
			{ "rsvpUrl", Types.VARCHAR },
			{ "processing", Types.INTEGER },
			{ "price", Types.VARCHAR },
			{ "currency_", Types.VARCHAR },
			{ "tax", Types.VARCHAR },
			{ "accountId", Types.VARCHAR },
			{ "paymentFlag", Types.BOOLEAN },
			{ "registerFlag", Types.BOOLEAN },
			{ "ticketFlag", Types.BOOLEAN },
			{ "dynamicSectionName", Types.VARCHAR },
			{ "ccEmail", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SPRsvp (uuid_ VARCHAR(75) null,spRsvpId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,title VARCHAR(500) null,description VARCHAR(1000) null,eventId BIGINT(20),spAssetTypeId BIGINT(20),status BOOLEAN,rsvpUrl VARCHAR(75) null,processing INTEGER,price VARCHAR(75) null,currency_ VARCHAR(75) null,tax VARCHAR(75) null,accountId VARCHAR(75) null,paymentFlag BOOLEAN,registerFlag BOOLEAN,ticketFlag BOOLEAN,dynamicSectionName VARCHAR(75) null,ccEmail BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SPRsvp";
	public static final String ORDER_BY_JPQL = " ORDER BY rsvp.rsvpId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPRsvp.spRsvpId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.rsvp.model.Rsvp"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.rsvp.model.Rsvp"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.rsvp.model.Rsvp"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long EVENTID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long SPASSETTYPEID_COLUMN_BITMASK = 8L;
	public static long UUID_COLUMN_BITMASK = 16L;
	public static long RSVPID_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.rsvp.model.Rsvp"));

	public RsvpModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _rsvpId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRsvpId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _rsvpId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Rsvp.class;
	}

	@Override
	public String getModelClassName() {
		return Rsvp.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("rsvpId", getRsvpId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("title", getTitle());
		attributes.put("description", getDescription());
		attributes.put("eventId", getEventId());
		attributes.put("spAssetTypeId", getSpAssetTypeId());
		attributes.put("status", getStatus());
		attributes.put("rsvpUrl", getRsvpUrl());
		attributes.put("processing", getProcessing());
		attributes.put("price", getPrice());
		attributes.put("currency", getCurrency());
		attributes.put("tax", getTax());
		attributes.put("accountId", getAccountId());
		attributes.put("paymentFlag", getPaymentFlag());
		attributes.put("registerFlag", getRegisterFlag());
		attributes.put("ticketFlag", getTicketFlag());
		attributes.put("dynamicSectionName", getDynamicSectionName());
		attributes.put("ccEmail", getCcEmail());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long rsvpId = (Long)attributes.get("rsvpId");

		if (rsvpId != null) {
			setRsvpId(rsvpId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Long eventId = (Long)attributes.get("eventId");

		if (eventId != null) {
			setEventId(eventId);
		}

		Long spAssetTypeId = (Long)attributes.get("spAssetTypeId");

		if (spAssetTypeId != null) {
			setSpAssetTypeId(spAssetTypeId);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String rsvpUrl = (String)attributes.get("rsvpUrl");

		if (rsvpUrl != null) {
			setRsvpUrl(rsvpUrl);
		}

		Integer processing = (Integer)attributes.get("processing");

		if (processing != null) {
			setProcessing(processing);
		}

		String price = (String)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		String tax = (String)attributes.get("tax");

		if (tax != null) {
			setTax(tax);
		}

		String accountId = (String)attributes.get("accountId");

		if (accountId != null) {
			setAccountId(accountId);
		}

		Boolean paymentFlag = (Boolean)attributes.get("paymentFlag");

		if (paymentFlag != null) {
			setPaymentFlag(paymentFlag);
		}

		Boolean registerFlag = (Boolean)attributes.get("registerFlag");

		if (registerFlag != null) {
			setRegisterFlag(registerFlag);
		}

		Boolean ticketFlag = (Boolean)attributes.get("ticketFlag");

		if (ticketFlag != null) {
			setTicketFlag(ticketFlag);
		}

		String dynamicSectionName = (String)attributes.get("dynamicSectionName");

		if (dynamicSectionName != null) {
			setDynamicSectionName(dynamicSectionName);
		}

		Boolean ccEmail = (Boolean)attributes.get("ccEmail");

		if (ccEmail != null) {
			setCcEmail(ccEmail);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getRsvpId() {
		return _rsvpId;
	}

	@Override
	public void setRsvpId(long rsvpId) {
		_rsvpId = rsvpId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public long getEventId() {
		return _eventId;
	}

	@Override
	public void setEventId(long eventId) {
		_columnBitmask |= EVENTID_COLUMN_BITMASK;

		if (!_setOriginalEventId) {
			_setOriginalEventId = true;

			_originalEventId = _eventId;
		}

		_eventId = eventId;
	}

	public long getOriginalEventId() {
		return _originalEventId;
	}

	@Override
	public long getSpAssetTypeId() {
		return _spAssetTypeId;
	}

	@Override
	public void setSpAssetTypeId(long spAssetTypeId) {
		_columnBitmask |= SPASSETTYPEID_COLUMN_BITMASK;

		if (!_setOriginalSpAssetTypeId) {
			_setOriginalSpAssetTypeId = true;

			_originalSpAssetTypeId = _spAssetTypeId;
		}

		_spAssetTypeId = spAssetTypeId;
	}

	public long getOriginalSpAssetTypeId() {
		return _originalSpAssetTypeId;
	}

	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_status = status;
	}

	@Override
	public String getRsvpUrl() {
		if (_rsvpUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _rsvpUrl;
		}
	}

	@Override
	public void setRsvpUrl(String rsvpUrl) {
		_rsvpUrl = rsvpUrl;
	}

	@Override
	public int getProcessing() {
		return _processing;
	}

	@Override
	public void setProcessing(int processing) {
		_processing = processing;
	}

	@Override
	public String getPrice() {
		if (_price == null) {
			return StringPool.BLANK;
		}
		else {
			return _price;
		}
	}

	@Override
	public void setPrice(String price) {
		_price = price;
	}

	@Override
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	@Override
	public void setCurrency(String currency) {
		_currency = currency;
	}

	@Override
	public String getTax() {
		if (_tax == null) {
			return StringPool.BLANK;
		}
		else {
			return _tax;
		}
	}

	@Override
	public void setTax(String tax) {
		_tax = tax;
	}

	@Override
	public String getAccountId() {
		if (_accountId == null) {
			return StringPool.BLANK;
		}
		else {
			return _accountId;
		}
	}

	@Override
	public void setAccountId(String accountId) {
		_accountId = accountId;
	}

	@Override
	public boolean getPaymentFlag() {
		return _paymentFlag;
	}

	@Override
	public boolean isPaymentFlag() {
		return _paymentFlag;
	}

	@Override
	public void setPaymentFlag(boolean paymentFlag) {
		_paymentFlag = paymentFlag;
	}

	@Override
	public boolean getRegisterFlag() {
		return _registerFlag;
	}

	@Override
	public boolean isRegisterFlag() {
		return _registerFlag;
	}

	@Override
	public void setRegisterFlag(boolean registerFlag) {
		_registerFlag = registerFlag;
	}

	@Override
	public boolean getTicketFlag() {
		return _ticketFlag;
	}

	@Override
	public boolean isTicketFlag() {
		return _ticketFlag;
	}

	@Override
	public void setTicketFlag(boolean ticketFlag) {
		_ticketFlag = ticketFlag;
	}

	@Override
	public String getDynamicSectionName() {
		if (_dynamicSectionName == null) {
			return StringPool.BLANK;
		}
		else {
			return _dynamicSectionName;
		}
	}

	@Override
	public void setDynamicSectionName(String dynamicSectionName) {
		_dynamicSectionName = dynamicSectionName;
	}

	@Override
	public boolean getCcEmail() {
		return _ccEmail;
	}

	@Override
	public boolean isCcEmail() {
		return _ccEmail;
	}

	@Override
	public void setCcEmail(boolean ccEmail) {
		_ccEmail = ccEmail;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Rsvp.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Rsvp.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Rsvp toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Rsvp)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RsvpImpl rsvpImpl = new RsvpImpl();

		rsvpImpl.setUuid(getUuid());
		rsvpImpl.setRsvpId(getRsvpId());
		rsvpImpl.setGroupId(getGroupId());
		rsvpImpl.setCompanyId(getCompanyId());
		rsvpImpl.setUserId(getUserId());
		rsvpImpl.setUserName(getUserName());
		rsvpImpl.setCreateDate(getCreateDate());
		rsvpImpl.setModifiedDate(getModifiedDate());
		rsvpImpl.setTitle(getTitle());
		rsvpImpl.setDescription(getDescription());
		rsvpImpl.setEventId(getEventId());
		rsvpImpl.setSpAssetTypeId(getSpAssetTypeId());
		rsvpImpl.setStatus(getStatus());
		rsvpImpl.setRsvpUrl(getRsvpUrl());
		rsvpImpl.setProcessing(getProcessing());
		rsvpImpl.setPrice(getPrice());
		rsvpImpl.setCurrency(getCurrency());
		rsvpImpl.setTax(getTax());
		rsvpImpl.setAccountId(getAccountId());
		rsvpImpl.setPaymentFlag(getPaymentFlag());
		rsvpImpl.setRegisterFlag(getRegisterFlag());
		rsvpImpl.setTicketFlag(getTicketFlag());
		rsvpImpl.setDynamicSectionName(getDynamicSectionName());
		rsvpImpl.setCcEmail(getCcEmail());

		rsvpImpl.resetOriginalValues();

		return rsvpImpl;
	}

	@Override
	public int compareTo(Rsvp rsvp) {
		long primaryKey = rsvp.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Rsvp)) {
			return false;
		}

		Rsvp rsvp = (Rsvp)obj;

		long primaryKey = rsvp.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RsvpModelImpl rsvpModelImpl = this;

		rsvpModelImpl._originalUuid = rsvpModelImpl._uuid;

		rsvpModelImpl._originalGroupId = rsvpModelImpl._groupId;

		rsvpModelImpl._setOriginalGroupId = false;

		rsvpModelImpl._originalCompanyId = rsvpModelImpl._companyId;

		rsvpModelImpl._setOriginalCompanyId = false;

		rsvpModelImpl._originalEventId = rsvpModelImpl._eventId;

		rsvpModelImpl._setOriginalEventId = false;

		rsvpModelImpl._originalSpAssetTypeId = rsvpModelImpl._spAssetTypeId;

		rsvpModelImpl._setOriginalSpAssetTypeId = false;

		rsvpModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Rsvp> toCacheModel() {
		RsvpCacheModel rsvpCacheModel = new RsvpCacheModel();

		rsvpCacheModel.uuid = getUuid();

		String uuid = rsvpCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			rsvpCacheModel.uuid = null;
		}

		rsvpCacheModel.rsvpId = getRsvpId();

		rsvpCacheModel.groupId = getGroupId();

		rsvpCacheModel.companyId = getCompanyId();

		rsvpCacheModel.userId = getUserId();

		rsvpCacheModel.userName = getUserName();

		String userName = rsvpCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			rsvpCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			rsvpCacheModel.createDate = createDate.getTime();
		}
		else {
			rsvpCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			rsvpCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			rsvpCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		rsvpCacheModel.title = getTitle();

		String title = rsvpCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			rsvpCacheModel.title = null;
		}

		rsvpCacheModel.description = getDescription();

		String description = rsvpCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			rsvpCacheModel.description = null;
		}

		rsvpCacheModel.eventId = getEventId();

		rsvpCacheModel.spAssetTypeId = getSpAssetTypeId();

		rsvpCacheModel.status = getStatus();

		rsvpCacheModel.rsvpUrl = getRsvpUrl();

		String rsvpUrl = rsvpCacheModel.rsvpUrl;

		if ((rsvpUrl != null) && (rsvpUrl.length() == 0)) {
			rsvpCacheModel.rsvpUrl = null;
		}

		rsvpCacheModel.processing = getProcessing();

		rsvpCacheModel.price = getPrice();

		String price = rsvpCacheModel.price;

		if ((price != null) && (price.length() == 0)) {
			rsvpCacheModel.price = null;
		}

		rsvpCacheModel.currency = getCurrency();

		String currency = rsvpCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			rsvpCacheModel.currency = null;
		}

		rsvpCacheModel.tax = getTax();

		String tax = rsvpCacheModel.tax;

		if ((tax != null) && (tax.length() == 0)) {
			rsvpCacheModel.tax = null;
		}

		rsvpCacheModel.accountId = getAccountId();

		String accountId = rsvpCacheModel.accountId;

		if ((accountId != null) && (accountId.length() == 0)) {
			rsvpCacheModel.accountId = null;
		}

		rsvpCacheModel.paymentFlag = getPaymentFlag();

		rsvpCacheModel.registerFlag = getRegisterFlag();

		rsvpCacheModel.ticketFlag = getTicketFlag();

		rsvpCacheModel.dynamicSectionName = getDynamicSectionName();

		String dynamicSectionName = rsvpCacheModel.dynamicSectionName;

		if ((dynamicSectionName != null) && (dynamicSectionName.length() == 0)) {
			rsvpCacheModel.dynamicSectionName = null;
		}

		rsvpCacheModel.ccEmail = getCcEmail();

		return rsvpCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(49);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", rsvpId=");
		sb.append(getRsvpId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", eventId=");
		sb.append(getEventId());
		sb.append(", spAssetTypeId=");
		sb.append(getSpAssetTypeId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", rsvpUrl=");
		sb.append(getRsvpUrl());
		sb.append(", processing=");
		sb.append(getProcessing());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", tax=");
		sb.append(getTax());
		sb.append(", accountId=");
		sb.append(getAccountId());
		sb.append(", paymentFlag=");
		sb.append(getPaymentFlag());
		sb.append(", registerFlag=");
		sb.append(getRegisterFlag());
		sb.append(", ticketFlag=");
		sb.append(getTicketFlag());
		sb.append(", dynamicSectionName=");
		sb.append(getDynamicSectionName());
		sb.append(", ccEmail=");
		sb.append(getCcEmail());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(76);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.rsvp.model.Rsvp");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsvpId</column-name><column-value><![CDATA[");
		sb.append(getRsvpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventId</column-name><column-value><![CDATA[");
		sb.append(getEventId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spAssetTypeId</column-name><column-value><![CDATA[");
		sb.append(getSpAssetTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsvpUrl</column-name><column-value><![CDATA[");
		sb.append(getRsvpUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processing</column-name><column-value><![CDATA[");
		sb.append(getProcessing());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tax</column-name><column-value><![CDATA[");
		sb.append(getTax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accountId</column-name><column-value><![CDATA[");
		sb.append(getAccountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentFlag</column-name><column-value><![CDATA[");
		sb.append(getPaymentFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>registerFlag</column-name><column-value><![CDATA[");
		sb.append(getRegisterFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketFlag</column-name><column-value><![CDATA[");
		sb.append(getTicketFlag());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dynamicSectionName</column-name><column-value><![CDATA[");
		sb.append(getDynamicSectionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ccEmail</column-name><column-value><![CDATA[");
		sb.append(getCcEmail());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Rsvp.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Rsvp.class };
	private String _uuid;
	private String _originalUuid;
	private long _rsvpId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _title;
	private String _description;
	private long _eventId;
	private long _originalEventId;
	private boolean _setOriginalEventId;
	private long _spAssetTypeId;
	private long _originalSpAssetTypeId;
	private boolean _setOriginalSpAssetTypeId;
	private boolean _status;
	private String _rsvpUrl;
	private int _processing;
	private String _price;
	private String _currency;
	private String _tax;
	private String _accountId;
	private boolean _paymentFlag;
	private boolean _registerFlag;
	private boolean _ticketFlag;
	private String _dynamicSectionName;
	private boolean _ccEmail;
	private long _columnBitmask;
	private Rsvp _escapedModel;
}
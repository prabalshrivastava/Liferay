/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.mail.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.mail.model.SPMailUnsubscribe;
import com.sambaash.platform.srv.mail.model.SPMailUnsubscribeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPMailUnsubscribe service. Represents a row in the &quot;SPMailUnsubscribe&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.mail.model.SPMailUnsubscribeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPMailUnsubscribeImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see SPMailUnsubscribeImpl
 * @see com.sambaash.platform.srv.mail.model.SPMailUnsubscribe
 * @see com.sambaash.platform.srv.mail.model.SPMailUnsubscribeModel
 * @generated
 */
public class SPMailUnsubscribeModelImpl extends BaseModelImpl<SPMailUnsubscribe>
	implements SPMailUnsubscribeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p mail unsubscribe model instance should use the {@link com.sambaash.platform.srv.mail.model.SPMailUnsubscribe} interface instead.
	 */
	public static final String TABLE_NAME = "SPMailUnsubscribe";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spMailUnsubscribeId", Types.BIGINT },
			{ "categoryId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "emailAddress", Types.VARCHAR },
			{ "unsubscribeDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table SPMailUnsubscribe (spMailUnsubscribeId BIGINT(20) not null primary key,categoryId BIGINT(20),userId BIGINT(20),emailAddress VARCHAR(75) null,unsubscribeDate DATETIME null)";
	public static final String TABLE_SQL_DROP = "drop table SPMailUnsubscribe";
	public static final String ORDER_BY_JPQL = " ORDER BY spMailUnsubscribe.spMailUnsubscribeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPMailUnsubscribe.spMailUnsubscribeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.mail.model.SPMailUnsubscribe"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.mail.model.SPMailUnsubscribe"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.mail.model.SPMailUnsubscribe"),
			true);
	public static long CATEGORYID_COLUMN_BITMASK = 1L;
	public static long EMAILADDRESS_COLUMN_BITMASK = 2L;
	public static long USERID_COLUMN_BITMASK = 4L;
	public static long SPMAILUNSUBSCRIBEID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.mail.model.SPMailUnsubscribe"));

	public SPMailUnsubscribeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spMailUnsubscribeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpMailUnsubscribeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spMailUnsubscribeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPMailUnsubscribe.class;
	}

	@Override
	public String getModelClassName() {
		return SPMailUnsubscribe.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spMailUnsubscribeId", getSpMailUnsubscribeId());
		attributes.put("categoryId", getCategoryId());
		attributes.put("userId", getUserId());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("unsubscribeDate", getUnsubscribeDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spMailUnsubscribeId = (Long)attributes.get("spMailUnsubscribeId");

		if (spMailUnsubscribeId != null) {
			setSpMailUnsubscribeId(spMailUnsubscribeId);
		}

		Long categoryId = (Long)attributes.get("categoryId");

		if (categoryId != null) {
			setCategoryId(categoryId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		Date unsubscribeDate = (Date)attributes.get("unsubscribeDate");

		if (unsubscribeDate != null) {
			setUnsubscribeDate(unsubscribeDate);
		}
	}

	@Override
	public long getSpMailUnsubscribeId() {
		return _spMailUnsubscribeId;
	}

	@Override
	public void setSpMailUnsubscribeId(long spMailUnsubscribeId) {
		_spMailUnsubscribeId = spMailUnsubscribeId;
	}

	@Override
	public long getCategoryId() {
		return _categoryId;
	}

	@Override
	public void setCategoryId(long categoryId) {
		_columnBitmask |= CATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalCategoryId) {
			_setOriginalCategoryId = true;

			_originalCategoryId = _categoryId;
		}

		_categoryId = categoryId;
	}

	public long getOriginalCategoryId() {
		return _originalCategoryId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_columnBitmask |= EMAILADDRESS_COLUMN_BITMASK;

		if (_originalEmailAddress == null) {
			_originalEmailAddress = _emailAddress;
		}

		_emailAddress = emailAddress;
	}

	public String getOriginalEmailAddress() {
		return GetterUtil.getString(_originalEmailAddress);
	}

	@Override
	public Date getUnsubscribeDate() {
		return _unsubscribeDate;
	}

	@Override
	public void setUnsubscribeDate(Date unsubscribeDate) {
		_unsubscribeDate = unsubscribeDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SPMailUnsubscribe.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPMailUnsubscribe toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPMailUnsubscribe)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPMailUnsubscribeImpl spMailUnsubscribeImpl = new SPMailUnsubscribeImpl();

		spMailUnsubscribeImpl.setSpMailUnsubscribeId(getSpMailUnsubscribeId());
		spMailUnsubscribeImpl.setCategoryId(getCategoryId());
		spMailUnsubscribeImpl.setUserId(getUserId());
		spMailUnsubscribeImpl.setEmailAddress(getEmailAddress());
		spMailUnsubscribeImpl.setUnsubscribeDate(getUnsubscribeDate());

		spMailUnsubscribeImpl.resetOriginalValues();

		return spMailUnsubscribeImpl;
	}

	@Override
	public int compareTo(SPMailUnsubscribe spMailUnsubscribe) {
		long primaryKey = spMailUnsubscribe.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPMailUnsubscribe)) {
			return false;
		}

		SPMailUnsubscribe spMailUnsubscribe = (SPMailUnsubscribe)obj;

		long primaryKey = spMailUnsubscribe.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPMailUnsubscribeModelImpl spMailUnsubscribeModelImpl = this;

		spMailUnsubscribeModelImpl._originalCategoryId = spMailUnsubscribeModelImpl._categoryId;

		spMailUnsubscribeModelImpl._setOriginalCategoryId = false;

		spMailUnsubscribeModelImpl._originalUserId = spMailUnsubscribeModelImpl._userId;

		spMailUnsubscribeModelImpl._setOriginalUserId = false;

		spMailUnsubscribeModelImpl._originalEmailAddress = spMailUnsubscribeModelImpl._emailAddress;

		spMailUnsubscribeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPMailUnsubscribe> toCacheModel() {
		SPMailUnsubscribeCacheModel spMailUnsubscribeCacheModel = new SPMailUnsubscribeCacheModel();

		spMailUnsubscribeCacheModel.spMailUnsubscribeId = getSpMailUnsubscribeId();

		spMailUnsubscribeCacheModel.categoryId = getCategoryId();

		spMailUnsubscribeCacheModel.userId = getUserId();

		spMailUnsubscribeCacheModel.emailAddress = getEmailAddress();

		String emailAddress = spMailUnsubscribeCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			spMailUnsubscribeCacheModel.emailAddress = null;
		}

		Date unsubscribeDate = getUnsubscribeDate();

		if (unsubscribeDate != null) {
			spMailUnsubscribeCacheModel.unsubscribeDate = unsubscribeDate.getTime();
		}
		else {
			spMailUnsubscribeCacheModel.unsubscribeDate = Long.MIN_VALUE;
		}

		return spMailUnsubscribeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{spMailUnsubscribeId=");
		sb.append(getSpMailUnsubscribeId());
		sb.append(", categoryId=");
		sb.append(getCategoryId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", unsubscribeDate=");
		sb.append(getUnsubscribeDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.mail.model.SPMailUnsubscribe");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spMailUnsubscribeId</column-name><column-value><![CDATA[");
		sb.append(getSpMailUnsubscribeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId</column-name><column-value><![CDATA[");
		sb.append(getCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>unsubscribeDate</column-name><column-value><![CDATA[");
		sb.append(getUnsubscribeDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPMailUnsubscribe.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPMailUnsubscribe.class
		};
	private long _spMailUnsubscribeId;
	private long _categoryId;
	private long _originalCategoryId;
	private boolean _setOriginalCategoryId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _emailAddress;
	private String _originalEmailAddress;
	private Date _unsubscribeDate;
	private long _columnBitmask;
	private SPMailUnsubscribe _escapedModel;
}
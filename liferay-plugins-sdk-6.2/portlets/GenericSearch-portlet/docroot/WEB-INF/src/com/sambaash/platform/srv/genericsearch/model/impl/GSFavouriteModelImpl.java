/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.genericsearch.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.genericsearch.model.GSFavourite;
import com.sambaash.platform.srv.genericsearch.model.GSFavouriteModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GSFavourite service. Represents a row in the &quot;SPGSFavourite&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.genericsearch.model.GSFavouriteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GSFavouriteImpl}.
 * </p>
 *
 * @author nareshchebolu
 * @see GSFavouriteImpl
 * @see com.sambaash.platform.srv.genericsearch.model.GSFavourite
 * @see com.sambaash.platform.srv.genericsearch.model.GSFavouriteModel
 * @generated
 */
public class GSFavouriteModelImpl extends BaseModelImpl<GSFavourite>
	implements GSFavouriteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g s favourite model instance should use the {@link com.sambaash.platform.srv.genericsearch.model.GSFavourite} interface instead.
	 */
	public static final String TABLE_NAME = "SPGSFavourite";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SPGSFavouriteId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "createdBy", Types.BIGINT },
			{ "layoutId", Types.BIGINT },
			{ "portletInstanceId", Types.VARCHAR },
			{ "config", Types.CLOB },
			{ "permissionType", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table SPGSFavourite (SPGSFavouriteId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,name VARCHAR(75) null,createdBy BIGINT(20),layoutId BIGINT(20),portletInstanceId VARCHAR(75) null,config LONGTEXT null,permissionType INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table SPGSFavourite";
	public static final String ORDER_BY_JPQL = " ORDER BY gsFavourite.name ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPGSFavourite.name ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.genericsearch.model.GSFavourite"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.genericsearch.model.GSFavourite"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.genericsearch.model.GSFavourite"),
			true);
	public static long CREATEDBY_COLUMN_BITMASK = 1L;
	public static long LAYOUTID_COLUMN_BITMASK = 2L;
	public static long PERMISSIONTYPE_COLUMN_BITMASK = 4L;
	public static long NAME_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.genericsearch.model.GSFavourite"));

	public GSFavouriteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _SPGSFavouriteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSPGSFavouriteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _SPGSFavouriteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GSFavourite.class;
	}

	@Override
	public String getModelClassName() {
		return GSFavourite.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("SPGSFavouriteId", getSPGSFavouriteId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("layoutId", getLayoutId());
		attributes.put("portletInstanceId", getPortletInstanceId());
		attributes.put("config", getConfig());
		attributes.put("permissionType", getPermissionType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long SPGSFavouriteId = (Long)attributes.get("SPGSFavouriteId");

		if (SPGSFavouriteId != null) {
			setSPGSFavouriteId(SPGSFavouriteId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Long layoutId = (Long)attributes.get("layoutId");

		if (layoutId != null) {
			setLayoutId(layoutId);
		}

		String portletInstanceId = (String)attributes.get("portletInstanceId");

		if (portletInstanceId != null) {
			setPortletInstanceId(portletInstanceId);
		}

		String config = (String)attributes.get("config");

		if (config != null) {
			setConfig(config);
		}

		Integer permissionType = (Integer)attributes.get("permissionType");

		if (permissionType != null) {
			setPermissionType(permissionType);
		}
	}

	@Override
	public long getSPGSFavouriteId() {
		return _SPGSFavouriteId;
	}

	@Override
	public void setSPGSFavouriteId(long SPGSFavouriteId) {
		_SPGSFavouriteId = SPGSFavouriteId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_columnBitmask = -1L;

		_name = name;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_columnBitmask |= CREATEDBY_COLUMN_BITMASK;

		if (!_setOriginalCreatedBy) {
			_setOriginalCreatedBy = true;

			_originalCreatedBy = _createdBy;
		}

		_createdBy = createdBy;
	}

	public long getOriginalCreatedBy() {
		return _originalCreatedBy;
	}

	@Override
	public long getLayoutId() {
		return _layoutId;
	}

	@Override
	public void setLayoutId(long layoutId) {
		_columnBitmask |= LAYOUTID_COLUMN_BITMASK;

		if (!_setOriginalLayoutId) {
			_setOriginalLayoutId = true;

			_originalLayoutId = _layoutId;
		}

		_layoutId = layoutId;
	}

	public long getOriginalLayoutId() {
		return _originalLayoutId;
	}

	@Override
	public String getPortletInstanceId() {
		if (_portletInstanceId == null) {
			return StringPool.BLANK;
		}
		else {
			return _portletInstanceId;
		}
	}

	@Override
	public void setPortletInstanceId(String portletInstanceId) {
		_portletInstanceId = portletInstanceId;
	}

	@Override
	public String getConfig() {
		if (_config == null) {
			return StringPool.BLANK;
		}
		else {
			return _config;
		}
	}

	@Override
	public void setConfig(String config) {
		_config = config;
	}

	@Override
	public int getPermissionType() {
		return _permissionType;
	}

	@Override
	public void setPermissionType(int permissionType) {
		_columnBitmask |= PERMISSIONTYPE_COLUMN_BITMASK;

		if (!_setOriginalPermissionType) {
			_setOriginalPermissionType = true;

			_originalPermissionType = _permissionType;
		}

		_permissionType = permissionType;
	}

	public int getOriginalPermissionType() {
		return _originalPermissionType;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			GSFavourite.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GSFavourite toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GSFavourite)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GSFavouriteImpl gsFavouriteImpl = new GSFavouriteImpl();

		gsFavouriteImpl.setSPGSFavouriteId(getSPGSFavouriteId());
		gsFavouriteImpl.setGroupId(getGroupId());
		gsFavouriteImpl.setCompanyId(getCompanyId());
		gsFavouriteImpl.setUserId(getUserId());
		gsFavouriteImpl.setUserName(getUserName());
		gsFavouriteImpl.setCreateDate(getCreateDate());
		gsFavouriteImpl.setModifiedDate(getModifiedDate());
		gsFavouriteImpl.setName(getName());
		gsFavouriteImpl.setCreatedBy(getCreatedBy());
		gsFavouriteImpl.setLayoutId(getLayoutId());
		gsFavouriteImpl.setPortletInstanceId(getPortletInstanceId());
		gsFavouriteImpl.setConfig(getConfig());
		gsFavouriteImpl.setPermissionType(getPermissionType());

		gsFavouriteImpl.resetOriginalValues();

		return gsFavouriteImpl;
	}

	@Override
	public int compareTo(GSFavourite gsFavourite) {
		int value = 0;

		value = getName().compareTo(gsFavourite.getName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GSFavourite)) {
			return false;
		}

		GSFavourite gsFavourite = (GSFavourite)obj;

		long primaryKey = gsFavourite.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		GSFavouriteModelImpl gsFavouriteModelImpl = this;

		gsFavouriteModelImpl._originalCreatedBy = gsFavouriteModelImpl._createdBy;

		gsFavouriteModelImpl._setOriginalCreatedBy = false;

		gsFavouriteModelImpl._originalLayoutId = gsFavouriteModelImpl._layoutId;

		gsFavouriteModelImpl._setOriginalLayoutId = false;

		gsFavouriteModelImpl._originalPermissionType = gsFavouriteModelImpl._permissionType;

		gsFavouriteModelImpl._setOriginalPermissionType = false;

		gsFavouriteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GSFavourite> toCacheModel() {
		GSFavouriteCacheModel gsFavouriteCacheModel = new GSFavouriteCacheModel();

		gsFavouriteCacheModel.SPGSFavouriteId = getSPGSFavouriteId();

		gsFavouriteCacheModel.groupId = getGroupId();

		gsFavouriteCacheModel.companyId = getCompanyId();

		gsFavouriteCacheModel.userId = getUserId();

		gsFavouriteCacheModel.userName = getUserName();

		String userName = gsFavouriteCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			gsFavouriteCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			gsFavouriteCacheModel.createDate = createDate.getTime();
		}
		else {
			gsFavouriteCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			gsFavouriteCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			gsFavouriteCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		gsFavouriteCacheModel.name = getName();

		String name = gsFavouriteCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			gsFavouriteCacheModel.name = null;
		}

		gsFavouriteCacheModel.createdBy = getCreatedBy();

		gsFavouriteCacheModel.layoutId = getLayoutId();

		gsFavouriteCacheModel.portletInstanceId = getPortletInstanceId();

		String portletInstanceId = gsFavouriteCacheModel.portletInstanceId;

		if ((portletInstanceId != null) && (portletInstanceId.length() == 0)) {
			gsFavouriteCacheModel.portletInstanceId = null;
		}

		gsFavouriteCacheModel.config = getConfig();

		String config = gsFavouriteCacheModel.config;

		if ((config != null) && (config.length() == 0)) {
			gsFavouriteCacheModel.config = null;
		}

		gsFavouriteCacheModel.permissionType = getPermissionType();

		return gsFavouriteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{SPGSFavouriteId=");
		sb.append(getSPGSFavouriteId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", layoutId=");
		sb.append(getLayoutId());
		sb.append(", portletInstanceId=");
		sb.append(getPortletInstanceId());
		sb.append(", config=");
		sb.append(getConfig());
		sb.append(", permissionType=");
		sb.append(getPermissionType());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.genericsearch.model.GSFavourite");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>SPGSFavouriteId</column-name><column-value><![CDATA[");
		sb.append(getSPGSFavouriteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>layoutId</column-name><column-value><![CDATA[");
		sb.append(getLayoutId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>portletInstanceId</column-name><column-value><![CDATA[");
		sb.append(getPortletInstanceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>config</column-name><column-value><![CDATA[");
		sb.append(getConfig());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>permissionType</column-name><column-value><![CDATA[");
		sb.append(getPermissionType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GSFavourite.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GSFavourite.class
		};
	private long _SPGSFavouriteId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private long _createdBy;
	private long _originalCreatedBy;
	private boolean _setOriginalCreatedBy;
	private long _layoutId;
	private long _originalLayoutId;
	private boolean _setOriginalLayoutId;
	private String _portletInstanceId;
	private String _config;
	private int _permissionType;
	private int _originalPermissionType;
	private boolean _setOriginalPermissionType;
	private long _columnBitmask;
	private GSFavourite _escapedModel;
}
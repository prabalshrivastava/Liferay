/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spdashboard.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spdashboard.model.SPAnalyticsConfig;
import com.sambaash.platform.srv.spdashboard.model.SPAnalyticsConfigModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPAnalyticsConfig service. Represents a row in the &quot;SPAnalyticsConfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spdashboard.model.SPAnalyticsConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPAnalyticsConfigImpl}.
 * </p>
 *
 * @author pradeep
 * @see SPAnalyticsConfigImpl
 * @see com.sambaash.platform.srv.spdashboard.model.SPAnalyticsConfig
 * @see com.sambaash.platform.srv.spdashboard.model.SPAnalyticsConfigModel
 * @generated
 */
public class SPAnalyticsConfigModelImpl extends BaseModelImpl<SPAnalyticsConfig>
	implements SPAnalyticsConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p analytics config model instance should use the {@link com.sambaash.platform.srv.spdashboard.model.SPAnalyticsConfig} interface instead.
	 */
	public static final String TABLE_NAME = "SPAnalyticsConfig";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spAnalyticsConfigId", Types.BIGINT },
			{ "name", Types.VARCHAR },
			{ "config", Types.VARCHAR },
			{ "type_", Types.INTEGER },
			{ "query", Types.VARCHAR },
			{ "warId", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SPAnalyticsConfig (spAnalyticsConfigId BIGINT(20) not null primary key,name VARCHAR(75) null,config LONGTEXT null,type_ INTEGER,query LONGTEXT null,warId VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SPAnalyticsConfig";
	public static final String ORDER_BY_JPQL = " ORDER BY spAnalyticsConfig.spAnalyticsConfigId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPAnalyticsConfig.spAnalyticsConfigId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spdashboard.model.SPAnalyticsConfig"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spdashboard.model.SPAnalyticsConfig"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spdashboard.model.SPAnalyticsConfig"),
			true);
	public static long TYPE_COLUMN_BITMASK = 1L;
	public static long WARID_COLUMN_BITMASK = 2L;
	public static long SPANALYTICSCONFIGID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spdashboard.model.SPAnalyticsConfig"));

	public SPAnalyticsConfigModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spAnalyticsConfigId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpAnalyticsConfigId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spAnalyticsConfigId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPAnalyticsConfig.class;
	}

	@Override
	public String getModelClassName() {
		return SPAnalyticsConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spAnalyticsConfigId", getSpAnalyticsConfigId());
		attributes.put("name", getName());
		attributes.put("config", getConfig());
		attributes.put("type", getType());
		attributes.put("query", getQuery());
		attributes.put("warId", getWarId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spAnalyticsConfigId = (Long)attributes.get("spAnalyticsConfigId");

		if (spAnalyticsConfigId != null) {
			setSpAnalyticsConfigId(spAnalyticsConfigId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String config = (String)attributes.get("config");

		if (config != null) {
			setConfig(config);
		}

		Integer type = (Integer)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String query = (String)attributes.get("query");

		if (query != null) {
			setQuery(query);
		}

		String warId = (String)attributes.get("warId");

		if (warId != null) {
			setWarId(warId);
		}
	}

	@Override
	public long getSpAnalyticsConfigId() {
		return _spAnalyticsConfigId;
	}

	@Override
	public void setSpAnalyticsConfigId(long spAnalyticsConfigId) {
		_spAnalyticsConfigId = spAnalyticsConfigId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getConfig() {
		if (_config == null) {
			return StringPool.BLANK;
		}
		else {
			return _config;
		}
	}

	@Override
	public void setConfig(String config) {
		_config = config;
	}

	@Override
	public int getType() {
		return _type;
	}

	@Override
	public void setType(int type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (!_setOriginalType) {
			_setOriginalType = true;

			_originalType = _type;
		}

		_type = type;
	}

	public int getOriginalType() {
		return _originalType;
	}

	@Override
	public String getQuery() {
		if (_query == null) {
			return StringPool.BLANK;
		}
		else {
			return _query;
		}
	}

	@Override
	public void setQuery(String query) {
		_query = query;
	}

	@Override
	public String getWarId() {
		if (_warId == null) {
			return StringPool.BLANK;
		}
		else {
			return _warId;
		}
	}

	@Override
	public void setWarId(String warId) {
		_columnBitmask |= WARID_COLUMN_BITMASK;

		if (_originalWarId == null) {
			_originalWarId = _warId;
		}

		_warId = warId;
	}

	public String getOriginalWarId() {
		return GetterUtil.getString(_originalWarId);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SPAnalyticsConfig.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPAnalyticsConfig toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPAnalyticsConfig)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPAnalyticsConfigImpl spAnalyticsConfigImpl = new SPAnalyticsConfigImpl();

		spAnalyticsConfigImpl.setSpAnalyticsConfigId(getSpAnalyticsConfigId());
		spAnalyticsConfigImpl.setName(getName());
		spAnalyticsConfigImpl.setConfig(getConfig());
		spAnalyticsConfigImpl.setType(getType());
		spAnalyticsConfigImpl.setQuery(getQuery());
		spAnalyticsConfigImpl.setWarId(getWarId());

		spAnalyticsConfigImpl.resetOriginalValues();

		return spAnalyticsConfigImpl;
	}

	@Override
	public int compareTo(SPAnalyticsConfig spAnalyticsConfig) {
		long primaryKey = spAnalyticsConfig.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPAnalyticsConfig)) {
			return false;
		}

		SPAnalyticsConfig spAnalyticsConfig = (SPAnalyticsConfig)obj;

		long primaryKey = spAnalyticsConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPAnalyticsConfigModelImpl spAnalyticsConfigModelImpl = this;

		spAnalyticsConfigModelImpl._originalType = spAnalyticsConfigModelImpl._type;

		spAnalyticsConfigModelImpl._setOriginalType = false;

		spAnalyticsConfigModelImpl._originalWarId = spAnalyticsConfigModelImpl._warId;

		spAnalyticsConfigModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPAnalyticsConfig> toCacheModel() {
		SPAnalyticsConfigCacheModel spAnalyticsConfigCacheModel = new SPAnalyticsConfigCacheModel();

		spAnalyticsConfigCacheModel.spAnalyticsConfigId = getSpAnalyticsConfigId();

		spAnalyticsConfigCacheModel.name = getName();

		String name = spAnalyticsConfigCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			spAnalyticsConfigCacheModel.name = null;
		}

		spAnalyticsConfigCacheModel.config = getConfig();

		String config = spAnalyticsConfigCacheModel.config;

		if ((config != null) && (config.length() == 0)) {
			spAnalyticsConfigCacheModel.config = null;
		}

		spAnalyticsConfigCacheModel.type = getType();

		spAnalyticsConfigCacheModel.query = getQuery();

		String query = spAnalyticsConfigCacheModel.query;

		if ((query != null) && (query.length() == 0)) {
			spAnalyticsConfigCacheModel.query = null;
		}

		spAnalyticsConfigCacheModel.warId = getWarId();

		String warId = spAnalyticsConfigCacheModel.warId;

		if ((warId != null) && (warId.length() == 0)) {
			spAnalyticsConfigCacheModel.warId = null;
		}

		return spAnalyticsConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{spAnalyticsConfigId=");
		sb.append(getSpAnalyticsConfigId());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", config=");
		sb.append(getConfig());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", query=");
		sb.append(getQuery());
		sb.append(", warId=");
		sb.append(getWarId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append(
			"com.sambaash.platform.srv.spdashboard.model.SPAnalyticsConfig");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spAnalyticsConfigId</column-name><column-value><![CDATA[");
		sb.append(getSpAnalyticsConfigId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>config</column-name><column-value><![CDATA[");
		sb.append(getConfig());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>query</column-name><column-value><![CDATA[");
		sb.append(getQuery());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>warId</column-name><column-value><![CDATA[");
		sb.append(getWarId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPAnalyticsConfig.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPAnalyticsConfig.class
		};
	private long _spAnalyticsConfigId;
	private String _name;
	private String _config;
	private int _type;
	private int _originalType;
	private boolean _setOriginalType;
	private String _query;
	private String _warId;
	private String _originalWarId;
	private long _columnBitmask;
	private SPAnalyticsConfig _escapedModel;
}
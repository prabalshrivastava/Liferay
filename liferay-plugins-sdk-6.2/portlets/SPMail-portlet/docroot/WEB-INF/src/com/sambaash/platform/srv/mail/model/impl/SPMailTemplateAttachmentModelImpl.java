/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.mail.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.mail.model.SPMailTemplateAttachment;
import com.sambaash.platform.srv.mail.model.SPMailTemplateAttachmentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPMailTemplateAttachment service. Represents a row in the &quot;SPMailTemplateAttachment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.mail.model.SPMailTemplateAttachmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPMailTemplateAttachmentImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see SPMailTemplateAttachmentImpl
 * @see com.sambaash.platform.srv.mail.model.SPMailTemplateAttachment
 * @see com.sambaash.platform.srv.mail.model.SPMailTemplateAttachmentModel
 * @generated
 */
public class SPMailTemplateAttachmentModelImpl extends BaseModelImpl<SPMailTemplateAttachment>
	implements SPMailTemplateAttachmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p mail template attachment model instance should use the {@link com.sambaash.platform.srv.mail.model.SPMailTemplateAttachment} interface instead.
	 */
	public static final String TABLE_NAME = "SPMailTemplateAttachment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spRsvpTemplateId", Types.BIGINT },
			{ "templateId", Types.BIGINT },
			{ "rsvpId", Types.BIGINT },
			{ "fileEntryId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPMailTemplateAttachment (spRsvpTemplateId BIGINT(20) not null primary key,templateId BIGINT(20),rsvpId BIGINT(20),fileEntryId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPMailTemplateAttachment";
	public static final String ORDER_BY_JPQL = " ORDER BY spMailTemplateAttachment.spTemplateAttachmentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPMailTemplateAttachment.spRsvpTemplateId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.mail.model.SPMailTemplateAttachment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.mail.model.SPMailTemplateAttachment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.mail.model.SPMailTemplateAttachment"),
			true);
	public static long FILEENTRYID_COLUMN_BITMASK = 1L;
	public static long TEMPLATEID_COLUMN_BITMASK = 2L;
	public static long SPTEMPLATEATTACHMENTID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.mail.model.SPMailTemplateAttachment"));

	public SPMailTemplateAttachmentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spTemplateAttachmentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpTemplateAttachmentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spTemplateAttachmentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPMailTemplateAttachment.class;
	}

	@Override
	public String getModelClassName() {
		return SPMailTemplateAttachment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spTemplateAttachmentId", getSpTemplateAttachmentId());
		attributes.put("templateId", getTemplateId());
		attributes.put("rsvpId", getRsvpId());
		attributes.put("fileEntryId", getFileEntryId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spTemplateAttachmentId = (Long)attributes.get(
				"spTemplateAttachmentId");

		if (spTemplateAttachmentId != null) {
			setSpTemplateAttachmentId(spTemplateAttachmentId);
		}

		Long templateId = (Long)attributes.get("templateId");

		if (templateId != null) {
			setTemplateId(templateId);
		}

		Long rsvpId = (Long)attributes.get("rsvpId");

		if (rsvpId != null) {
			setRsvpId(rsvpId);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}
	}

	@Override
	public long getSpTemplateAttachmentId() {
		return _spTemplateAttachmentId;
	}

	@Override
	public void setSpTemplateAttachmentId(long spTemplateAttachmentId) {
		_spTemplateAttachmentId = spTemplateAttachmentId;
	}

	@Override
	public long getTemplateId() {
		return _templateId;
	}

	@Override
	public void setTemplateId(long templateId) {
		_columnBitmask |= TEMPLATEID_COLUMN_BITMASK;

		if (!_setOriginalTemplateId) {
			_setOriginalTemplateId = true;

			_originalTemplateId = _templateId;
		}

		_templateId = templateId;
	}

	public long getOriginalTemplateId() {
		return _originalTemplateId;
	}

	@Override
	public long getRsvpId() {
		return _rsvpId;
	}

	@Override
	public void setRsvpId(long rsvpId) {
		_rsvpId = rsvpId;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_columnBitmask |= FILEENTRYID_COLUMN_BITMASK;

		if (!_setOriginalFileEntryId) {
			_setOriginalFileEntryId = true;

			_originalFileEntryId = _fileEntryId;
		}

		_fileEntryId = fileEntryId;
	}

	public long getOriginalFileEntryId() {
		return _originalFileEntryId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SPMailTemplateAttachment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPMailTemplateAttachment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPMailTemplateAttachment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPMailTemplateAttachmentImpl spMailTemplateAttachmentImpl = new SPMailTemplateAttachmentImpl();

		spMailTemplateAttachmentImpl.setSpTemplateAttachmentId(getSpTemplateAttachmentId());
		spMailTemplateAttachmentImpl.setTemplateId(getTemplateId());
		spMailTemplateAttachmentImpl.setRsvpId(getRsvpId());
		spMailTemplateAttachmentImpl.setFileEntryId(getFileEntryId());

		spMailTemplateAttachmentImpl.resetOriginalValues();

		return spMailTemplateAttachmentImpl;
	}

	@Override
	public int compareTo(SPMailTemplateAttachment spMailTemplateAttachment) {
		long primaryKey = spMailTemplateAttachment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPMailTemplateAttachment)) {
			return false;
		}

		SPMailTemplateAttachment spMailTemplateAttachment = (SPMailTemplateAttachment)obj;

		long primaryKey = spMailTemplateAttachment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPMailTemplateAttachmentModelImpl spMailTemplateAttachmentModelImpl = this;

		spMailTemplateAttachmentModelImpl._originalTemplateId = spMailTemplateAttachmentModelImpl._templateId;

		spMailTemplateAttachmentModelImpl._setOriginalTemplateId = false;

		spMailTemplateAttachmentModelImpl._originalFileEntryId = spMailTemplateAttachmentModelImpl._fileEntryId;

		spMailTemplateAttachmentModelImpl._setOriginalFileEntryId = false;

		spMailTemplateAttachmentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPMailTemplateAttachment> toCacheModel() {
		SPMailTemplateAttachmentCacheModel spMailTemplateAttachmentCacheModel = new SPMailTemplateAttachmentCacheModel();

		spMailTemplateAttachmentCacheModel.spTemplateAttachmentId = getSpTemplateAttachmentId();

		spMailTemplateAttachmentCacheModel.templateId = getTemplateId();

		spMailTemplateAttachmentCacheModel.rsvpId = getRsvpId();

		spMailTemplateAttachmentCacheModel.fileEntryId = getFileEntryId();

		return spMailTemplateAttachmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{spTemplateAttachmentId=");
		sb.append(getSpTemplateAttachmentId());
		sb.append(", templateId=");
		sb.append(getTemplateId());
		sb.append(", rsvpId=");
		sb.append(getRsvpId());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append(
			"com.sambaash.platform.srv.mail.model.SPMailTemplateAttachment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spTemplateAttachmentId</column-name><column-value><![CDATA[");
		sb.append(getSpTemplateAttachmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateId</column-name><column-value><![CDATA[");
		sb.append(getTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsvpId</column-name><column-value><![CDATA[");
		sb.append(getRsvpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPMailTemplateAttachment.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPMailTemplateAttachment.class
		};
	private long _spTemplateAttachmentId;
	private long _templateId;
	private long _originalTemplateId;
	private boolean _setOriginalTemplateId;
	private long _rsvpId;
	private long _fileEntryId;
	private long _originalFileEntryId;
	private boolean _setOriginalFileEntryId;
	private long _columnBitmask;
	private SPMailTemplateAttachment _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spservices.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spservices.model.SPIPGeoLocation;
import com.sambaash.platform.srv.spservices.model.SPIPGeoLocationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPIPGeoLocation service. Represents a row in the &quot;SPIPGeoLocation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spservices.model.SPIPGeoLocationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPIPGeoLocationImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see SPIPGeoLocationImpl
 * @see com.sambaash.platform.srv.spservices.model.SPIPGeoLocation
 * @see com.sambaash.platform.srv.spservices.model.SPIPGeoLocationModel
 * @generated
 */
public class SPIPGeoLocationModelImpl extends BaseModelImpl<SPIPGeoLocation>
	implements SPIPGeoLocationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p i p geo location model instance should use the {@link com.sambaash.platform.srv.spservices.model.SPIPGeoLocation} interface instead.
	 */
	public static final String TABLE_NAME = "SPIPGeoLocation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spIPGeoLocationId", Types.BIGINT },
			{ "ipPrefix", Types.VARCHAR },
			{ "country", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SPIPGeoLocation (uuid_ VARCHAR(75) null,spIPGeoLocationId BIGINT(20) not null primary key,ipPrefix VARCHAR(75) null,country VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SPIPGeoLocation";
	public static final String ORDER_BY_JPQL = " ORDER BY spipGeoLocation.spIPGeoLocationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPIPGeoLocation.spIPGeoLocationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spservices.model.SPIPGeoLocation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spservices.model.SPIPGeoLocation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spservices.model.SPIPGeoLocation"),
			true);
	public static long IPPREFIX_COLUMN_BITMASK = 1L;
	public static long UUID_COLUMN_BITMASK = 2L;
	public static long SPIPGEOLOCATIONID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spservices.model.SPIPGeoLocation"));

	public SPIPGeoLocationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spIPGeoLocationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpIPGeoLocationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spIPGeoLocationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPIPGeoLocation.class;
	}

	@Override
	public String getModelClassName() {
		return SPIPGeoLocation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("spIPGeoLocationId", getSpIPGeoLocationId());
		attributes.put("ipPrefix", getIpPrefix());
		attributes.put("country", getCountry());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long spIPGeoLocationId = (Long)attributes.get("spIPGeoLocationId");

		if (spIPGeoLocationId != null) {
			setSpIPGeoLocationId(spIPGeoLocationId);
		}

		String ipPrefix = (String)attributes.get("ipPrefix");

		if (ipPrefix != null) {
			setIpPrefix(ipPrefix);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getSpIPGeoLocationId() {
		return _spIPGeoLocationId;
	}

	@Override
	public void setSpIPGeoLocationId(long spIPGeoLocationId) {
		_spIPGeoLocationId = spIPGeoLocationId;
	}

	@Override
	public String getIpPrefix() {
		if (_ipPrefix == null) {
			return StringPool.BLANK;
		}
		else {
			return _ipPrefix;
		}
	}

	@Override
	public void setIpPrefix(String ipPrefix) {
		_columnBitmask |= IPPREFIX_COLUMN_BITMASK;

		if (_originalIpPrefix == null) {
			_originalIpPrefix = _ipPrefix;
		}

		_ipPrefix = ipPrefix;
	}

	public String getOriginalIpPrefix() {
		return GetterUtil.getString(_originalIpPrefix);
	}

	@Override
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	@Override
	public void setCountry(String country) {
		_country = country;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SPIPGeoLocation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPIPGeoLocation toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPIPGeoLocation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPIPGeoLocationImpl spipGeoLocationImpl = new SPIPGeoLocationImpl();

		spipGeoLocationImpl.setUuid(getUuid());
		spipGeoLocationImpl.setSpIPGeoLocationId(getSpIPGeoLocationId());
		spipGeoLocationImpl.setIpPrefix(getIpPrefix());
		spipGeoLocationImpl.setCountry(getCountry());

		spipGeoLocationImpl.resetOriginalValues();

		return spipGeoLocationImpl;
	}

	@Override
	public int compareTo(SPIPGeoLocation spipGeoLocation) {
		long primaryKey = spipGeoLocation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPIPGeoLocation)) {
			return false;
		}

		SPIPGeoLocation spipGeoLocation = (SPIPGeoLocation)obj;

		long primaryKey = spipGeoLocation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPIPGeoLocationModelImpl spipGeoLocationModelImpl = this;

		spipGeoLocationModelImpl._originalUuid = spipGeoLocationModelImpl._uuid;

		spipGeoLocationModelImpl._originalIpPrefix = spipGeoLocationModelImpl._ipPrefix;

		spipGeoLocationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPIPGeoLocation> toCacheModel() {
		SPIPGeoLocationCacheModel spipGeoLocationCacheModel = new SPIPGeoLocationCacheModel();

		spipGeoLocationCacheModel.uuid = getUuid();

		String uuid = spipGeoLocationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			spipGeoLocationCacheModel.uuid = null;
		}

		spipGeoLocationCacheModel.spIPGeoLocationId = getSpIPGeoLocationId();

		spipGeoLocationCacheModel.ipPrefix = getIpPrefix();

		String ipPrefix = spipGeoLocationCacheModel.ipPrefix;

		if ((ipPrefix != null) && (ipPrefix.length() == 0)) {
			spipGeoLocationCacheModel.ipPrefix = null;
		}

		spipGeoLocationCacheModel.country = getCountry();

		String country = spipGeoLocationCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			spipGeoLocationCacheModel.country = null;
		}

		return spipGeoLocationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", spIPGeoLocationId=");
		sb.append(getSpIPGeoLocationId());
		sb.append(", ipPrefix=");
		sb.append(getIpPrefix());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.spservices.model.SPIPGeoLocation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spIPGeoLocationId</column-name><column-value><![CDATA[");
		sb.append(getSpIPGeoLocationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ipPrefix</column-name><column-value><![CDATA[");
		sb.append(getIpPrefix());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPIPGeoLocation.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPIPGeoLocation.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _spIPGeoLocationId;
	private String _ipPrefix;
	private String _originalIpPrefix;
	private String _country;
	private long _columnBitmask;
	private SPIPGeoLocation _escapedModel;
}
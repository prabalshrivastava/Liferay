/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spsocialprofile.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spsocialprofile.model.ExamBodyUser;
import com.sambaash.platform.srv.spsocialprofile.model.ExamBodyUserModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ExamBodyUser service. Represents a row in the &quot;SPExamBodyUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spsocialprofile.model.ExamBodyUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ExamBodyUserImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see ExamBodyUserImpl
 * @see com.sambaash.platform.srv.spsocialprofile.model.ExamBodyUser
 * @see com.sambaash.platform.srv.spsocialprofile.model.ExamBodyUserModel
 * @generated
 */
public class ExamBodyUserModelImpl extends BaseModelImpl<ExamBodyUser>
	implements ExamBodyUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a exam body user model instance should use the {@link com.sambaash.platform.srv.spsocialprofile.model.ExamBodyUser} interface instead.
	 */
	public static final String TABLE_NAME = "SPExamBodyUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "examBodyUserId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "emailAddress", Types.VARCHAR },
			{ "examBody", Types.VARCHAR },
			{ "active_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SPExamBodyUser (examBodyUserId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),createDate DATETIME null,modifiedDate DATETIME null,emailAddress VARCHAR(75) null,examBody VARCHAR(75) null,active_ BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SPExamBodyUser";
	public static final String ORDER_BY_JPQL = " ORDER BY examBodyUser.examBodyUserId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPExamBodyUser.examBodyUserId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spsocialprofile.model.ExamBodyUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spsocialprofile.model.ExamBodyUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spsocialprofile.model.ExamBodyUser"),
			true);
	public static long EMAILADDRESS_COLUMN_BITMASK = 1L;
	public static long EXAMBODY_COLUMN_BITMASK = 2L;
	public static long EXAMBODYUSERID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spsocialprofile.model.ExamBodyUser"));

	public ExamBodyUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _examBodyUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExamBodyUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _examBodyUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ExamBodyUser.class;
	}

	@Override
	public String getModelClassName() {
		return ExamBodyUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("examBodyUserId", getExamBodyUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("examBody", getExamBody());
		attributes.put("active", getActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long examBodyUserId = (Long)attributes.get("examBodyUserId");

		if (examBodyUserId != null) {
			setExamBodyUserId(examBodyUserId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		String examBody = (String)attributes.get("examBody");

		if (examBody != null) {
			setExamBody(examBody);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}
	}

	@Override
	public long getExamBodyUserId() {
		return _examBodyUserId;
	}

	@Override
	public void setExamBodyUserId(long examBodyUserId) {
		_examBodyUserId = examBodyUserId;
	}

	@Override
	public String getExamBodyUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getExamBodyUserId(), "uuid",
			_examBodyUserUuid);
	}

	@Override
	public void setExamBodyUserUuid(String examBodyUserUuid) {
		_examBodyUserUuid = examBodyUserUuid;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_columnBitmask |= EMAILADDRESS_COLUMN_BITMASK;

		if (_originalEmailAddress == null) {
			_originalEmailAddress = _emailAddress;
		}

		_emailAddress = emailAddress;
	}

	public String getOriginalEmailAddress() {
		return GetterUtil.getString(_originalEmailAddress);
	}

	@Override
	public String getExamBody() {
		if (_examBody == null) {
			return StringPool.BLANK;
		}
		else {
			return _examBody;
		}
	}

	@Override
	public void setExamBody(String examBody) {
		_columnBitmask |= EXAMBODY_COLUMN_BITMASK;

		if (_originalExamBody == null) {
			_originalExamBody = _examBody;
		}

		_examBody = examBody;
	}

	public String getOriginalExamBody() {
		return GetterUtil.getString(_originalExamBody);
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ExamBodyUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ExamBodyUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ExamBodyUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ExamBodyUserImpl examBodyUserImpl = new ExamBodyUserImpl();

		examBodyUserImpl.setExamBodyUserId(getExamBodyUserId());
		examBodyUserImpl.setGroupId(getGroupId());
		examBodyUserImpl.setCompanyId(getCompanyId());
		examBodyUserImpl.setCreateDate(getCreateDate());
		examBodyUserImpl.setModifiedDate(getModifiedDate());
		examBodyUserImpl.setEmailAddress(getEmailAddress());
		examBodyUserImpl.setExamBody(getExamBody());
		examBodyUserImpl.setActive(getActive());

		examBodyUserImpl.resetOriginalValues();

		return examBodyUserImpl;
	}

	@Override
	public int compareTo(ExamBodyUser examBodyUser) {
		long primaryKey = examBodyUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ExamBodyUser)) {
			return false;
		}

		ExamBodyUser examBodyUser = (ExamBodyUser)obj;

		long primaryKey = examBodyUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ExamBodyUserModelImpl examBodyUserModelImpl = this;

		examBodyUserModelImpl._originalEmailAddress = examBodyUserModelImpl._emailAddress;

		examBodyUserModelImpl._originalExamBody = examBodyUserModelImpl._examBody;

		examBodyUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ExamBodyUser> toCacheModel() {
		ExamBodyUserCacheModel examBodyUserCacheModel = new ExamBodyUserCacheModel();

		examBodyUserCacheModel.examBodyUserId = getExamBodyUserId();

		examBodyUserCacheModel.groupId = getGroupId();

		examBodyUserCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			examBodyUserCacheModel.createDate = createDate.getTime();
		}
		else {
			examBodyUserCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			examBodyUserCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			examBodyUserCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		examBodyUserCacheModel.emailAddress = getEmailAddress();

		String emailAddress = examBodyUserCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			examBodyUserCacheModel.emailAddress = null;
		}

		examBodyUserCacheModel.examBody = getExamBody();

		String examBody = examBodyUserCacheModel.examBody;

		if ((examBody != null) && (examBody.length() == 0)) {
			examBodyUserCacheModel.examBody = null;
		}

		examBodyUserCacheModel.active = getActive();

		return examBodyUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{examBodyUserId=");
		sb.append(getExamBodyUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", examBody=");
		sb.append(getExamBody());
		sb.append(", active=");
		sb.append(getActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append(
			"com.sambaash.platform.srv.spsocialprofile.model.ExamBodyUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>examBodyUserId</column-name><column-value><![CDATA[");
		sb.append(getExamBodyUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>examBody</column-name><column-value><![CDATA[");
		sb.append(getExamBody());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ExamBodyUser.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ExamBodyUser.class
		};
	private long _examBodyUserId;
	private String _examBodyUserUuid;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _emailAddress;
	private String _originalEmailAddress;
	private String _examBody;
	private String _originalExamBody;
	private boolean _active;
	private long _columnBitmask;
	private ExamBodyUser _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.roles.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.roles.model.SPCategoriesMapping;
import com.sambaash.platform.srv.roles.model.SPCategoriesMappingModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPCategoriesMapping service. Represents a row in the &quot;SPCategoriesMapping&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.roles.model.SPCategoriesMappingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPCategoriesMappingImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see SPCategoriesMappingImpl
 * @see com.sambaash.platform.srv.roles.model.SPCategoriesMapping
 * @see com.sambaash.platform.srv.roles.model.SPCategoriesMappingModel
 * @generated
 */
public class SPCategoriesMappingModelImpl extends BaseModelImpl<SPCategoriesMapping>
	implements SPCategoriesMappingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p categories mapping model instance should use the {@link com.sambaash.platform.srv.roles.model.SPCategoriesMapping} interface instead.
	 */
	public static final String TABLE_NAME = "SPCategoriesMapping";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spCategoryMappingId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "createdVocabularyId", Types.BIGINT },
			{ "mainCategoryId", Types.BIGINT },
			{ "subCategoryId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPCategoriesMapping (uuid_ VARCHAR(75) null,spCategoryMappingId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,createdVocabularyId BIGINT(20),mainCategoryId BIGINT(20),subCategoryId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPCategoriesMapping";
	public static final String ORDER_BY_JPQL = " ORDER BY spCategoriesMapping.mainCategoryId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPCategoriesMapping.mainCategoryId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.roles.model.SPCategoriesMapping"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.roles.model.SPCategoriesMapping"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.roles.model.SPCategoriesMapping"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long CREATEDVOCABULARYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long MAINCATEGORYID_COLUMN_BITMASK = 8L;
	public static long SUBCATEGORYID_COLUMN_BITMASK = 16L;
	public static long UUID_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.roles.model.SPCategoriesMapping"));

	public SPCategoriesMappingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spCategoryMappingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpCategoryMappingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spCategoryMappingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPCategoriesMapping.class;
	}

	@Override
	public String getModelClassName() {
		return SPCategoriesMapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("spCategoryMappingId", getSpCategoryMappingId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("createdVocabularyId", getCreatedVocabularyId());
		attributes.put("mainCategoryId", getMainCategoryId());
		attributes.put("subCategoryId", getSubCategoryId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long spCategoryMappingId = (Long)attributes.get("spCategoryMappingId");

		if (spCategoryMappingId != null) {
			setSpCategoryMappingId(spCategoryMappingId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long createdVocabularyId = (Long)attributes.get("createdVocabularyId");

		if (createdVocabularyId != null) {
			setCreatedVocabularyId(createdVocabularyId);
		}

		Long mainCategoryId = (Long)attributes.get("mainCategoryId");

		if (mainCategoryId != null) {
			setMainCategoryId(mainCategoryId);
		}

		Long subCategoryId = (Long)attributes.get("subCategoryId");

		if (subCategoryId != null) {
			setSubCategoryId(subCategoryId);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getSpCategoryMappingId() {
		return _spCategoryMappingId;
	}

	@Override
	public void setSpCategoryMappingId(long spCategoryMappingId) {
		_spCategoryMappingId = spCategoryMappingId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCreatedVocabularyId() {
		return _createdVocabularyId;
	}

	@Override
	public void setCreatedVocabularyId(long createdVocabularyId) {
		_columnBitmask |= CREATEDVOCABULARYID_COLUMN_BITMASK;

		if (!_setOriginalCreatedVocabularyId) {
			_setOriginalCreatedVocabularyId = true;

			_originalCreatedVocabularyId = _createdVocabularyId;
		}

		_createdVocabularyId = createdVocabularyId;
	}

	public long getOriginalCreatedVocabularyId() {
		return _originalCreatedVocabularyId;
	}

	@Override
	public long getMainCategoryId() {
		return _mainCategoryId;
	}

	@Override
	public void setMainCategoryId(long mainCategoryId) {
		_columnBitmask = -1L;

		if (!_setOriginalMainCategoryId) {
			_setOriginalMainCategoryId = true;

			_originalMainCategoryId = _mainCategoryId;
		}

		_mainCategoryId = mainCategoryId;
	}

	public long getOriginalMainCategoryId() {
		return _originalMainCategoryId;
	}

	@Override
	public long getSubCategoryId() {
		return _subCategoryId;
	}

	@Override
	public void setSubCategoryId(long subCategoryId) {
		_columnBitmask |= SUBCATEGORYID_COLUMN_BITMASK;

		if (!_setOriginalSubCategoryId) {
			_setOriginalSubCategoryId = true;

			_originalSubCategoryId = _subCategoryId;
		}

		_subCategoryId = subCategoryId;
	}

	public long getOriginalSubCategoryId() {
		return _originalSubCategoryId;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				SPCategoriesMapping.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPCategoriesMapping.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPCategoriesMapping toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPCategoriesMapping)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPCategoriesMappingImpl spCategoriesMappingImpl = new SPCategoriesMappingImpl();

		spCategoriesMappingImpl.setUuid(getUuid());
		spCategoriesMappingImpl.setSpCategoryMappingId(getSpCategoryMappingId());
		spCategoriesMappingImpl.setGroupId(getGroupId());
		spCategoriesMappingImpl.setCompanyId(getCompanyId());
		spCategoriesMappingImpl.setUserId(getUserId());
		spCategoriesMappingImpl.setUserName(getUserName());
		spCategoriesMappingImpl.setCreateDate(getCreateDate());
		spCategoriesMappingImpl.setModifiedDate(getModifiedDate());
		spCategoriesMappingImpl.setCreatedVocabularyId(getCreatedVocabularyId());
		spCategoriesMappingImpl.setMainCategoryId(getMainCategoryId());
		spCategoriesMappingImpl.setSubCategoryId(getSubCategoryId());

		spCategoriesMappingImpl.resetOriginalValues();

		return spCategoriesMappingImpl;
	}

	@Override
	public int compareTo(SPCategoriesMapping spCategoriesMapping) {
		int value = 0;

		if (getMainCategoryId() < spCategoriesMapping.getMainCategoryId()) {
			value = -1;
		}
		else if (getMainCategoryId() > spCategoriesMapping.getMainCategoryId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPCategoriesMapping)) {
			return false;
		}

		SPCategoriesMapping spCategoriesMapping = (SPCategoriesMapping)obj;

		long primaryKey = spCategoriesMapping.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPCategoriesMappingModelImpl spCategoriesMappingModelImpl = this;

		spCategoriesMappingModelImpl._originalUuid = spCategoriesMappingModelImpl._uuid;

		spCategoriesMappingModelImpl._originalGroupId = spCategoriesMappingModelImpl._groupId;

		spCategoriesMappingModelImpl._setOriginalGroupId = false;

		spCategoriesMappingModelImpl._originalCompanyId = spCategoriesMappingModelImpl._companyId;

		spCategoriesMappingModelImpl._setOriginalCompanyId = false;

		spCategoriesMappingModelImpl._originalCreatedVocabularyId = spCategoriesMappingModelImpl._createdVocabularyId;

		spCategoriesMappingModelImpl._setOriginalCreatedVocabularyId = false;

		spCategoriesMappingModelImpl._originalMainCategoryId = spCategoriesMappingModelImpl._mainCategoryId;

		spCategoriesMappingModelImpl._setOriginalMainCategoryId = false;

		spCategoriesMappingModelImpl._originalSubCategoryId = spCategoriesMappingModelImpl._subCategoryId;

		spCategoriesMappingModelImpl._setOriginalSubCategoryId = false;

		spCategoriesMappingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPCategoriesMapping> toCacheModel() {
		SPCategoriesMappingCacheModel spCategoriesMappingCacheModel = new SPCategoriesMappingCacheModel();

		spCategoriesMappingCacheModel.uuid = getUuid();

		String uuid = spCategoriesMappingCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			spCategoriesMappingCacheModel.uuid = null;
		}

		spCategoriesMappingCacheModel.spCategoryMappingId = getSpCategoryMappingId();

		spCategoriesMappingCacheModel.groupId = getGroupId();

		spCategoriesMappingCacheModel.companyId = getCompanyId();

		spCategoriesMappingCacheModel.userId = getUserId();

		spCategoriesMappingCacheModel.userName = getUserName();

		String userName = spCategoriesMappingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			spCategoriesMappingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			spCategoriesMappingCacheModel.createDate = createDate.getTime();
		}
		else {
			spCategoriesMappingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spCategoriesMappingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spCategoriesMappingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		spCategoriesMappingCacheModel.createdVocabularyId = getCreatedVocabularyId();

		spCategoriesMappingCacheModel.mainCategoryId = getMainCategoryId();

		spCategoriesMappingCacheModel.subCategoryId = getSubCategoryId();

		return spCategoriesMappingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", spCategoryMappingId=");
		sb.append(getSpCategoryMappingId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", createdVocabularyId=");
		sb.append(getCreatedVocabularyId());
		sb.append(", mainCategoryId=");
		sb.append(getMainCategoryId());
		sb.append(", subCategoryId=");
		sb.append(getSubCategoryId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.roles.model.SPCategoriesMapping");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spCategoryMappingId</column-name><column-value><![CDATA[");
		sb.append(getSpCategoryMappingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdVocabularyId</column-name><column-value><![CDATA[");
		sb.append(getCreatedVocabularyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mainCategoryId</column-name><column-value><![CDATA[");
		sb.append(getMainCategoryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subCategoryId</column-name><column-value><![CDATA[");
		sb.append(getSubCategoryId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPCategoriesMapping.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPCategoriesMapping.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _spCategoryMappingId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _createdVocabularyId;
	private long _originalCreatedVocabularyId;
	private boolean _setOriginalCreatedVocabularyId;
	private long _mainCategoryId;
	private long _originalMainCategoryId;
	private boolean _setOriginalMainCategoryId;
	private long _subCategoryId;
	private long _originalSubCategoryId;
	private boolean _setOriginalSubCategoryId;
	private long _columnBitmask;
	private SPCategoriesMapping _escapedModel;
}
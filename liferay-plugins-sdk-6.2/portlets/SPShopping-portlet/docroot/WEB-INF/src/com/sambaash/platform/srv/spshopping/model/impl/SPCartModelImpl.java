/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spshopping.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spshopping.model.SPCart;
import com.sambaash.platform.srv.spshopping.model.SPCartModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPCart service. Represents a row in the &quot;SPCart&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spshopping.model.SPCartModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPCartImpl}.
 * </p>
 *
 * @author pradeep
 * @see SPCartImpl
 * @see com.sambaash.platform.srv.spshopping.model.SPCart
 * @see com.sambaash.platform.srv.spshopping.model.SPCartModel
 * @generated
 */
public class SPCartModelImpl extends BaseModelImpl<SPCart>
	implements SPCartModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p cart model instance should use the {@link com.sambaash.platform.srv.spshopping.model.SPCart} interface instead.
	 */
	public static final String TABLE_NAME = "SPCart";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spCartId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "discount", Types.VARCHAR },
			{ "totalPrice", Types.VARCHAR },
			{ "userRemarks", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "transactionDetails", Types.VARCHAR },
			{ "orderPage", Types.VARCHAR },
			{ "rsvpDetailId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table SPCart (spCartId BIGINT(20) not null primary key,groupId BIGINT(20),discount VARCHAR(75) null,totalPrice VARCHAR(75) null,userRemarks VARCHAR(75) null,status INTEGER,transactionDetails VARCHAR(75) null,orderPage VARCHAR(75) null,rsvpDetailId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null)";
	public static final String TABLE_SQL_DROP = "drop table SPCart";
	public static final String ORDER_BY_JPQL = " ORDER BY spCart.spCartId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPCart.spCartId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spshopping.model.SPCart"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spshopping.model.SPCart"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spshopping.model.SPCart"));

	public SPCartModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spCartId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpCartId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spCartId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPCart.class;
	}

	@Override
	public String getModelClassName() {
		return SPCart.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spCartId", getSpCartId());
		attributes.put("groupId", getGroupId());
		attributes.put("discount", getDiscount());
		attributes.put("totalPrice", getTotalPrice());
		attributes.put("userRemarks", getUserRemarks());
		attributes.put("status", getStatus());
		attributes.put("transactionDetails", getTransactionDetails());
		attributes.put("orderPage", getOrderPage());
		attributes.put("rsvpDetailId", getRsvpDetailId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spCartId = (Long)attributes.get("spCartId");

		if (spCartId != null) {
			setSpCartId(spCartId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		String discount = (String)attributes.get("discount");

		if (discount != null) {
			setDiscount(discount);
		}

		String totalPrice = (String)attributes.get("totalPrice");

		if (totalPrice != null) {
			setTotalPrice(totalPrice);
		}

		String userRemarks = (String)attributes.get("userRemarks");

		if (userRemarks != null) {
			setUserRemarks(userRemarks);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String transactionDetails = (String)attributes.get("transactionDetails");

		if (transactionDetails != null) {
			setTransactionDetails(transactionDetails);
		}

		String orderPage = (String)attributes.get("orderPage");

		if (orderPage != null) {
			setOrderPage(orderPage);
		}

		Long rsvpDetailId = (Long)attributes.get("rsvpDetailId");

		if (rsvpDetailId != null) {
			setRsvpDetailId(rsvpDetailId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@Override
	public long getSpCartId() {
		return _spCartId;
	}

	@Override
	public void setSpCartId(long spCartId) {
		_spCartId = spCartId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public String getDiscount() {
		if (_discount == null) {
			return StringPool.BLANK;
		}
		else {
			return _discount;
		}
	}

	@Override
	public void setDiscount(String discount) {
		_discount = discount;
	}

	@Override
	public String getTotalPrice() {
		if (_totalPrice == null) {
			return StringPool.BLANK;
		}
		else {
			return _totalPrice;
		}
	}

	@Override
	public void setTotalPrice(String totalPrice) {
		_totalPrice = totalPrice;
	}

	@Override
	public String getUserRemarks() {
		if (_userRemarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _userRemarks;
		}
	}

	@Override
	public void setUserRemarks(String userRemarks) {
		_userRemarks = userRemarks;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public String getTransactionDetails() {
		if (_transactionDetails == null) {
			return StringPool.BLANK;
		}
		else {
			return _transactionDetails;
		}
	}

	@Override
	public void setTransactionDetails(String transactionDetails) {
		_transactionDetails = transactionDetails;
	}

	@Override
	public String getOrderPage() {
		if (_orderPage == null) {
			return StringPool.BLANK;
		}
		else {
			return _orderPage;
		}
	}

	@Override
	public void setOrderPage(String orderPage) {
		_orderPage = orderPage;
	}

	@Override
	public long getRsvpDetailId() {
		return _rsvpDetailId;
	}

	@Override
	public void setRsvpDetailId(long rsvpDetailId) {
		_rsvpDetailId = rsvpDetailId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPCart.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPCart toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPCart)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPCartImpl spCartImpl = new SPCartImpl();

		spCartImpl.setSpCartId(getSpCartId());
		spCartImpl.setGroupId(getGroupId());
		spCartImpl.setDiscount(getDiscount());
		spCartImpl.setTotalPrice(getTotalPrice());
		spCartImpl.setUserRemarks(getUserRemarks());
		spCartImpl.setStatus(getStatus());
		spCartImpl.setTransactionDetails(getTransactionDetails());
		spCartImpl.setOrderPage(getOrderPage());
		spCartImpl.setRsvpDetailId(getRsvpDetailId());
		spCartImpl.setCompanyId(getCompanyId());
		spCartImpl.setUserId(getUserId());
		spCartImpl.setUserName(getUserName());
		spCartImpl.setCreateDate(getCreateDate());
		spCartImpl.setModifiedDate(getModifiedDate());

		spCartImpl.resetOriginalValues();

		return spCartImpl;
	}

	@Override
	public int compareTo(SPCart spCart) {
		long primaryKey = spCart.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPCart)) {
			return false;
		}

		SPCart spCart = (SPCart)obj;

		long primaryKey = spCart.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<SPCart> toCacheModel() {
		SPCartCacheModel spCartCacheModel = new SPCartCacheModel();

		spCartCacheModel.spCartId = getSpCartId();

		spCartCacheModel.groupId = getGroupId();

		spCartCacheModel.discount = getDiscount();

		String discount = spCartCacheModel.discount;

		if ((discount != null) && (discount.length() == 0)) {
			spCartCacheModel.discount = null;
		}

		spCartCacheModel.totalPrice = getTotalPrice();

		String totalPrice = spCartCacheModel.totalPrice;

		if ((totalPrice != null) && (totalPrice.length() == 0)) {
			spCartCacheModel.totalPrice = null;
		}

		spCartCacheModel.userRemarks = getUserRemarks();

		String userRemarks = spCartCacheModel.userRemarks;

		if ((userRemarks != null) && (userRemarks.length() == 0)) {
			spCartCacheModel.userRemarks = null;
		}

		spCartCacheModel.status = getStatus();

		spCartCacheModel.transactionDetails = getTransactionDetails();

		String transactionDetails = spCartCacheModel.transactionDetails;

		if ((transactionDetails != null) && (transactionDetails.length() == 0)) {
			spCartCacheModel.transactionDetails = null;
		}

		spCartCacheModel.orderPage = getOrderPage();

		String orderPage = spCartCacheModel.orderPage;

		if ((orderPage != null) && (orderPage.length() == 0)) {
			spCartCacheModel.orderPage = null;
		}

		spCartCacheModel.rsvpDetailId = getRsvpDetailId();

		spCartCacheModel.companyId = getCompanyId();

		spCartCacheModel.userId = getUserId();

		spCartCacheModel.userName = getUserName();

		String userName = spCartCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			spCartCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			spCartCacheModel.createDate = createDate.getTime();
		}
		else {
			spCartCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spCartCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spCartCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return spCartCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{spCartId=");
		sb.append(getSpCartId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", discount=");
		sb.append(getDiscount());
		sb.append(", totalPrice=");
		sb.append(getTotalPrice());
		sb.append(", userRemarks=");
		sb.append(getUserRemarks());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", transactionDetails=");
		sb.append(getTransactionDetails());
		sb.append(", orderPage=");
		sb.append(getOrderPage());
		sb.append(", rsvpDetailId=");
		sb.append(getRsvpDetailId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.spshopping.model.SPCart");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spCartId</column-name><column-value><![CDATA[");
		sb.append(getSpCartId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>discount</column-name><column-value><![CDATA[");
		sb.append(getDiscount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalPrice</column-name><column-value><![CDATA[");
		sb.append(getTotalPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userRemarks</column-name><column-value><![CDATA[");
		sb.append(getUserRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transactionDetails</column-name><column-value><![CDATA[");
		sb.append(getTransactionDetails());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orderPage</column-name><column-value><![CDATA[");
		sb.append(getOrderPage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsvpDetailId</column-name><column-value><![CDATA[");
		sb.append(getRsvpDetailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPCart.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { SPCart.class };
	private long _spCartId;
	private long _groupId;
	private String _discount;
	private String _totalPrice;
	private String _userRemarks;
	private int _status;
	private String _transactionDetails;
	private String _orderPage;
	private long _rsvpDetailId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private SPCart _escapedModel;
}
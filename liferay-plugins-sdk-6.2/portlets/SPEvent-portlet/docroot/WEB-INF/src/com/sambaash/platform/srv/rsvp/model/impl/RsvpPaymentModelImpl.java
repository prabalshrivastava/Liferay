/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.rsvp.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.rsvp.model.RsvpPayment;
import com.sambaash.platform.srv.rsvp.model.RsvpPaymentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RsvpPayment service. Represents a row in the &quot;SPRsvpPayment&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.rsvp.model.RsvpPaymentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RsvpPaymentImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see RsvpPaymentImpl
 * @see com.sambaash.platform.srv.rsvp.model.RsvpPayment
 * @see com.sambaash.platform.srv.rsvp.model.RsvpPaymentModel
 * @generated
 */
public class RsvpPaymentModelImpl extends BaseModelImpl<RsvpPayment>
	implements RsvpPaymentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rsvp payment model instance should use the {@link com.sambaash.platform.srv.rsvp.model.RsvpPayment} interface instead.
	 */
	public static final String TABLE_NAME = "SPRsvpPayment";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spRsvpPaymentId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "spRsvpDetailId", Types.BIGINT },
			{ "spRsvpId", Types.BIGINT },
			{ "spRsvpTicketId", Types.BIGINT },
			{ "spRsvpDiscountId", Types.BIGINT },
			{ "spRsvpPromoCodeId", Types.BIGINT },
			{ "price", Types.DOUBLE },
			{ "numberOfPeople", Types.INTEGER },
			{ "discount", Types.INTEGER },
			{ "netTotal", Types.DOUBLE },
			{ "ticketNumber", Types.VARCHAR },
			{ "payerEmailAddress", Types.VARCHAR },
			{ "receiverEmailAddress", Types.VARCHAR },
			{ "transactionId", Types.VARCHAR },
			{ "transactionStatus", Types.VARCHAR },
			{ "transactionAmount", Types.DOUBLE },
			{ "transactionDate", Types.TIMESTAMP },
			{ "emailStatus", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SPRsvpPayment (uuid_ VARCHAR(75) null,spRsvpPaymentId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,spRsvpDetailId BIGINT(20),spRsvpId BIGINT(20),spRsvpTicketId BIGINT(20),spRsvpDiscountId BIGINT(20),spRsvpPromoCodeId BIGINT(20),price DOUBLE,numberOfPeople INTEGER,discount INTEGER,netTotal DOUBLE,ticketNumber VARCHAR(16) null,payerEmailAddress VARCHAR(75) null,receiverEmailAddress VARCHAR(75) null,transactionId VARCHAR(75) null,transactionStatus VARCHAR(75) null,transactionAmount DOUBLE,transactionDate DATETIME null,emailStatus BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SPRsvpPayment";
	public static final String ORDER_BY_JPQL = " ORDER BY rsvpPayment.rsvpPaymentId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPRsvpPayment.spRsvpPaymentId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.rsvp.model.RsvpPayment"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.rsvp.model.RsvpPayment"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.rsvp.model.RsvpPayment"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long RSVPDETAILID_COLUMN_BITMASK = 4L;
	public static long TICKETNUMBER_COLUMN_BITMASK = 8L;
	public static long TRANSACTIONSTATUS_COLUMN_BITMASK = 16L;
	public static long UUID_COLUMN_BITMASK = 32L;
	public static long RSVPPAYMENTID_COLUMN_BITMASK = 64L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.rsvp.model.RsvpPayment"));

	public RsvpPaymentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _rsvpPaymentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setRsvpPaymentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _rsvpPaymentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RsvpPayment.class;
	}

	@Override
	public String getModelClassName() {
		return RsvpPayment.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("rsvpPaymentId", getRsvpPaymentId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("rsvpDetailId", getRsvpDetailId());
		attributes.put("rsvpId", getRsvpId());
		attributes.put("rsvpTicketId", getRsvpTicketId());
		attributes.put("rsvpDiscountId", getRsvpDiscountId());
		attributes.put("rsvpPromoCodeId", getRsvpPromoCodeId());
		attributes.put("price", getPrice());
		attributes.put("numberOfPeople", getNumberOfPeople());
		attributes.put("discount", getDiscount());
		attributes.put("netTotal", getNetTotal());
		attributes.put("ticketNumber", getTicketNumber());
		attributes.put("payerEmailAddress", getPayerEmailAddress());
		attributes.put("receiverEmailAddress", getReceiverEmailAddress());
		attributes.put("transactionId", getTransactionId());
		attributes.put("transactionStatus", getTransactionStatus());
		attributes.put("transactionAmount", getTransactionAmount());
		attributes.put("transactionDate", getTransactionDate());
		attributes.put("emailStatus", getEmailStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long rsvpPaymentId = (Long)attributes.get("rsvpPaymentId");

		if (rsvpPaymentId != null) {
			setRsvpPaymentId(rsvpPaymentId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long rsvpDetailId = (Long)attributes.get("rsvpDetailId");

		if (rsvpDetailId != null) {
			setRsvpDetailId(rsvpDetailId);
		}

		Long rsvpId = (Long)attributes.get("rsvpId");

		if (rsvpId != null) {
			setRsvpId(rsvpId);
		}

		Long rsvpTicketId = (Long)attributes.get("rsvpTicketId");

		if (rsvpTicketId != null) {
			setRsvpTicketId(rsvpTicketId);
		}

		Long rsvpDiscountId = (Long)attributes.get("rsvpDiscountId");

		if (rsvpDiscountId != null) {
			setRsvpDiscountId(rsvpDiscountId);
		}

		Long rsvpPromoCodeId = (Long)attributes.get("rsvpPromoCodeId");

		if (rsvpPromoCodeId != null) {
			setRsvpPromoCodeId(rsvpPromoCodeId);
		}

		Double price = (Double)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		Integer numberOfPeople = (Integer)attributes.get("numberOfPeople");

		if (numberOfPeople != null) {
			setNumberOfPeople(numberOfPeople);
		}

		Integer discount = (Integer)attributes.get("discount");

		if (discount != null) {
			setDiscount(discount);
		}

		Double netTotal = (Double)attributes.get("netTotal");

		if (netTotal != null) {
			setNetTotal(netTotal);
		}

		String ticketNumber = (String)attributes.get("ticketNumber");

		if (ticketNumber != null) {
			setTicketNumber(ticketNumber);
		}

		String payerEmailAddress = (String)attributes.get("payerEmailAddress");

		if (payerEmailAddress != null) {
			setPayerEmailAddress(payerEmailAddress);
		}

		String receiverEmailAddress = (String)attributes.get(
				"receiverEmailAddress");

		if (receiverEmailAddress != null) {
			setReceiverEmailAddress(receiverEmailAddress);
		}

		String transactionId = (String)attributes.get("transactionId");

		if (transactionId != null) {
			setTransactionId(transactionId);
		}

		String transactionStatus = (String)attributes.get("transactionStatus");

		if (transactionStatus != null) {
			setTransactionStatus(transactionStatus);
		}

		Double transactionAmount = (Double)attributes.get("transactionAmount");

		if (transactionAmount != null) {
			setTransactionAmount(transactionAmount);
		}

		Date transactionDate = (Date)attributes.get("transactionDate");

		if (transactionDate != null) {
			setTransactionDate(transactionDate);
		}

		Boolean emailStatus = (Boolean)attributes.get("emailStatus");

		if (emailStatus != null) {
			setEmailStatus(emailStatus);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getRsvpPaymentId() {
		return _rsvpPaymentId;
	}

	@Override
	public void setRsvpPaymentId(long rsvpPaymentId) {
		_rsvpPaymentId = rsvpPaymentId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getRsvpDetailId() {
		return _rsvpDetailId;
	}

	@Override
	public void setRsvpDetailId(long rsvpDetailId) {
		_columnBitmask |= RSVPDETAILID_COLUMN_BITMASK;

		if (!_setOriginalRsvpDetailId) {
			_setOriginalRsvpDetailId = true;

			_originalRsvpDetailId = _rsvpDetailId;
		}

		_rsvpDetailId = rsvpDetailId;
	}

	public long getOriginalRsvpDetailId() {
		return _originalRsvpDetailId;
	}

	@Override
	public long getRsvpId() {
		return _rsvpId;
	}

	@Override
	public void setRsvpId(long rsvpId) {
		_rsvpId = rsvpId;
	}

	@Override
	public long getRsvpTicketId() {
		return _rsvpTicketId;
	}

	@Override
	public void setRsvpTicketId(long rsvpTicketId) {
		_rsvpTicketId = rsvpTicketId;
	}

	@Override
	public long getRsvpDiscountId() {
		return _rsvpDiscountId;
	}

	@Override
	public void setRsvpDiscountId(long rsvpDiscountId) {
		_rsvpDiscountId = rsvpDiscountId;
	}

	@Override
	public long getRsvpPromoCodeId() {
		return _rsvpPromoCodeId;
	}

	@Override
	public void setRsvpPromoCodeId(long rsvpPromoCodeId) {
		_rsvpPromoCodeId = rsvpPromoCodeId;
	}

	@Override
	public double getPrice() {
		return _price;
	}

	@Override
	public void setPrice(double price) {
		_price = price;
	}

	@Override
	public int getNumberOfPeople() {
		return _numberOfPeople;
	}

	@Override
	public void setNumberOfPeople(int numberOfPeople) {
		_numberOfPeople = numberOfPeople;
	}

	@Override
	public int getDiscount() {
		return _discount;
	}

	@Override
	public void setDiscount(int discount) {
		_discount = discount;
	}

	@Override
	public double getNetTotal() {
		return _netTotal;
	}

	@Override
	public void setNetTotal(double netTotal) {
		_netTotal = netTotal;
	}

	@Override
	public String getTicketNumber() {
		return _ticketNumber;
	}

	@Override
	public void setTicketNumber(String ticketNumber) {
		_columnBitmask |= TICKETNUMBER_COLUMN_BITMASK;

		if (_originalTicketNumber == null) {
			_originalTicketNumber = _ticketNumber;
		}

		_ticketNumber = ticketNumber;
	}

	public String getOriginalTicketNumber() {
		return _originalTicketNumber;
	}

	@Override
	public String getPayerEmailAddress() {
		if (_payerEmailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _payerEmailAddress;
		}
	}

	@Override
	public void setPayerEmailAddress(String payerEmailAddress) {
		_payerEmailAddress = payerEmailAddress;
	}

	@Override
	public String getReceiverEmailAddress() {
		if (_receiverEmailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _receiverEmailAddress;
		}
	}

	@Override
	public void setReceiverEmailAddress(String receiverEmailAddress) {
		_receiverEmailAddress = receiverEmailAddress;
	}

	@Override
	public String getTransactionId() {
		if (_transactionId == null) {
			return StringPool.BLANK;
		}
		else {
			return _transactionId;
		}
	}

	@Override
	public void setTransactionId(String transactionId) {
		_transactionId = transactionId;
	}

	@Override
	public String getTransactionStatus() {
		if (_transactionStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _transactionStatus;
		}
	}

	@Override
	public void setTransactionStatus(String transactionStatus) {
		_columnBitmask |= TRANSACTIONSTATUS_COLUMN_BITMASK;

		if (_originalTransactionStatus == null) {
			_originalTransactionStatus = _transactionStatus;
		}

		_transactionStatus = transactionStatus;
	}

	public String getOriginalTransactionStatus() {
		return GetterUtil.getString(_originalTransactionStatus);
	}

	@Override
	public double getTransactionAmount() {
		return _transactionAmount;
	}

	@Override
	public void setTransactionAmount(double transactionAmount) {
		_transactionAmount = transactionAmount;
	}

	@Override
	public Date getTransactionDate() {
		return _transactionDate;
	}

	@Override
	public void setTransactionDate(Date transactionDate) {
		_transactionDate = transactionDate;
	}

	@Override
	public boolean getEmailStatus() {
		return _emailStatus;
	}

	@Override
	public boolean isEmailStatus() {
		return _emailStatus;
	}

	@Override
	public void setEmailStatus(boolean emailStatus) {
		_emailStatus = emailStatus;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				RsvpPayment.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			RsvpPayment.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RsvpPayment toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RsvpPayment)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RsvpPaymentImpl rsvpPaymentImpl = new RsvpPaymentImpl();

		rsvpPaymentImpl.setUuid(getUuid());
		rsvpPaymentImpl.setRsvpPaymentId(getRsvpPaymentId());
		rsvpPaymentImpl.setGroupId(getGroupId());
		rsvpPaymentImpl.setCompanyId(getCompanyId());
		rsvpPaymentImpl.setUserId(getUserId());
		rsvpPaymentImpl.setUserName(getUserName());
		rsvpPaymentImpl.setCreateDate(getCreateDate());
		rsvpPaymentImpl.setModifiedDate(getModifiedDate());
		rsvpPaymentImpl.setRsvpDetailId(getRsvpDetailId());
		rsvpPaymentImpl.setRsvpId(getRsvpId());
		rsvpPaymentImpl.setRsvpTicketId(getRsvpTicketId());
		rsvpPaymentImpl.setRsvpDiscountId(getRsvpDiscountId());
		rsvpPaymentImpl.setRsvpPromoCodeId(getRsvpPromoCodeId());
		rsvpPaymentImpl.setPrice(getPrice());
		rsvpPaymentImpl.setNumberOfPeople(getNumberOfPeople());
		rsvpPaymentImpl.setDiscount(getDiscount());
		rsvpPaymentImpl.setNetTotal(getNetTotal());
		rsvpPaymentImpl.setTicketNumber(getTicketNumber());
		rsvpPaymentImpl.setPayerEmailAddress(getPayerEmailAddress());
		rsvpPaymentImpl.setReceiverEmailAddress(getReceiverEmailAddress());
		rsvpPaymentImpl.setTransactionId(getTransactionId());
		rsvpPaymentImpl.setTransactionStatus(getTransactionStatus());
		rsvpPaymentImpl.setTransactionAmount(getTransactionAmount());
		rsvpPaymentImpl.setTransactionDate(getTransactionDate());
		rsvpPaymentImpl.setEmailStatus(getEmailStatus());

		rsvpPaymentImpl.resetOriginalValues();

		return rsvpPaymentImpl;
	}

	@Override
	public int compareTo(RsvpPayment rsvpPayment) {
		long primaryKey = rsvpPayment.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RsvpPayment)) {
			return false;
		}

		RsvpPayment rsvpPayment = (RsvpPayment)obj;

		long primaryKey = rsvpPayment.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RsvpPaymentModelImpl rsvpPaymentModelImpl = this;

		rsvpPaymentModelImpl._originalUuid = rsvpPaymentModelImpl._uuid;

		rsvpPaymentModelImpl._originalGroupId = rsvpPaymentModelImpl._groupId;

		rsvpPaymentModelImpl._setOriginalGroupId = false;

		rsvpPaymentModelImpl._originalCompanyId = rsvpPaymentModelImpl._companyId;

		rsvpPaymentModelImpl._setOriginalCompanyId = false;

		rsvpPaymentModelImpl._originalRsvpDetailId = rsvpPaymentModelImpl._rsvpDetailId;

		rsvpPaymentModelImpl._setOriginalRsvpDetailId = false;

		rsvpPaymentModelImpl._originalTicketNumber = rsvpPaymentModelImpl._ticketNumber;

		rsvpPaymentModelImpl._originalTransactionStatus = rsvpPaymentModelImpl._transactionStatus;

		rsvpPaymentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RsvpPayment> toCacheModel() {
		RsvpPaymentCacheModel rsvpPaymentCacheModel = new RsvpPaymentCacheModel();

		rsvpPaymentCacheModel.uuid = getUuid();

		String uuid = rsvpPaymentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			rsvpPaymentCacheModel.uuid = null;
		}

		rsvpPaymentCacheModel.rsvpPaymentId = getRsvpPaymentId();

		rsvpPaymentCacheModel.groupId = getGroupId();

		rsvpPaymentCacheModel.companyId = getCompanyId();

		rsvpPaymentCacheModel.userId = getUserId();

		rsvpPaymentCacheModel.userName = getUserName();

		String userName = rsvpPaymentCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			rsvpPaymentCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			rsvpPaymentCacheModel.createDate = createDate.getTime();
		}
		else {
			rsvpPaymentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			rsvpPaymentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			rsvpPaymentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		rsvpPaymentCacheModel.rsvpDetailId = getRsvpDetailId();

		rsvpPaymentCacheModel.rsvpId = getRsvpId();

		rsvpPaymentCacheModel.rsvpTicketId = getRsvpTicketId();

		rsvpPaymentCacheModel.rsvpDiscountId = getRsvpDiscountId();

		rsvpPaymentCacheModel.rsvpPromoCodeId = getRsvpPromoCodeId();

		rsvpPaymentCacheModel.price = getPrice();

		rsvpPaymentCacheModel.numberOfPeople = getNumberOfPeople();

		rsvpPaymentCacheModel.discount = getDiscount();

		rsvpPaymentCacheModel.netTotal = getNetTotal();

		rsvpPaymentCacheModel.ticketNumber = getTicketNumber();

		String ticketNumber = rsvpPaymentCacheModel.ticketNumber;

		if ((ticketNumber != null) && (ticketNumber.length() == 0)) {
			rsvpPaymentCacheModel.ticketNumber = null;
		}

		rsvpPaymentCacheModel.payerEmailAddress = getPayerEmailAddress();

		String payerEmailAddress = rsvpPaymentCacheModel.payerEmailAddress;

		if ((payerEmailAddress != null) && (payerEmailAddress.length() == 0)) {
			rsvpPaymentCacheModel.payerEmailAddress = null;
		}

		rsvpPaymentCacheModel.receiverEmailAddress = getReceiverEmailAddress();

		String receiverEmailAddress = rsvpPaymentCacheModel.receiverEmailAddress;

		if ((receiverEmailAddress != null) &&
				(receiverEmailAddress.length() == 0)) {
			rsvpPaymentCacheModel.receiverEmailAddress = null;
		}

		rsvpPaymentCacheModel.transactionId = getTransactionId();

		String transactionId = rsvpPaymentCacheModel.transactionId;

		if ((transactionId != null) && (transactionId.length() == 0)) {
			rsvpPaymentCacheModel.transactionId = null;
		}

		rsvpPaymentCacheModel.transactionStatus = getTransactionStatus();

		String transactionStatus = rsvpPaymentCacheModel.transactionStatus;

		if ((transactionStatus != null) && (transactionStatus.length() == 0)) {
			rsvpPaymentCacheModel.transactionStatus = null;
		}

		rsvpPaymentCacheModel.transactionAmount = getTransactionAmount();

		Date transactionDate = getTransactionDate();

		if (transactionDate != null) {
			rsvpPaymentCacheModel.transactionDate = transactionDate.getTime();
		}
		else {
			rsvpPaymentCacheModel.transactionDate = Long.MIN_VALUE;
		}

		rsvpPaymentCacheModel.emailStatus = getEmailStatus();

		return rsvpPaymentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(51);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", rsvpPaymentId=");
		sb.append(getRsvpPaymentId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", rsvpDetailId=");
		sb.append(getRsvpDetailId());
		sb.append(", rsvpId=");
		sb.append(getRsvpId());
		sb.append(", rsvpTicketId=");
		sb.append(getRsvpTicketId());
		sb.append(", rsvpDiscountId=");
		sb.append(getRsvpDiscountId());
		sb.append(", rsvpPromoCodeId=");
		sb.append(getRsvpPromoCodeId());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", numberOfPeople=");
		sb.append(getNumberOfPeople());
		sb.append(", discount=");
		sb.append(getDiscount());
		sb.append(", netTotal=");
		sb.append(getNetTotal());
		sb.append(", ticketNumber=");
		sb.append(getTicketNumber());
		sb.append(", payerEmailAddress=");
		sb.append(getPayerEmailAddress());
		sb.append(", receiverEmailAddress=");
		sb.append(getReceiverEmailAddress());
		sb.append(", transactionId=");
		sb.append(getTransactionId());
		sb.append(", transactionStatus=");
		sb.append(getTransactionStatus());
		sb.append(", transactionAmount=");
		sb.append(getTransactionAmount());
		sb.append(", transactionDate=");
		sb.append(getTransactionDate());
		sb.append(", emailStatus=");
		sb.append(getEmailStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(79);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.rsvp.model.RsvpPayment");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsvpPaymentId</column-name><column-value><![CDATA[");
		sb.append(getRsvpPaymentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsvpDetailId</column-name><column-value><![CDATA[");
		sb.append(getRsvpDetailId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsvpId</column-name><column-value><![CDATA[");
		sb.append(getRsvpId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsvpTicketId</column-name><column-value><![CDATA[");
		sb.append(getRsvpTicketId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsvpDiscountId</column-name><column-value><![CDATA[");
		sb.append(getRsvpDiscountId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rsvpPromoCodeId</column-name><column-value><![CDATA[");
		sb.append(getRsvpPromoCodeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>numberOfPeople</column-name><column-value><![CDATA[");
		sb.append(getNumberOfPeople());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>discount</column-name><column-value><![CDATA[");
		sb.append(getDiscount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>netTotal</column-name><column-value><![CDATA[");
		sb.append(getNetTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ticketNumber</column-name><column-value><![CDATA[");
		sb.append(getTicketNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payerEmailAddress</column-name><column-value><![CDATA[");
		sb.append(getPayerEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>receiverEmailAddress</column-name><column-value><![CDATA[");
		sb.append(getReceiverEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transactionId</column-name><column-value><![CDATA[");
		sb.append(getTransactionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transactionStatus</column-name><column-value><![CDATA[");
		sb.append(getTransactionStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transactionAmount</column-name><column-value><![CDATA[");
		sb.append(getTransactionAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transactionDate</column-name><column-value><![CDATA[");
		sb.append(getTransactionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailStatus</column-name><column-value><![CDATA[");
		sb.append(getEmailStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RsvpPayment.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			RsvpPayment.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _rsvpPaymentId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _rsvpDetailId;
	private long _originalRsvpDetailId;
	private boolean _setOriginalRsvpDetailId;
	private long _rsvpId;
	private long _rsvpTicketId;
	private long _rsvpDiscountId;
	private long _rsvpPromoCodeId;
	private double _price;
	private int _numberOfPeople;
	private int _discount;
	private double _netTotal;
	private String _ticketNumber;
	private String _originalTicketNumber;
	private String _payerEmailAddress;
	private String _receiverEmailAddress;
	private String _transactionId;
	private String _transactionStatus;
	private String _originalTransactionStatus;
	private double _transactionAmount;
	private Date _transactionDate;
	private boolean _emailStatus;
	private long _columnBitmask;
	private RsvpPayment _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spprofile.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.sambaash.platform.srv.spprofile.model.ProfilePreferences;
import com.sambaash.platform.srv.spprofile.service.ProfilePreferencesLocalService;
import com.sambaash.platform.srv.spprofile.service.persistence.ProfilePreferencesPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the profile preferences local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.sambaash.platform.srv.spprofile.service.impl.ProfilePreferencesLocalServiceImpl}.
 * </p>
 *
 * @author harini
 * @see com.sambaash.platform.srv.spprofile.service.impl.ProfilePreferencesLocalServiceImpl
 * @see com.sambaash.platform.srv.spprofile.service.ProfilePreferencesLocalServiceUtil
 * @generated
 */
public abstract class ProfilePreferencesLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ProfilePreferencesLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.sambaash.platform.srv.spprofile.service.ProfilePreferencesLocalServiceUtil} to access the profile preferences local service.
	 */

	/**
	 * Adds the profile preferences to the database. Also notifies the appropriate model listeners.
	 *
	 * @param profilePreferences the profile preferences
	 * @return the profile preferences that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ProfilePreferences addProfilePreferences(
		ProfilePreferences profilePreferences) throws SystemException {
		profilePreferences.setNew(true);

		return profilePreferencesPersistence.update(profilePreferences);
	}

	/**
	 * Creates a new profile preferences with the primary key. Does not add the profile preferences to the database.
	 *
	 * @param proferenceId the primary key for the new profile preferences
	 * @return the new profile preferences
	 */
	@Override
	public ProfilePreferences createProfilePreferences(long proferenceId) {
		return profilePreferencesPersistence.create(proferenceId);
	}

	/**
	 * Deletes the profile preferences with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param proferenceId the primary key of the profile preferences
	 * @return the profile preferences that was removed
	 * @throws PortalException if a profile preferences with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ProfilePreferences deleteProfilePreferences(long proferenceId)
		throws PortalException, SystemException {
		return profilePreferencesPersistence.remove(proferenceId);
	}

	/**
	 * Deletes the profile preferences from the database. Also notifies the appropriate model listeners.
	 *
	 * @param profilePreferences the profile preferences
	 * @return the profile preferences that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ProfilePreferences deleteProfilePreferences(
		ProfilePreferences profilePreferences) throws SystemException {
		return profilePreferencesPersistence.remove(profilePreferences);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ProfilePreferences.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return profilePreferencesPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sambaash.platform.srv.spprofile.model.impl.ProfilePreferencesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return profilePreferencesPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sambaash.platform.srv.spprofile.model.impl.ProfilePreferencesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return profilePreferencesPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return profilePreferencesPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return profilePreferencesPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ProfilePreferences fetchProfilePreferences(long proferenceId)
		throws SystemException {
		return profilePreferencesPersistence.fetchByPrimaryKey(proferenceId);
	}

	/**
	 * Returns the profile preferences with the primary key.
	 *
	 * @param proferenceId the primary key of the profile preferences
	 * @return the profile preferences
	 * @throws PortalException if a profile preferences with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ProfilePreferences getProfilePreferences(long proferenceId)
		throws PortalException, SystemException {
		return profilePreferencesPersistence.findByPrimaryKey(proferenceId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return profilePreferencesPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns a range of all the profile preferenceses.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sambaash.platform.srv.spprofile.model.impl.ProfilePreferencesModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of profile preferenceses
	 * @param end the upper bound of the range of profile preferenceses (not inclusive)
	 * @return the range of profile preferenceses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<ProfilePreferences> getProfilePreferenceses(int start, int end)
		throws SystemException {
		return profilePreferencesPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of profile preferenceses.
	 *
	 * @return the number of profile preferenceses
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getProfilePreferencesesCount() throws SystemException {
		return profilePreferencesPersistence.countAll();
	}

	/**
	 * Updates the profile preferences in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param profilePreferences the profile preferences
	 * @return the profile preferences that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ProfilePreferences updateProfilePreferences(
		ProfilePreferences profilePreferences) throws SystemException {
		return profilePreferencesPersistence.update(profilePreferences);
	}

	/**
	 * Returns the profile preferences local service.
	 *
	 * @return the profile preferences local service
	 */
	public com.sambaash.platform.srv.spprofile.service.ProfilePreferencesLocalService getProfilePreferencesLocalService() {
		return profilePreferencesLocalService;
	}

	/**
	 * Sets the profile preferences local service.
	 *
	 * @param profilePreferencesLocalService the profile preferences local service
	 */
	public void setProfilePreferencesLocalService(
		com.sambaash.platform.srv.spprofile.service.ProfilePreferencesLocalService profilePreferencesLocalService) {
		this.profilePreferencesLocalService = profilePreferencesLocalService;
	}

	/**
	 * Returns the profile preferences remote service.
	 *
	 * @return the profile preferences remote service
	 */
	public com.sambaash.platform.srv.spprofile.service.ProfilePreferencesService getProfilePreferencesService() {
		return profilePreferencesService;
	}

	/**
	 * Sets the profile preferences remote service.
	 *
	 * @param profilePreferencesService the profile preferences remote service
	 */
	public void setProfilePreferencesService(
		com.sambaash.platform.srv.spprofile.service.ProfilePreferencesService profilePreferencesService) {
		this.profilePreferencesService = profilePreferencesService;
	}

	/**
	 * Returns the profile preferences persistence.
	 *
	 * @return the profile preferences persistence
	 */
	public ProfilePreferencesPersistence getProfilePreferencesPersistence() {
		return profilePreferencesPersistence;
	}

	/**
	 * Sets the profile preferences persistence.
	 *
	 * @param profilePreferencesPersistence the profile preferences persistence
	 */
	public void setProfilePreferencesPersistence(
		ProfilePreferencesPersistence profilePreferencesPersistence) {
		this.profilePreferencesPersistence = profilePreferencesPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.sambaash.platform.srv.spprofile.model.ProfilePreferences",
			profilePreferencesLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.sambaash.platform.srv.spprofile.model.ProfilePreferences");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ProfilePreferences.class;
	}

	protected String getModelClassName() {
		return ProfilePreferences.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = profilePreferencesPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.sambaash.platform.srv.spprofile.service.ProfilePreferencesLocalService.class)
	protected com.sambaash.platform.srv.spprofile.service.ProfilePreferencesLocalService profilePreferencesLocalService;
	@BeanReference(type = com.sambaash.platform.srv.spprofile.service.ProfilePreferencesService.class)
	protected com.sambaash.platform.srv.spprofile.service.ProfilePreferencesService profilePreferencesService;
	@BeanReference(type = ProfilePreferencesPersistence.class)
	protected ProfilePreferencesPersistence profilePreferencesPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ProfilePreferencesLocalServiceClpInvoker _clpInvoker = new ProfilePreferencesLocalServiceClpInvoker();
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.model.LogActivity;
import com.sambaash.platform.srv.model.LogActivityModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LogActivity service. Represents a row in the &quot;SPLogActivity&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.model.LogActivityModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LogActivityImpl}.
 * </p>
 *
 * @author aishwarya
 * @see LogActivityImpl
 * @see com.sambaash.platform.srv.model.LogActivity
 * @see com.sambaash.platform.srv.model.LogActivityModel
 * @generated
 */
public class LogActivityModelImpl extends BaseModelImpl<LogActivity>
	implements LogActivityModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a log activity model instance should use the {@link com.sambaash.platform.srv.model.LogActivity} interface instead.
	 */
	public static final String TABLE_NAME = "SPLogActivity";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spLogActivityId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "entityClassId", Types.BIGINT },
			{ "entityClassName", Types.VARCHAR },
			{ "entityId", Types.BIGINT },
			{ "savedByUserId", Types.BIGINT },
			{ "activityTitle", Types.VARCHAR },
			{ "activityType", Types.VARCHAR },
			{ "activityOutcome", Types.VARCHAR },
			{ "activityDate", Types.TIMESTAMP },
			{ "activityTime", Types.VARCHAR },
			{ "activityContent", Types.VARCHAR },
			{ "fileEntryId", Types.VARCHAR },
			{ "associatedWith", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "parentLogActivityId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPLogActivity (spLogActivityId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,entityClassId BIGINT(20),entityClassName VARCHAR(75) null,entityId BIGINT(20),savedByUserId BIGINT(20),activityTitle VARCHAR(75) null,activityType VARCHAR(75) null,activityOutcome VARCHAR(75) null,activityDate DATETIME null,activityTime VARCHAR(75) null,activityContent VARCHAR(75) null,fileEntryId VARCHAR(75) null,associatedWith BIGINT(20),status INTEGER,parentLogActivityId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPLogActivity";
	public static final String ORDER_BY_JPQL = " ORDER BY logActivity.spLogActivityId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPLogActivity.spLogActivityId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.model.LogActivity"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.model.LogActivity"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.model.LogActivity"),
			true);
	public static long ENTITYCLASSID_COLUMN_BITMASK = 1L;
	public static long ENTITYID_COLUMN_BITMASK = 2L;
	public static long PARENTLOGACTIVITYID_COLUMN_BITMASK = 4L;
	public static long SPLOGACTIVITYID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.model.LogActivity"));

	public LogActivityModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spLogActivityId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpLogActivityId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spLogActivityId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LogActivity.class;
	}

	@Override
	public String getModelClassName() {
		return LogActivity.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spLogActivityId", getSpLogActivityId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("entityClassId", getEntityClassId());
		attributes.put("entityClassName", getEntityClassName());
		attributes.put("entityId", getEntityId());
		attributes.put("savedByUserId", getSavedByUserId());
		attributes.put("activityTitle", getActivityTitle());
		attributes.put("activityType", getActivityType());
		attributes.put("activityOutcome", getActivityOutcome());
		attributes.put("activityDate", getActivityDate());
		attributes.put("activityTime", getActivityTime());
		attributes.put("activityContent", getActivityContent());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("associatedWith", getAssociatedWith());
		attributes.put("status", getStatus());
		attributes.put("parentLogActivityId", getParentLogActivityId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spLogActivityId = (Long)attributes.get("spLogActivityId");

		if (spLogActivityId != null) {
			setSpLogActivityId(spLogActivityId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long entityClassId = (Long)attributes.get("entityClassId");

		if (entityClassId != null) {
			setEntityClassId(entityClassId);
		}

		String entityClassName = (String)attributes.get("entityClassName");

		if (entityClassName != null) {
			setEntityClassName(entityClassName);
		}

		Long entityId = (Long)attributes.get("entityId");

		if (entityId != null) {
			setEntityId(entityId);
		}

		Long savedByUserId = (Long)attributes.get("savedByUserId");

		if (savedByUserId != null) {
			setSavedByUserId(savedByUserId);
		}

		String activityTitle = (String)attributes.get("activityTitle");

		if (activityTitle != null) {
			setActivityTitle(activityTitle);
		}

		String activityType = (String)attributes.get("activityType");

		if (activityType != null) {
			setActivityType(activityType);
		}

		String activityOutcome = (String)attributes.get("activityOutcome");

		if (activityOutcome != null) {
			setActivityOutcome(activityOutcome);
		}

		Date activityDate = (Date)attributes.get("activityDate");

		if (activityDate != null) {
			setActivityDate(activityDate);
		}

		String activityTime = (String)attributes.get("activityTime");

		if (activityTime != null) {
			setActivityTime(activityTime);
		}

		String activityContent = (String)attributes.get("activityContent");

		if (activityContent != null) {
			setActivityContent(activityContent);
		}

		String fileEntryId = (String)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		Long associatedWith = (Long)attributes.get("associatedWith");

		if (associatedWith != null) {
			setAssociatedWith(associatedWith);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long parentLogActivityId = (Long)attributes.get("parentLogActivityId");

		if (parentLogActivityId != null) {
			setParentLogActivityId(parentLogActivityId);
		}
	}

	@Override
	public long getSpLogActivityId() {
		return _spLogActivityId;
	}

	@Override
	public void setSpLogActivityId(long spLogActivityId) {
		_spLogActivityId = spLogActivityId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getEntityClassId() {
		return _entityClassId;
	}

	@Override
	public void setEntityClassId(long entityClassId) {
		_columnBitmask |= ENTITYCLASSID_COLUMN_BITMASK;

		if (!_setOriginalEntityClassId) {
			_setOriginalEntityClassId = true;

			_originalEntityClassId = _entityClassId;
		}

		_entityClassId = entityClassId;
	}

	public long getOriginalEntityClassId() {
		return _originalEntityClassId;
	}

	@Override
	public String getEntityClassName() {
		if (_entityClassName == null) {
			return StringPool.BLANK;
		}
		else {
			return _entityClassName;
		}
	}

	@Override
	public void setEntityClassName(String entityClassName) {
		_entityClassName = entityClassName;
	}

	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		_columnBitmask |= ENTITYID_COLUMN_BITMASK;

		if (!_setOriginalEntityId) {
			_setOriginalEntityId = true;

			_originalEntityId = _entityId;
		}

		_entityId = entityId;
	}

	public long getOriginalEntityId() {
		return _originalEntityId;
	}

	@Override
	public long getSavedByUserId() {
		return _savedByUserId;
	}

	@Override
	public void setSavedByUserId(long savedByUserId) {
		_savedByUserId = savedByUserId;
	}

	@Override
	public String getSavedByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getSavedByUserId(), "uuid",
			_savedByUserUuid);
	}

	@Override
	public void setSavedByUserUuid(String savedByUserUuid) {
		_savedByUserUuid = savedByUserUuid;
	}

	@Override
	public String getActivityTitle() {
		if (_activityTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityTitle;
		}
	}

	@Override
	public void setActivityTitle(String activityTitle) {
		_activityTitle = activityTitle;
	}

	@Override
	public String getActivityType() {
		if (_activityType == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityType;
		}
	}

	@Override
	public void setActivityType(String activityType) {
		_activityType = activityType;
	}

	@Override
	public String getActivityOutcome() {
		if (_activityOutcome == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityOutcome;
		}
	}

	@Override
	public void setActivityOutcome(String activityOutcome) {
		_activityOutcome = activityOutcome;
	}

	@Override
	public Date getActivityDate() {
		return _activityDate;
	}

	@Override
	public void setActivityDate(Date activityDate) {
		_activityDate = activityDate;
	}

	@Override
	public String getActivityTime() {
		if (_activityTime == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityTime;
		}
	}

	@Override
	public void setActivityTime(String activityTime) {
		_activityTime = activityTime;
	}

	@Override
	public String getActivityContent() {
		if (_activityContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _activityContent;
		}
	}

	@Override
	public void setActivityContent(String activityContent) {
		_activityContent = activityContent;
	}

	@Override
	public String getFileEntryId() {
		if (_fileEntryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileEntryId;
		}
	}

	@Override
	public void setFileEntryId(String fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@Override
	public long getAssociatedWith() {
		return _associatedWith;
	}

	@Override
	public void setAssociatedWith(long associatedWith) {
		_associatedWith = associatedWith;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public long getParentLogActivityId() {
		return _parentLogActivityId;
	}

	@Override
	public void setParentLogActivityId(long parentLogActivityId) {
		_columnBitmask |= PARENTLOGACTIVITYID_COLUMN_BITMASK;

		if (!_setOriginalParentLogActivityId) {
			_setOriginalParentLogActivityId = true;

			_originalParentLogActivityId = _parentLogActivityId;
		}

		_parentLogActivityId = parentLogActivityId;
	}

	public long getOriginalParentLogActivityId() {
		return _originalParentLogActivityId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LogActivity.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LogActivity toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LogActivity)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LogActivityImpl logActivityImpl = new LogActivityImpl();

		logActivityImpl.setSpLogActivityId(getSpLogActivityId());
		logActivityImpl.setGroupId(getGroupId());
		logActivityImpl.setCompanyId(getCompanyId());
		logActivityImpl.setUserId(getUserId());
		logActivityImpl.setUserName(getUserName());
		logActivityImpl.setCreateDate(getCreateDate());
		logActivityImpl.setModifiedDate(getModifiedDate());
		logActivityImpl.setEntityClassId(getEntityClassId());
		logActivityImpl.setEntityClassName(getEntityClassName());
		logActivityImpl.setEntityId(getEntityId());
		logActivityImpl.setSavedByUserId(getSavedByUserId());
		logActivityImpl.setActivityTitle(getActivityTitle());
		logActivityImpl.setActivityType(getActivityType());
		logActivityImpl.setActivityOutcome(getActivityOutcome());
		logActivityImpl.setActivityDate(getActivityDate());
		logActivityImpl.setActivityTime(getActivityTime());
		logActivityImpl.setActivityContent(getActivityContent());
		logActivityImpl.setFileEntryId(getFileEntryId());
		logActivityImpl.setAssociatedWith(getAssociatedWith());
		logActivityImpl.setStatus(getStatus());
		logActivityImpl.setParentLogActivityId(getParentLogActivityId());

		logActivityImpl.resetOriginalValues();

		return logActivityImpl;
	}

	@Override
	public int compareTo(LogActivity logActivity) {
		long primaryKey = logActivity.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LogActivity)) {
			return false;
		}

		LogActivity logActivity = (LogActivity)obj;

		long primaryKey = logActivity.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LogActivityModelImpl logActivityModelImpl = this;

		logActivityModelImpl._originalEntityClassId = logActivityModelImpl._entityClassId;

		logActivityModelImpl._setOriginalEntityClassId = false;

		logActivityModelImpl._originalEntityId = logActivityModelImpl._entityId;

		logActivityModelImpl._setOriginalEntityId = false;

		logActivityModelImpl._originalParentLogActivityId = logActivityModelImpl._parentLogActivityId;

		logActivityModelImpl._setOriginalParentLogActivityId = false;

		logActivityModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LogActivity> toCacheModel() {
		LogActivityCacheModel logActivityCacheModel = new LogActivityCacheModel();

		logActivityCacheModel.spLogActivityId = getSpLogActivityId();

		logActivityCacheModel.groupId = getGroupId();

		logActivityCacheModel.companyId = getCompanyId();

		logActivityCacheModel.userId = getUserId();

		logActivityCacheModel.userName = getUserName();

		String userName = logActivityCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			logActivityCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			logActivityCacheModel.createDate = createDate.getTime();
		}
		else {
			logActivityCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			logActivityCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			logActivityCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		logActivityCacheModel.entityClassId = getEntityClassId();

		logActivityCacheModel.entityClassName = getEntityClassName();

		String entityClassName = logActivityCacheModel.entityClassName;

		if ((entityClassName != null) && (entityClassName.length() == 0)) {
			logActivityCacheModel.entityClassName = null;
		}

		logActivityCacheModel.entityId = getEntityId();

		logActivityCacheModel.savedByUserId = getSavedByUserId();

		logActivityCacheModel.activityTitle = getActivityTitle();

		String activityTitle = logActivityCacheModel.activityTitle;

		if ((activityTitle != null) && (activityTitle.length() == 0)) {
			logActivityCacheModel.activityTitle = null;
		}

		logActivityCacheModel.activityType = getActivityType();

		String activityType = logActivityCacheModel.activityType;

		if ((activityType != null) && (activityType.length() == 0)) {
			logActivityCacheModel.activityType = null;
		}

		logActivityCacheModel.activityOutcome = getActivityOutcome();

		String activityOutcome = logActivityCacheModel.activityOutcome;

		if ((activityOutcome != null) && (activityOutcome.length() == 0)) {
			logActivityCacheModel.activityOutcome = null;
		}

		Date activityDate = getActivityDate();

		if (activityDate != null) {
			logActivityCacheModel.activityDate = activityDate.getTime();
		}
		else {
			logActivityCacheModel.activityDate = Long.MIN_VALUE;
		}

		logActivityCacheModel.activityTime = getActivityTime();

		String activityTime = logActivityCacheModel.activityTime;

		if ((activityTime != null) && (activityTime.length() == 0)) {
			logActivityCacheModel.activityTime = null;
		}

		logActivityCacheModel.activityContent = getActivityContent();

		String activityContent = logActivityCacheModel.activityContent;

		if ((activityContent != null) && (activityContent.length() == 0)) {
			logActivityCacheModel.activityContent = null;
		}

		logActivityCacheModel.fileEntryId = getFileEntryId();

		String fileEntryId = logActivityCacheModel.fileEntryId;

		if ((fileEntryId != null) && (fileEntryId.length() == 0)) {
			logActivityCacheModel.fileEntryId = null;
		}

		logActivityCacheModel.associatedWith = getAssociatedWith();

		logActivityCacheModel.status = getStatus();

		logActivityCacheModel.parentLogActivityId = getParentLogActivityId();

		return logActivityCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(43);

		sb.append("{spLogActivityId=");
		sb.append(getSpLogActivityId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", entityClassId=");
		sb.append(getEntityClassId());
		sb.append(", entityClassName=");
		sb.append(getEntityClassName());
		sb.append(", entityId=");
		sb.append(getEntityId());
		sb.append(", savedByUserId=");
		sb.append(getSavedByUserId());
		sb.append(", activityTitle=");
		sb.append(getActivityTitle());
		sb.append(", activityType=");
		sb.append(getActivityType());
		sb.append(", activityOutcome=");
		sb.append(getActivityOutcome());
		sb.append(", activityDate=");
		sb.append(getActivityDate());
		sb.append(", activityTime=");
		sb.append(getActivityTime());
		sb.append(", activityContent=");
		sb.append(getActivityContent());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", associatedWith=");
		sb.append(getAssociatedWith());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", parentLogActivityId=");
		sb.append(getParentLogActivityId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(67);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.model.LogActivity");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spLogActivityId</column-name><column-value><![CDATA[");
		sb.append(getSpLogActivityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityClassId</column-name><column-value><![CDATA[");
		sb.append(getEntityClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityClassName</column-name><column-value><![CDATA[");
		sb.append(getEntityClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityId</column-name><column-value><![CDATA[");
		sb.append(getEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>savedByUserId</column-name><column-value><![CDATA[");
		sb.append(getSavedByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityTitle</column-name><column-value><![CDATA[");
		sb.append(getActivityTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityType</column-name><column-value><![CDATA[");
		sb.append(getActivityType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityOutcome</column-name><column-value><![CDATA[");
		sb.append(getActivityOutcome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityDate</column-name><column-value><![CDATA[");
		sb.append(getActivityDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityTime</column-name><column-value><![CDATA[");
		sb.append(getActivityTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>activityContent</column-name><column-value><![CDATA[");
		sb.append(getActivityContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>associatedWith</column-name><column-value><![CDATA[");
		sb.append(getAssociatedWith());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentLogActivityId</column-name><column-value><![CDATA[");
		sb.append(getParentLogActivityId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LogActivity.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LogActivity.class
		};
	private long _spLogActivityId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _entityClassId;
	private long _originalEntityClassId;
	private boolean _setOriginalEntityClassId;
	private String _entityClassName;
	private long _entityId;
	private long _originalEntityId;
	private boolean _setOriginalEntityId;
	private long _savedByUserId;
	private String _savedByUserUuid;
	private String _activityTitle;
	private String _activityType;
	private String _activityOutcome;
	private Date _activityDate;
	private String _activityTime;
	private String _activityContent;
	private String _fileEntryId;
	private long _associatedWith;
	private int _status;
	private long _parentLogActivityId;
	private long _originalParentLogActivityId;
	private boolean _setOriginalParentLogActivityId;
	private long _columnBitmask;
	private LogActivity _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spchallenge.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spchallenge.model.SPChallenge;
import com.sambaash.platform.srv.spchallenge.model.SPChallengeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPChallenge service. Represents a row in the &quot;SPChallenge&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spchallenge.model.SPChallengeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPChallengeImpl}.
 * </p>
 *
 * @author pradeep
 * @see SPChallengeImpl
 * @see com.sambaash.platform.srv.spchallenge.model.SPChallenge
 * @see com.sambaash.platform.srv.spchallenge.model.SPChallengeModel
 * @generated
 */
public class SPChallengeModelImpl extends BaseModelImpl<SPChallenge>
	implements SPChallengeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p challenge model instance should use the {@link com.sambaash.platform.srv.spchallenge.model.SPChallenge} interface instead.
	 */
	public static final String TABLE_NAME = "SPChallenge";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spChallengeId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "openTo", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "background", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "scope", Types.VARCHAR },
			{ "benefits", Types.VARCHAR },
			{ "budget", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "applyBy", Types.TIMESTAMP },
			{ "extras", Types.VARCHAR },
			{ "active_", Types.BOOLEAN },
			{ "notifyTo", Types.VARCHAR },
			{ "scout", Types.VARCHAR },
			{ "logoId", Types.BIGINT },
			{ "draft", Types.BOOLEAN },
			{ "budgetCcySign", Types.VARCHAR },
			{ "brand", Types.BIGINT },
			{ "vpApprover", Types.VARCHAR },
			{ "budgetApprover", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SPChallenge (uuid_ VARCHAR(75) null,spChallengeId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(100) null,createDate DATETIME null,modifiedDate DATETIME null,name VARCHAR(200) null,openTo VARCHAR(200) null,type_ VARCHAR(200) null,background LONGTEXT null,description LONGTEXT null,scope LONGTEXT null,benefits LONGTEXT null,budget VARCHAR(50) null,startDate DATETIME null,endDate DATETIME null,applyBy DATETIME null,extras LONGTEXT null,active_ BOOLEAN,notifyTo VARCHAR(2000) null,scout VARCHAR(300) null,logoId BIGINT(20),draft BOOLEAN,budgetCcySign VARCHAR(4) null,brand BIGINT(20),vpApprover VARCHAR(200) null,budgetApprover VARCHAR(200) null)";
	public static final String TABLE_SQL_DROP = "drop table SPChallenge";
	public static final String ORDER_BY_JPQL = " ORDER BY spChallenge.spChallengeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPChallenge.spChallengeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spchallenge.model.SPChallenge"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spchallenge.model.SPChallenge"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spchallenge.model.SPChallenge"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;
	public static long SPCHALLENGEID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spchallenge.model.SPChallenge"));

	public SPChallengeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spChallengeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpChallengeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spChallengeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPChallenge.class;
	}

	@Override
	public String getModelClassName() {
		return SPChallenge.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("spChallengeId", getSpChallengeId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("name", getName());
		attributes.put("openTo", getOpenTo());
		attributes.put("type", getType());
		attributes.put("background", getBackground());
		attributes.put("description", getDescription());
		attributes.put("scope", getScope());
		attributes.put("benefits", getBenefits());
		attributes.put("budget", getBudget());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("applyBy", getApplyBy());
		attributes.put("extras", getExtras());
		attributes.put("active", getActive());
		attributes.put("notifyTo", getNotifyTo());
		attributes.put("scout", getScout());
		attributes.put("logoId", getLogoId());
		attributes.put("draft", getDraft());
		attributes.put("budgetCcySign", getBudgetCcySign());
		attributes.put("brand", getBrand());
		attributes.put("vpApprover", getVpApprover());
		attributes.put("budgetApprover", getBudgetApprover());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long spChallengeId = (Long)attributes.get("spChallengeId");

		if (spChallengeId != null) {
			setSpChallengeId(spChallengeId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String openTo = (String)attributes.get("openTo");

		if (openTo != null) {
			setOpenTo(openTo);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String background = (String)attributes.get("background");

		if (background != null) {
			setBackground(background);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String scope = (String)attributes.get("scope");

		if (scope != null) {
			setScope(scope);
		}

		String benefits = (String)attributes.get("benefits");

		if (benefits != null) {
			setBenefits(benefits);
		}

		String budget = (String)attributes.get("budget");

		if (budget != null) {
			setBudget(budget);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Date applyBy = (Date)attributes.get("applyBy");

		if (applyBy != null) {
			setApplyBy(applyBy);
		}

		String extras = (String)attributes.get("extras");

		if (extras != null) {
			setExtras(extras);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		String notifyTo = (String)attributes.get("notifyTo");

		if (notifyTo != null) {
			setNotifyTo(notifyTo);
		}

		String scout = (String)attributes.get("scout");

		if (scout != null) {
			setScout(scout);
		}

		Long logoId = (Long)attributes.get("logoId");

		if (logoId != null) {
			setLogoId(logoId);
		}

		Boolean draft = (Boolean)attributes.get("draft");

		if (draft != null) {
			setDraft(draft);
		}

		String budgetCcySign = (String)attributes.get("budgetCcySign");

		if (budgetCcySign != null) {
			setBudgetCcySign(budgetCcySign);
		}

		Long brand = (Long)attributes.get("brand");

		if (brand != null) {
			setBrand(brand);
		}

		String vpApprover = (String)attributes.get("vpApprover");

		if (vpApprover != null) {
			setVpApprover(vpApprover);
		}

		String budgetApprover = (String)attributes.get("budgetApprover");

		if (budgetApprover != null) {
			setBudgetApprover(budgetApprover);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getSpChallengeId() {
		return _spChallengeId;
	}

	@Override
	public void setSpChallengeId(long spChallengeId) {
		_spChallengeId = spChallengeId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getOpenTo() {
		if (_openTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _openTo;
		}
	}

	@Override
	public void setOpenTo(String openTo) {
		_openTo = openTo;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@Override
	public String getBackground() {
		if (_background == null) {
			return StringPool.BLANK;
		}
		else {
			return _background;
		}
	}

	@Override
	public void setBackground(String background) {
		_background = background;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public String getScope() {
		if (_scope == null) {
			return StringPool.BLANK;
		}
		else {
			return _scope;
		}
	}

	@Override
	public void setScope(String scope) {
		_scope = scope;
	}

	@Override
	public String getBenefits() {
		if (_benefits == null) {
			return StringPool.BLANK;
		}
		else {
			return _benefits;
		}
	}

	@Override
	public void setBenefits(String benefits) {
		_benefits = benefits;
	}

	@Override
	public String getBudget() {
		if (_budget == null) {
			return StringPool.BLANK;
		}
		else {
			return _budget;
		}
	}

	@Override
	public void setBudget(String budget) {
		_budget = budget;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public Date getApplyBy() {
		return _applyBy;
	}

	@Override
	public void setApplyBy(Date applyBy) {
		_applyBy = applyBy;
	}

	@Override
	public String getExtras() {
		if (_extras == null) {
			return StringPool.BLANK;
		}
		else {
			return _extras;
		}
	}

	@Override
	public void setExtras(String extras) {
		_extras = extras;
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	@Override
	public String getNotifyTo() {
		if (_notifyTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _notifyTo;
		}
	}

	@Override
	public void setNotifyTo(String notifyTo) {
		_notifyTo = notifyTo;
	}

	@Override
	public String getScout() {
		if (_scout == null) {
			return StringPool.BLANK;
		}
		else {
			return _scout;
		}
	}

	@Override
	public void setScout(String scout) {
		_scout = scout;
	}

	@Override
	public long getLogoId() {
		return _logoId;
	}

	@Override
	public void setLogoId(long logoId) {
		_logoId = logoId;
	}

	@Override
	public boolean getDraft() {
		return _draft;
	}

	@Override
	public boolean isDraft() {
		return _draft;
	}

	@Override
	public void setDraft(boolean draft) {
		_draft = draft;
	}

	@Override
	public String getBudgetCcySign() {
		if (_budgetCcySign == null) {
			return StringPool.BLANK;
		}
		else {
			return _budgetCcySign;
		}
	}

	@Override
	public void setBudgetCcySign(String budgetCcySign) {
		_budgetCcySign = budgetCcySign;
	}

	@Override
	public long getBrand() {
		return _brand;
	}

	@Override
	public void setBrand(long brand) {
		_brand = brand;
	}

	@Override
	public String getVpApprover() {
		if (_vpApprover == null) {
			return StringPool.BLANK;
		}
		else {
			return _vpApprover;
		}
	}

	@Override
	public void setVpApprover(String vpApprover) {
		_vpApprover = vpApprover;
	}

	@Override
	public String getBudgetApprover() {
		if (_budgetApprover == null) {
			return StringPool.BLANK;
		}
		else {
			return _budgetApprover;
		}
	}

	@Override
	public void setBudgetApprover(String budgetApprover) {
		_budgetApprover = budgetApprover;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				SPChallenge.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPChallenge.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPChallenge toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPChallenge)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPChallengeImpl spChallengeImpl = new SPChallengeImpl();

		spChallengeImpl.setUuid(getUuid());
		spChallengeImpl.setSpChallengeId(getSpChallengeId());
		spChallengeImpl.setGroupId(getGroupId());
		spChallengeImpl.setCompanyId(getCompanyId());
		spChallengeImpl.setUserId(getUserId());
		spChallengeImpl.setUserName(getUserName());
		spChallengeImpl.setCreateDate(getCreateDate());
		spChallengeImpl.setModifiedDate(getModifiedDate());
		spChallengeImpl.setName(getName());
		spChallengeImpl.setOpenTo(getOpenTo());
		spChallengeImpl.setType(getType());
		spChallengeImpl.setBackground(getBackground());
		spChallengeImpl.setDescription(getDescription());
		spChallengeImpl.setScope(getScope());
		spChallengeImpl.setBenefits(getBenefits());
		spChallengeImpl.setBudget(getBudget());
		spChallengeImpl.setStartDate(getStartDate());
		spChallengeImpl.setEndDate(getEndDate());
		spChallengeImpl.setApplyBy(getApplyBy());
		spChallengeImpl.setExtras(getExtras());
		spChallengeImpl.setActive(getActive());
		spChallengeImpl.setNotifyTo(getNotifyTo());
		spChallengeImpl.setScout(getScout());
		spChallengeImpl.setLogoId(getLogoId());
		spChallengeImpl.setDraft(getDraft());
		spChallengeImpl.setBudgetCcySign(getBudgetCcySign());
		spChallengeImpl.setBrand(getBrand());
		spChallengeImpl.setVpApprover(getVpApprover());
		spChallengeImpl.setBudgetApprover(getBudgetApprover());

		spChallengeImpl.resetOriginalValues();

		return spChallengeImpl;
	}

	@Override
	public int compareTo(SPChallenge spChallenge) {
		long primaryKey = spChallenge.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPChallenge)) {
			return false;
		}

		SPChallenge spChallenge = (SPChallenge)obj;

		long primaryKey = spChallenge.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPChallengeModelImpl spChallengeModelImpl = this;

		spChallengeModelImpl._originalUuid = spChallengeModelImpl._uuid;

		spChallengeModelImpl._originalGroupId = spChallengeModelImpl._groupId;

		spChallengeModelImpl._setOriginalGroupId = false;

		spChallengeModelImpl._originalCompanyId = spChallengeModelImpl._companyId;

		spChallengeModelImpl._setOriginalCompanyId = false;

		spChallengeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPChallenge> toCacheModel() {
		SPChallengeCacheModel spChallengeCacheModel = new SPChallengeCacheModel();

		spChallengeCacheModel.uuid = getUuid();

		String uuid = spChallengeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			spChallengeCacheModel.uuid = null;
		}

		spChallengeCacheModel.spChallengeId = getSpChallengeId();

		spChallengeCacheModel.groupId = getGroupId();

		spChallengeCacheModel.companyId = getCompanyId();

		spChallengeCacheModel.userId = getUserId();

		spChallengeCacheModel.userName = getUserName();

		String userName = spChallengeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			spChallengeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			spChallengeCacheModel.createDate = createDate.getTime();
		}
		else {
			spChallengeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spChallengeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spChallengeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		spChallengeCacheModel.name = getName();

		String name = spChallengeCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			spChallengeCacheModel.name = null;
		}

		spChallengeCacheModel.openTo = getOpenTo();

		String openTo = spChallengeCacheModel.openTo;

		if ((openTo != null) && (openTo.length() == 0)) {
			spChallengeCacheModel.openTo = null;
		}

		spChallengeCacheModel.type = getType();

		String type = spChallengeCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			spChallengeCacheModel.type = null;
		}

		spChallengeCacheModel.background = getBackground();

		String background = spChallengeCacheModel.background;

		if ((background != null) && (background.length() == 0)) {
			spChallengeCacheModel.background = null;
		}

		spChallengeCacheModel.description = getDescription();

		String description = spChallengeCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			spChallengeCacheModel.description = null;
		}

		spChallengeCacheModel.scope = getScope();

		String scope = spChallengeCacheModel.scope;

		if ((scope != null) && (scope.length() == 0)) {
			spChallengeCacheModel.scope = null;
		}

		spChallengeCacheModel.benefits = getBenefits();

		String benefits = spChallengeCacheModel.benefits;

		if ((benefits != null) && (benefits.length() == 0)) {
			spChallengeCacheModel.benefits = null;
		}

		spChallengeCacheModel.budget = getBudget();

		String budget = spChallengeCacheModel.budget;

		if ((budget != null) && (budget.length() == 0)) {
			spChallengeCacheModel.budget = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			spChallengeCacheModel.startDate = startDate.getTime();
		}
		else {
			spChallengeCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			spChallengeCacheModel.endDate = endDate.getTime();
		}
		else {
			spChallengeCacheModel.endDate = Long.MIN_VALUE;
		}

		Date applyBy = getApplyBy();

		if (applyBy != null) {
			spChallengeCacheModel.applyBy = applyBy.getTime();
		}
		else {
			spChallengeCacheModel.applyBy = Long.MIN_VALUE;
		}

		spChallengeCacheModel.extras = getExtras();

		String extras = spChallengeCacheModel.extras;

		if ((extras != null) && (extras.length() == 0)) {
			spChallengeCacheModel.extras = null;
		}

		spChallengeCacheModel.active = getActive();

		spChallengeCacheModel.notifyTo = getNotifyTo();

		String notifyTo = spChallengeCacheModel.notifyTo;

		if ((notifyTo != null) && (notifyTo.length() == 0)) {
			spChallengeCacheModel.notifyTo = null;
		}

		spChallengeCacheModel.scout = getScout();

		String scout = spChallengeCacheModel.scout;

		if ((scout != null) && (scout.length() == 0)) {
			spChallengeCacheModel.scout = null;
		}

		spChallengeCacheModel.logoId = getLogoId();

		spChallengeCacheModel.draft = getDraft();

		spChallengeCacheModel.budgetCcySign = getBudgetCcySign();

		String budgetCcySign = spChallengeCacheModel.budgetCcySign;

		if ((budgetCcySign != null) && (budgetCcySign.length() == 0)) {
			spChallengeCacheModel.budgetCcySign = null;
		}

		spChallengeCacheModel.brand = getBrand();

		spChallengeCacheModel.vpApprover = getVpApprover();

		String vpApprover = spChallengeCacheModel.vpApprover;

		if ((vpApprover != null) && (vpApprover.length() == 0)) {
			spChallengeCacheModel.vpApprover = null;
		}

		spChallengeCacheModel.budgetApprover = getBudgetApprover();

		String budgetApprover = spChallengeCacheModel.budgetApprover;

		if ((budgetApprover != null) && (budgetApprover.length() == 0)) {
			spChallengeCacheModel.budgetApprover = null;
		}

		return spChallengeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(59);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", spChallengeId=");
		sb.append(getSpChallengeId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", openTo=");
		sb.append(getOpenTo());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", background=");
		sb.append(getBackground());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", scope=");
		sb.append(getScope());
		sb.append(", benefits=");
		sb.append(getBenefits());
		sb.append(", budget=");
		sb.append(getBudget());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", applyBy=");
		sb.append(getApplyBy());
		sb.append(", extras=");
		sb.append(getExtras());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", notifyTo=");
		sb.append(getNotifyTo());
		sb.append(", scout=");
		sb.append(getScout());
		sb.append(", logoId=");
		sb.append(getLogoId());
		sb.append(", draft=");
		sb.append(getDraft());
		sb.append(", budgetCcySign=");
		sb.append(getBudgetCcySign());
		sb.append(", brand=");
		sb.append(getBrand());
		sb.append(", vpApprover=");
		sb.append(getVpApprover());
		sb.append(", budgetApprover=");
		sb.append(getBudgetApprover());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(91);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.spchallenge.model.SPChallenge");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spChallengeId</column-name><column-value><![CDATA[");
		sb.append(getSpChallengeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>openTo</column-name><column-value><![CDATA[");
		sb.append(getOpenTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>background</column-name><column-value><![CDATA[");
		sb.append(getBackground());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scope</column-name><column-value><![CDATA[");
		sb.append(getScope());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>benefits</column-name><column-value><![CDATA[");
		sb.append(getBenefits());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>budget</column-name><column-value><![CDATA[");
		sb.append(getBudget());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applyBy</column-name><column-value><![CDATA[");
		sb.append(getApplyBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extras</column-name><column-value><![CDATA[");
		sb.append(getExtras());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notifyTo</column-name><column-value><![CDATA[");
		sb.append(getNotifyTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scout</column-name><column-value><![CDATA[");
		sb.append(getScout());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>logoId</column-name><column-value><![CDATA[");
		sb.append(getLogoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>draft</column-name><column-value><![CDATA[");
		sb.append(getDraft());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>budgetCcySign</column-name><column-value><![CDATA[");
		sb.append(getBudgetCcySign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>brand</column-name><column-value><![CDATA[");
		sb.append(getBrand());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>vpApprover</column-name><column-value><![CDATA[");
		sb.append(getVpApprover());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>budgetApprover</column-name><column-value><![CDATA[");
		sb.append(getBudgetApprover());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPChallenge.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPChallenge.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _spChallengeId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _name;
	private String _openTo;
	private String _type;
	private String _background;
	private String _description;
	private String _scope;
	private String _benefits;
	private String _budget;
	private Date _startDate;
	private Date _endDate;
	private Date _applyBy;
	private String _extras;
	private boolean _active;
	private String _notifyTo;
	private String _scout;
	private long _logoId;
	private boolean _draft;
	private String _budgetCcySign;
	private long _brand;
	private String _vpApprover;
	private String _budgetApprover;
	private long _columnBitmask;
	private SPChallenge _escapedModel;
}
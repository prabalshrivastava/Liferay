/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spservices.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spservices.model.SPUserType;
import com.sambaash.platform.srv.spservices.model.SPUserTypeModel;
import com.sambaash.platform.srv.spservices.model.SPUserTypeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SPUserType service. Represents a row in the &quot;SPUserType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spservices.model.SPUserTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPUserTypeImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see SPUserTypeImpl
 * @see com.sambaash.platform.srv.spservices.model.SPUserType
 * @see com.sambaash.platform.srv.spservices.model.SPUserTypeModel
 * @generated
 */
@JSON(strict = true)
public class SPUserTypeModelImpl extends BaseModelImpl<SPUserType>
	implements SPUserTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p user type model instance should use the {@link com.sambaash.platform.srv.spservices.model.SPUserType} interface instead.
	 */
	public static final String TABLE_NAME = "SPUserType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spUserTypeId", Types.BIGINT },
			{ "spSiteId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userTypeId", Types.BIGINT },
			{ "userStatusId", Types.BIGINT },
			{ "declarationCompleted", Types.BOOLEAN },
			{ "declarationDate", Types.BIGINT },
			{ "declarationStorageId", Types.BIGINT },
			{ "pdpaCompleted", Types.BOOLEAN },
			{ "pdpaCompletionDate", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createdBy", Types.BIGINT },
			{ "modifiedBy", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table SPUserType (uuid_ VARCHAR(75) null,spUserTypeId BIGINT(20) not null primary key,spSiteId BIGINT(20),userId BIGINT(20),userTypeId BIGINT(20),userStatusId BIGINT(20),declarationCompleted BOOLEAN,declarationDate BIGINT(20),declarationStorageId BIGINT(20),pdpaCompleted BOOLEAN,pdpaCompletionDate BIGINT(20),groupId BIGINT(20),companyId BIGINT(20),createdBy BIGINT(20),modifiedBy BIGINT(20),createdDate DATETIME null,modifiedDate DATETIME null)";
	public static final String TABLE_SQL_DROP = "drop table SPUserType";
	public static final String ORDER_BY_JPQL = " ORDER BY spUserType.spUserTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPUserType.spUserTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spservices.model.SPUserType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spservices.model.SPUserType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spservices.model.SPUserType"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long SPSITEID_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static long USERTYPEID_COLUMN_BITMASK = 16L;
	public static long UUID_COLUMN_BITMASK = 32L;
	public static long SPUSERTYPEID_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SPUserType toModel(SPUserTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SPUserType model = new SPUserTypeImpl();

		model.setUuid(soapModel.getUuid());
		model.setSpUserTypeId(soapModel.getSpUserTypeId());
		model.setSpSiteId(soapModel.getSpSiteId());
		model.setUserId(soapModel.getUserId());
		model.setUserTypeId(soapModel.getUserTypeId());
		model.setUserStatusId(soapModel.getUserStatusId());
		model.setDeclarationCompleted(soapModel.getDeclarationCompleted());
		model.setDeclarationDate(soapModel.getDeclarationDate());
		model.setDeclarationStorageId(soapModel.getDeclarationStorageId());
		model.setPdpaCompleted(soapModel.getPdpaCompleted());
		model.setPdpaCompletionDate(soapModel.getPdpaCompletionDate());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SPUserType> toModels(SPUserTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SPUserType> models = new ArrayList<SPUserType>(soapModels.length);

		for (SPUserTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spservices.model.SPUserType"));

	public SPUserTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spUserTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpUserTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spUserTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPUserType.class;
	}

	@Override
	public String getModelClassName() {
		return SPUserType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("spUserTypeId", getSpUserTypeId());
		attributes.put("spSiteId", getSpSiteId());
		attributes.put("userId", getUserId());
		attributes.put("userTypeId", getUserTypeId());
		attributes.put("userStatusId", getUserStatusId());
		attributes.put("declarationCompleted", getDeclarationCompleted());
		attributes.put("declarationDate", getDeclarationDate());
		attributes.put("declarationStorageId", getDeclarationStorageId());
		attributes.put("pdpaCompleted", getPdpaCompleted());
		attributes.put("pdpaCompletionDate", getPdpaCompletionDate());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long spUserTypeId = (Long)attributes.get("spUserTypeId");

		if (spUserTypeId != null) {
			setSpUserTypeId(spUserTypeId);
		}

		Long spSiteId = (Long)attributes.get("spSiteId");

		if (spSiteId != null) {
			setSpSiteId(spSiteId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long userTypeId = (Long)attributes.get("userTypeId");

		if (userTypeId != null) {
			setUserTypeId(userTypeId);
		}

		Long userStatusId = (Long)attributes.get("userStatusId");

		if (userStatusId != null) {
			setUserStatusId(userStatusId);
		}

		Boolean declarationCompleted = (Boolean)attributes.get(
				"declarationCompleted");

		if (declarationCompleted != null) {
			setDeclarationCompleted(declarationCompleted);
		}

		Long declarationDate = (Long)attributes.get("declarationDate");

		if (declarationDate != null) {
			setDeclarationDate(declarationDate);
		}

		Long declarationStorageId = (Long)attributes.get("declarationStorageId");

		if (declarationStorageId != null) {
			setDeclarationStorageId(declarationStorageId);
		}

		Boolean pdpaCompleted = (Boolean)attributes.get("pdpaCompleted");

		if (pdpaCompleted != null) {
			setPdpaCompleted(pdpaCompleted);
		}

		Long pdpaCompletionDate = (Long)attributes.get("pdpaCompletionDate");

		if (pdpaCompletionDate != null) {
			setPdpaCompletionDate(pdpaCompletionDate);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getSpUserTypeId() {
		return _spUserTypeId;
	}

	@Override
	public void setSpUserTypeId(long spUserTypeId) {
		_spUserTypeId = spUserTypeId;
	}

	@JSON
	@Override
	public long getSpSiteId() {
		return _spSiteId;
	}

	@Override
	public void setSpSiteId(long spSiteId) {
		_columnBitmask |= SPSITEID_COLUMN_BITMASK;

		if (!_setOriginalSpSiteId) {
			_setOriginalSpSiteId = true;

			_originalSpSiteId = _spSiteId;
		}

		_spSiteId = spSiteId;
	}

	public long getOriginalSpSiteId() {
		return _originalSpSiteId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public long getUserTypeId() {
		return _userTypeId;
	}

	@Override
	public void setUserTypeId(long userTypeId) {
		_columnBitmask |= USERTYPEID_COLUMN_BITMASK;

		if (!_setOriginalUserTypeId) {
			_setOriginalUserTypeId = true;

			_originalUserTypeId = _userTypeId;
		}

		_userTypeId = userTypeId;
	}

	public long getOriginalUserTypeId() {
		return _originalUserTypeId;
	}

	@JSON
	@Override
	public long getUserStatusId() {
		return _userStatusId;
	}

	@Override
	public void setUserStatusId(long userStatusId) {
		_userStatusId = userStatusId;
	}

	@JSON
	@Override
	public boolean getDeclarationCompleted() {
		return _declarationCompleted;
	}

	@Override
	public boolean isDeclarationCompleted() {
		return _declarationCompleted;
	}

	@Override
	public void setDeclarationCompleted(boolean declarationCompleted) {
		_declarationCompleted = declarationCompleted;
	}

	@JSON
	@Override
	public long getDeclarationDate() {
		return _declarationDate;
	}

	@Override
	public void setDeclarationDate(long declarationDate) {
		_declarationDate = declarationDate;
	}

	@JSON
	@Override
	public long getDeclarationStorageId() {
		return _declarationStorageId;
	}

	@Override
	public void setDeclarationStorageId(long declarationStorageId) {
		_declarationStorageId = declarationStorageId;
	}

	@JSON
	@Override
	public boolean getPdpaCompleted() {
		return _pdpaCompleted;
	}

	@Override
	public boolean isPdpaCompleted() {
		return _pdpaCompleted;
	}

	@Override
	public void setPdpaCompleted(boolean pdpaCompleted) {
		_pdpaCompleted = pdpaCompleted;
	}

	@JSON
	@Override
	public long getPdpaCompletionDate() {
		return _pdpaCompletionDate;
	}

	@Override
	public void setPdpaCompletionDate(long pdpaCompletionDate) {
		_pdpaCompletionDate = pdpaCompletionDate;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public Date getCreatedDate() {
		return _createdDate;
	}

	@Override
	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPUserType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPUserType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPUserType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPUserTypeImpl spUserTypeImpl = new SPUserTypeImpl();

		spUserTypeImpl.setUuid(getUuid());
		spUserTypeImpl.setSpUserTypeId(getSpUserTypeId());
		spUserTypeImpl.setSpSiteId(getSpSiteId());
		spUserTypeImpl.setUserId(getUserId());
		spUserTypeImpl.setUserTypeId(getUserTypeId());
		spUserTypeImpl.setUserStatusId(getUserStatusId());
		spUserTypeImpl.setDeclarationCompleted(getDeclarationCompleted());
		spUserTypeImpl.setDeclarationDate(getDeclarationDate());
		spUserTypeImpl.setDeclarationStorageId(getDeclarationStorageId());
		spUserTypeImpl.setPdpaCompleted(getPdpaCompleted());
		spUserTypeImpl.setPdpaCompletionDate(getPdpaCompletionDate());
		spUserTypeImpl.setGroupId(getGroupId());
		spUserTypeImpl.setCompanyId(getCompanyId());
		spUserTypeImpl.setCreatedBy(getCreatedBy());
		spUserTypeImpl.setModifiedBy(getModifiedBy());
		spUserTypeImpl.setCreatedDate(getCreatedDate());
		spUserTypeImpl.setModifiedDate(getModifiedDate());

		spUserTypeImpl.resetOriginalValues();

		return spUserTypeImpl;
	}

	@Override
	public int compareTo(SPUserType spUserType) {
		long primaryKey = spUserType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPUserType)) {
			return false;
		}

		SPUserType spUserType = (SPUserType)obj;

		long primaryKey = spUserType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPUserTypeModelImpl spUserTypeModelImpl = this;

		spUserTypeModelImpl._originalUuid = spUserTypeModelImpl._uuid;

		spUserTypeModelImpl._originalSpSiteId = spUserTypeModelImpl._spSiteId;

		spUserTypeModelImpl._setOriginalSpSiteId = false;

		spUserTypeModelImpl._originalUserId = spUserTypeModelImpl._userId;

		spUserTypeModelImpl._setOriginalUserId = false;

		spUserTypeModelImpl._originalUserTypeId = spUserTypeModelImpl._userTypeId;

		spUserTypeModelImpl._setOriginalUserTypeId = false;

		spUserTypeModelImpl._originalGroupId = spUserTypeModelImpl._groupId;

		spUserTypeModelImpl._setOriginalGroupId = false;

		spUserTypeModelImpl._originalCompanyId = spUserTypeModelImpl._companyId;

		spUserTypeModelImpl._setOriginalCompanyId = false;

		spUserTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPUserType> toCacheModel() {
		SPUserTypeCacheModel spUserTypeCacheModel = new SPUserTypeCacheModel();

		spUserTypeCacheModel.uuid = getUuid();

		String uuid = spUserTypeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			spUserTypeCacheModel.uuid = null;
		}

		spUserTypeCacheModel.spUserTypeId = getSpUserTypeId();

		spUserTypeCacheModel.spSiteId = getSpSiteId();

		spUserTypeCacheModel.userId = getUserId();

		spUserTypeCacheModel.userTypeId = getUserTypeId();

		spUserTypeCacheModel.userStatusId = getUserStatusId();

		spUserTypeCacheModel.declarationCompleted = getDeclarationCompleted();

		spUserTypeCacheModel.declarationDate = getDeclarationDate();

		spUserTypeCacheModel.declarationStorageId = getDeclarationStorageId();

		spUserTypeCacheModel.pdpaCompleted = getPdpaCompleted();

		spUserTypeCacheModel.pdpaCompletionDate = getPdpaCompletionDate();

		spUserTypeCacheModel.groupId = getGroupId();

		spUserTypeCacheModel.companyId = getCompanyId();

		spUserTypeCacheModel.createdBy = getCreatedBy();

		spUserTypeCacheModel.modifiedBy = getModifiedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			spUserTypeCacheModel.createdDate = createdDate.getTime();
		}
		else {
			spUserTypeCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spUserTypeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spUserTypeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return spUserTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", spUserTypeId=");
		sb.append(getSpUserTypeId());
		sb.append(", spSiteId=");
		sb.append(getSpSiteId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userTypeId=");
		sb.append(getUserTypeId());
		sb.append(", userStatusId=");
		sb.append(getUserStatusId());
		sb.append(", declarationCompleted=");
		sb.append(getDeclarationCompleted());
		sb.append(", declarationDate=");
		sb.append(getDeclarationDate());
		sb.append(", declarationStorageId=");
		sb.append(getDeclarationStorageId());
		sb.append(", pdpaCompleted=");
		sb.append(getPdpaCompleted());
		sb.append(", pdpaCompletionDate=");
		sb.append(getPdpaCompletionDate());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.spservices.model.SPUserType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spUserTypeId</column-name><column-value><![CDATA[");
		sb.append(getSpUserTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spSiteId</column-name><column-value><![CDATA[");
		sb.append(getSpSiteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userTypeId</column-name><column-value><![CDATA[");
		sb.append(getUserTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userStatusId</column-name><column-value><![CDATA[");
		sb.append(getUserStatusId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>declarationCompleted</column-name><column-value><![CDATA[");
		sb.append(getDeclarationCompleted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>declarationDate</column-name><column-value><![CDATA[");
		sb.append(getDeclarationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>declarationStorageId</column-name><column-value><![CDATA[");
		sb.append(getDeclarationStorageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdpaCompleted</column-name><column-value><![CDATA[");
		sb.append(getPdpaCompleted());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pdpaCompletionDate</column-name><column-value><![CDATA[");
		sb.append(getPdpaCompletionDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPUserType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPUserType.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _spUserTypeId;
	private long _spSiteId;
	private long _originalSpSiteId;
	private boolean _setOriginalSpSiteId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _userTypeId;
	private long _originalUserTypeId;
	private boolean _setOriginalUserTypeId;
	private long _userStatusId;
	private boolean _declarationCompleted;
	private long _declarationDate;
	private long _declarationStorageId;
	private boolean _pdpaCompleted;
	private long _pdpaCompletionDate;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _createdBy;
	private long _modifiedBy;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private SPUserType _escapedModel;
}
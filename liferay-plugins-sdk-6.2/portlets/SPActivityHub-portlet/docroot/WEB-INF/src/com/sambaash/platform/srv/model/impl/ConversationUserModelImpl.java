/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.model.ConversationUser;
import com.sambaash.platform.srv.model.ConversationUserModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ConversationUser service. Represents a row in the &quot;SPConversationUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.model.ConversationUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ConversationUserImpl}.
 * </p>
 *
 * @author aishwarya
 * @see ConversationUserImpl
 * @see com.sambaash.platform.srv.model.ConversationUser
 * @see com.sambaash.platform.srv.model.ConversationUserModel
 * @generated
 */
public class ConversationUserModelImpl extends BaseModelImpl<ConversationUser>
	implements ConversationUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a conversation user model instance should use the {@link com.sambaash.platform.srv.model.ConversationUser} interface instead.
	 */
	public static final String TABLE_NAME = "SPConversationUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spConversationUserId", Types.BIGINT },
			{ "spConversationId", Types.BIGINT },
			{ "sentToUserId", Types.BIGINT },
			{ "status", Types.BIGINT },
			{ "entityClassId", Types.BIGINT },
			{ "entityId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPConversationUser (spConversationUserId BIGINT(20) not null primary key,spConversationId BIGINT(20),sentToUserId BIGINT(20),status BIGINT(20),entityClassId BIGINT(20),entityId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPConversationUser";
	public static final String ORDER_BY_JPQL = " ORDER BY conversationUser.spConversationUserId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPConversationUser.spConversationUserId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.model.ConversationUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.model.ConversationUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.model.ConversationUser"),
			true);
	public static long ENTITYCLASSID_COLUMN_BITMASK = 1L;
	public static long ENTITYID_COLUMN_BITMASK = 2L;
	public static long SENTTOUSERID_COLUMN_BITMASK = 4L;
	public static long SPCONVERSATIONID_COLUMN_BITMASK = 8L;
	public static long STATUS_COLUMN_BITMASK = 16L;
	public static long SPCONVERSATIONUSERID_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.model.ConversationUser"));

	public ConversationUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spConversationUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpConversationUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spConversationUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ConversationUser.class;
	}

	@Override
	public String getModelClassName() {
		return ConversationUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spConversationUserId", getSpConversationUserId());
		attributes.put("spConversationId", getSpConversationId());
		attributes.put("sentToUserId", getSentToUserId());
		attributes.put("status", getStatus());
		attributes.put("entityClassId", getEntityClassId());
		attributes.put("entityId", getEntityId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spConversationUserId = (Long)attributes.get("spConversationUserId");

		if (spConversationUserId != null) {
			setSpConversationUserId(spConversationUserId);
		}

		Long spConversationId = (Long)attributes.get("spConversationId");

		if (spConversationId != null) {
			setSpConversationId(spConversationId);
		}

		Long sentToUserId = (Long)attributes.get("sentToUserId");

		if (sentToUserId != null) {
			setSentToUserId(sentToUserId);
		}

		Long status = (Long)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long entityClassId = (Long)attributes.get("entityClassId");

		if (entityClassId != null) {
			setEntityClassId(entityClassId);
		}

		Long entityId = (Long)attributes.get("entityId");

		if (entityId != null) {
			setEntityId(entityId);
		}
	}

	@Override
	public long getSpConversationUserId() {
		return _spConversationUserId;
	}

	@Override
	public void setSpConversationUserId(long spConversationUserId) {
		_spConversationUserId = spConversationUserId;
	}

	@Override
	public String getSpConversationUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getSpConversationUserId(), "uuid",
			_spConversationUserUuid);
	}

	@Override
	public void setSpConversationUserUuid(String spConversationUserUuid) {
		_spConversationUserUuid = spConversationUserUuid;
	}

	@Override
	public long getSpConversationId() {
		return _spConversationId;
	}

	@Override
	public void setSpConversationId(long spConversationId) {
		_columnBitmask |= SPCONVERSATIONID_COLUMN_BITMASK;

		if (!_setOriginalSpConversationId) {
			_setOriginalSpConversationId = true;

			_originalSpConversationId = _spConversationId;
		}

		_spConversationId = spConversationId;
	}

	public long getOriginalSpConversationId() {
		return _originalSpConversationId;
	}

	@Override
	public long getSentToUserId() {
		return _sentToUserId;
	}

	@Override
	public void setSentToUserId(long sentToUserId) {
		_columnBitmask |= SENTTOUSERID_COLUMN_BITMASK;

		if (!_setOriginalSentToUserId) {
			_setOriginalSentToUserId = true;

			_originalSentToUserId = _sentToUserId;
		}

		_sentToUserId = sentToUserId;
	}

	@Override
	public String getSentToUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getSentToUserId(), "uuid",
			_sentToUserUuid);
	}

	@Override
	public void setSentToUserUuid(String sentToUserUuid) {
		_sentToUserUuid = sentToUserUuid;
	}

	public long getOriginalSentToUserId() {
		return _originalSentToUserId;
	}

	@Override
	public long getStatus() {
		return _status;
	}

	@Override
	public void setStatus(long status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public long getOriginalStatus() {
		return _originalStatus;
	}

	@Override
	public long getEntityClassId() {
		return _entityClassId;
	}

	@Override
	public void setEntityClassId(long entityClassId) {
		_columnBitmask |= ENTITYCLASSID_COLUMN_BITMASK;

		if (!_setOriginalEntityClassId) {
			_setOriginalEntityClassId = true;

			_originalEntityClassId = _entityClassId;
		}

		_entityClassId = entityClassId;
	}

	public long getOriginalEntityClassId() {
		return _originalEntityClassId;
	}

	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		_columnBitmask |= ENTITYID_COLUMN_BITMASK;

		if (!_setOriginalEntityId) {
			_setOriginalEntityId = true;

			_originalEntityId = _entityId;
		}

		_entityId = entityId;
	}

	public long getOriginalEntityId() {
		return _originalEntityId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ConversationUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ConversationUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ConversationUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ConversationUserImpl conversationUserImpl = new ConversationUserImpl();

		conversationUserImpl.setSpConversationUserId(getSpConversationUserId());
		conversationUserImpl.setSpConversationId(getSpConversationId());
		conversationUserImpl.setSentToUserId(getSentToUserId());
		conversationUserImpl.setStatus(getStatus());
		conversationUserImpl.setEntityClassId(getEntityClassId());
		conversationUserImpl.setEntityId(getEntityId());

		conversationUserImpl.resetOriginalValues();

		return conversationUserImpl;
	}

	@Override
	public int compareTo(ConversationUser conversationUser) {
		long primaryKey = conversationUser.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ConversationUser)) {
			return false;
		}

		ConversationUser conversationUser = (ConversationUser)obj;

		long primaryKey = conversationUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ConversationUserModelImpl conversationUserModelImpl = this;

		conversationUserModelImpl._originalSpConversationId = conversationUserModelImpl._spConversationId;

		conversationUserModelImpl._setOriginalSpConversationId = false;

		conversationUserModelImpl._originalSentToUserId = conversationUserModelImpl._sentToUserId;

		conversationUserModelImpl._setOriginalSentToUserId = false;

		conversationUserModelImpl._originalStatus = conversationUserModelImpl._status;

		conversationUserModelImpl._setOriginalStatus = false;

		conversationUserModelImpl._originalEntityClassId = conversationUserModelImpl._entityClassId;

		conversationUserModelImpl._setOriginalEntityClassId = false;

		conversationUserModelImpl._originalEntityId = conversationUserModelImpl._entityId;

		conversationUserModelImpl._setOriginalEntityId = false;

		conversationUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ConversationUser> toCacheModel() {
		ConversationUserCacheModel conversationUserCacheModel = new ConversationUserCacheModel();

		conversationUserCacheModel.spConversationUserId = getSpConversationUserId();

		conversationUserCacheModel.spConversationId = getSpConversationId();

		conversationUserCacheModel.sentToUserId = getSentToUserId();

		conversationUserCacheModel.status = getStatus();

		conversationUserCacheModel.entityClassId = getEntityClassId();

		conversationUserCacheModel.entityId = getEntityId();

		return conversationUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{spConversationUserId=");
		sb.append(getSpConversationUserId());
		sb.append(", spConversationId=");
		sb.append(getSpConversationId());
		sb.append(", sentToUserId=");
		sb.append(getSentToUserId());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", entityClassId=");
		sb.append(getEntityClassId());
		sb.append(", entityId=");
		sb.append(getEntityId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.model.ConversationUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spConversationUserId</column-name><column-value><![CDATA[");
		sb.append(getSpConversationUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spConversationId</column-name><column-value><![CDATA[");
		sb.append(getSpConversationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sentToUserId</column-name><column-value><![CDATA[");
		sb.append(getSentToUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityClassId</column-name><column-value><![CDATA[");
		sb.append(getEntityClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityId</column-name><column-value><![CDATA[");
		sb.append(getEntityId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ConversationUser.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ConversationUser.class
		};
	private long _spConversationUserId;
	private String _spConversationUserUuid;
	private long _spConversationId;
	private long _originalSpConversationId;
	private boolean _setOriginalSpConversationId;
	private long _sentToUserId;
	private String _sentToUserUuid;
	private long _originalSentToUserId;
	private boolean _setOriginalSentToUserId;
	private long _status;
	private long _originalStatus;
	private boolean _setOriginalStatus;
	private long _entityClassId;
	private long _originalEntityClassId;
	private boolean _setOriginalEntityClassId;
	private long _entityId;
	private long _originalEntityId;
	private boolean _setOriginalEntityId;
	private long _columnBitmask;
	private ConversationUser _escapedModel;
}
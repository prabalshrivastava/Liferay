/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.model.ModuleCertificate;
import com.sambaash.platform.srv.model.ModuleCertificateModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ModuleCertificate service. Represents a row in the &quot;SPModuleCertificate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.model.ModuleCertificateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ModuleCertificateImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see ModuleCertificateImpl
 * @see com.sambaash.platform.srv.model.ModuleCertificate
 * @see com.sambaash.platform.srv.model.ModuleCertificateModel
 * @generated
 */
public class ModuleCertificateModelImpl extends BaseModelImpl<ModuleCertificate>
	implements ModuleCertificateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a module certificate model instance should use the {@link com.sambaash.platform.srv.model.ModuleCertificate} interface instead.
	 */
	public static final String TABLE_NAME = "SPModuleCertificate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spModuleCertificateId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "spModuleId", Types.BIGINT },
			{ "spCertificatetId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPModuleCertificate (spModuleCertificateId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,spModuleId BIGINT(20),spCertificatetId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPModuleCertificate";
	public static final String ORDER_BY_JPQL = " ORDER BY moduleCertificate.spModuleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPModuleCertificate.spModuleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.model.ModuleCertificate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.model.ModuleCertificate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.model.ModuleCertificate"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long SPCERTIFICATETID_COLUMN_BITMASK = 2L;
	public static long SPMODULEID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.model.ModuleCertificate"));

	public ModuleCertificateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spModuleCertificateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpModuleCertificateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spModuleCertificateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ModuleCertificate.class;
	}

	@Override
	public String getModelClassName() {
		return ModuleCertificate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spModuleCertificateId", getSpModuleCertificateId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("spModuleId", getSpModuleId());
		attributes.put("spCertificatetId", getSpCertificatetId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spModuleCertificateId = (Long)attributes.get(
				"spModuleCertificateId");

		if (spModuleCertificateId != null) {
			setSpModuleCertificateId(spModuleCertificateId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long spModuleId = (Long)attributes.get("spModuleId");

		if (spModuleId != null) {
			setSpModuleId(spModuleId);
		}

		Long spCertificatetId = (Long)attributes.get("spCertificatetId");

		if (spCertificatetId != null) {
			setSpCertificatetId(spCertificatetId);
		}
	}

	@Override
	public long getSpModuleCertificateId() {
		return _spModuleCertificateId;
	}

	@Override
	public void setSpModuleCertificateId(long spModuleCertificateId) {
		_spModuleCertificateId = spModuleCertificateId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getSpModuleId() {
		return _spModuleId;
	}

	@Override
	public void setSpModuleId(long spModuleId) {
		_columnBitmask = -1L;

		if (!_setOriginalSpModuleId) {
			_setOriginalSpModuleId = true;

			_originalSpModuleId = _spModuleId;
		}

		_spModuleId = spModuleId;
	}

	public long getOriginalSpModuleId() {
		return _originalSpModuleId;
	}

	@Override
	public long getSpCertificatetId() {
		return _spCertificatetId;
	}

	@Override
	public void setSpCertificatetId(long spCertificatetId) {
		_columnBitmask |= SPCERTIFICATETID_COLUMN_BITMASK;

		if (!_setOriginalSpCertificatetId) {
			_setOriginalSpCertificatetId = true;

			_originalSpCertificatetId = _spCertificatetId;
		}

		_spCertificatetId = spCertificatetId;
	}

	public long getOriginalSpCertificatetId() {
		return _originalSpCertificatetId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ModuleCertificate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ModuleCertificate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ModuleCertificate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ModuleCertificateImpl moduleCertificateImpl = new ModuleCertificateImpl();

		moduleCertificateImpl.setSpModuleCertificateId(getSpModuleCertificateId());
		moduleCertificateImpl.setGroupId(getGroupId());
		moduleCertificateImpl.setCompanyId(getCompanyId());
		moduleCertificateImpl.setUserId(getUserId());
		moduleCertificateImpl.setUserName(getUserName());
		moduleCertificateImpl.setCreateDate(getCreateDate());
		moduleCertificateImpl.setModifiedDate(getModifiedDate());
		moduleCertificateImpl.setSpModuleId(getSpModuleId());
		moduleCertificateImpl.setSpCertificatetId(getSpCertificatetId());

		moduleCertificateImpl.resetOriginalValues();

		return moduleCertificateImpl;
	}

	@Override
	public int compareTo(ModuleCertificate moduleCertificate) {
		int value = 0;

		if (getSpModuleId() < moduleCertificate.getSpModuleId()) {
			value = -1;
		}
		else if (getSpModuleId() > moduleCertificate.getSpModuleId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ModuleCertificate)) {
			return false;
		}

		ModuleCertificate moduleCertificate = (ModuleCertificate)obj;

		long primaryKey = moduleCertificate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ModuleCertificateModelImpl moduleCertificateModelImpl = this;

		moduleCertificateModelImpl._originalGroupId = moduleCertificateModelImpl._groupId;

		moduleCertificateModelImpl._setOriginalGroupId = false;

		moduleCertificateModelImpl._originalSpModuleId = moduleCertificateModelImpl._spModuleId;

		moduleCertificateModelImpl._setOriginalSpModuleId = false;

		moduleCertificateModelImpl._originalSpCertificatetId = moduleCertificateModelImpl._spCertificatetId;

		moduleCertificateModelImpl._setOriginalSpCertificatetId = false;

		moduleCertificateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ModuleCertificate> toCacheModel() {
		ModuleCertificateCacheModel moduleCertificateCacheModel = new ModuleCertificateCacheModel();

		moduleCertificateCacheModel.spModuleCertificateId = getSpModuleCertificateId();

		moduleCertificateCacheModel.groupId = getGroupId();

		moduleCertificateCacheModel.companyId = getCompanyId();

		moduleCertificateCacheModel.userId = getUserId();

		moduleCertificateCacheModel.userName = getUserName();

		String userName = moduleCertificateCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			moduleCertificateCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			moduleCertificateCacheModel.createDate = createDate.getTime();
		}
		else {
			moduleCertificateCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			moduleCertificateCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			moduleCertificateCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		moduleCertificateCacheModel.spModuleId = getSpModuleId();

		moduleCertificateCacheModel.spCertificatetId = getSpCertificatetId();

		return moduleCertificateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(19);

		sb.append("{spModuleCertificateId=");
		sb.append(getSpModuleCertificateId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", spModuleId=");
		sb.append(getSpModuleId());
		sb.append(", spCertificatetId=");
		sb.append(getSpCertificatetId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(31);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.model.ModuleCertificate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spModuleCertificateId</column-name><column-value><![CDATA[");
		sb.append(getSpModuleCertificateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spModuleId</column-name><column-value><![CDATA[");
		sb.append(getSpModuleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spCertificatetId</column-name><column-value><![CDATA[");
		sb.append(getSpCertificatetId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = ModuleCertificate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			ModuleCertificate.class
		};
	private long _spModuleCertificateId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _spModuleId;
	private long _originalSpModuleId;
	private boolean _setOriginalSpModuleId;
	private long _spCertificatetId;
	private long _originalSpCertificatetId;
	private boolean _setOriginalSpCertificatetId;
	private long _columnBitmask;
	private ModuleCertificate _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spinbox.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spinbox.model.IBMessage;
import com.sambaash.platform.srv.spinbox.model.IBMessageModel;
import com.sambaash.platform.srv.spinbox.model.IBMessageSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the IBMessage service. Represents a row in the &quot;SPInboxMessage&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spinbox.model.IBMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IBMessageImpl}.
 * </p>
 *
 * @author nareshchebolu
 * @see IBMessageImpl
 * @see com.sambaash.platform.srv.spinbox.model.IBMessage
 * @see com.sambaash.platform.srv.spinbox.model.IBMessageModel
 * @generated
 */
@JSON(strict = true)
public class IBMessageModelImpl extends BaseModelImpl<IBMessage>
	implements IBMessageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a i b message model instance should use the {@link com.sambaash.platform.srv.spinbox.model.IBMessage} interface instead.
	 */
	public static final String TABLE_NAME = "SPInboxMessage";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "messageId", Types.BIGINT },
			{ "parentMessageId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "subject", Types.CLOB },
			{ "content", Types.CLOB },
			{ "from_", Types.VARCHAR },
			{ "to_", Types.CLOB },
			{ "allowOpen", Types.BOOLEAN },
			{ "sendDate", Types.TIMESTAMP },
			{ "createDate", Types.TIMESTAMP },
			{ "createBy", Types.VARCHAR },
			{ "createByUserId", Types.VARCHAR },
			{ "draft", Types.BOOLEAN },
			{ "deleteStatus", Types.BOOLEAN },
			{ "draftStatus", Types.VARCHAR },
			{ "sentMeCopy", Types.BOOLEAN },
			{ "belongToGroupDetailId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPInboxMessage (uuid_ VARCHAR(75) null,messageId BIGINT(20) not null primary key,parentMessageId BIGINT(20),groupId BIGINT(20),companyId BIGINT(20),subject LONGTEXT null,content LONGTEXT null,from_ VARCHAR(200) null,to_ LONGTEXT null,allowOpen BOOLEAN,sendDate DATETIME null,createDate DATETIME null,createBy VARCHAR(75) null,createByUserId VARCHAR(75) null,draft BOOLEAN,deleteStatus BOOLEAN,draftStatus VARCHAR(75) null,sentMeCopy BOOLEAN,belongToGroupDetailId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPInboxMessage";
	public static final String ORDER_BY_JPQL = " ORDER BY ibMessage.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY SPInboxMessage.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spinbox.model.IBMessage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spinbox.model.IBMessage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spinbox.model.IBMessage"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long CREATEBY_COLUMN_BITMASK = 2L;
	public static long CREATEBYUSERID_COLUMN_BITMASK = 4L;
	public static long DELETESTATUS_COLUMN_BITMASK = 8L;
	public static long DRAFT_COLUMN_BITMASK = 16L;
	public static long GROUPID_COLUMN_BITMASK = 32L;
	public static long UUID_COLUMN_BITMASK = 64L;
	public static long CREATEDATE_COLUMN_BITMASK = 128L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static IBMessage toModel(IBMessageSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		IBMessage model = new IBMessageImpl();

		model.setUuid(soapModel.getUuid());
		model.setMessageId(soapModel.getMessageId());
		model.setParentMessageId(soapModel.getParentMessageId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setSubject(soapModel.getSubject());
		model.setContent(soapModel.getContent());
		model.setFrom(soapModel.getFrom());
		model.setTo(soapModel.getTo());
		model.setAllowOpen(soapModel.getAllowOpen());
		model.setSendDate(soapModel.getSendDate());
		model.setCreateDate(soapModel.getCreateDate());
		model.setCreateBy(soapModel.getCreateBy());
		model.setCreateByUserId(soapModel.getCreateByUserId());
		model.setDraft(soapModel.getDraft());
		model.setDeleteStatus(soapModel.getDeleteStatus());
		model.setDraftStatus(soapModel.getDraftStatus());
		model.setSentMeCopy(soapModel.getSentMeCopy());
		model.setBelongToGroupDetailId(soapModel.getBelongToGroupDetailId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<IBMessage> toModels(IBMessageSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<IBMessage> models = new ArrayList<IBMessage>(soapModels.length);

		for (IBMessageSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spinbox.model.IBMessage"));

	public IBMessageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _messageId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMessageId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _messageId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IBMessage.class;
	}

	@Override
	public String getModelClassName() {
		return IBMessage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("messageId", getMessageId());
		attributes.put("parentMessageId", getParentMessageId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("subject", getSubject());
		attributes.put("content", getContent());
		attributes.put("from", getFrom());
		attributes.put("to", getTo());
		attributes.put("allowOpen", getAllowOpen());
		attributes.put("sendDate", getSendDate());
		attributes.put("createDate", getCreateDate());
		attributes.put("createBy", getCreateBy());
		attributes.put("createByUserId", getCreateByUserId());
		attributes.put("draft", getDraft());
		attributes.put("deleteStatus", getDeleteStatus());
		attributes.put("draftStatus", getDraftStatus());
		attributes.put("sentMeCopy", getSentMeCopy());
		attributes.put("belongToGroupDetailId", getBelongToGroupDetailId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long messageId = (Long)attributes.get("messageId");

		if (messageId != null) {
			setMessageId(messageId);
		}

		Long parentMessageId = (Long)attributes.get("parentMessageId");

		if (parentMessageId != null) {
			setParentMessageId(parentMessageId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		String from = (String)attributes.get("from");

		if (from != null) {
			setFrom(from);
		}

		String to = (String)attributes.get("to");

		if (to != null) {
			setTo(to);
		}

		Boolean allowOpen = (Boolean)attributes.get("allowOpen");

		if (allowOpen != null) {
			setAllowOpen(allowOpen);
		}

		Date sendDate = (Date)attributes.get("sendDate");

		if (sendDate != null) {
			setSendDate(sendDate);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String createBy = (String)attributes.get("createBy");

		if (createBy != null) {
			setCreateBy(createBy);
		}

		String createByUserId = (String)attributes.get("createByUserId");

		if (createByUserId != null) {
			setCreateByUserId(createByUserId);
		}

		Boolean draft = (Boolean)attributes.get("draft");

		if (draft != null) {
			setDraft(draft);
		}

		Boolean deleteStatus = (Boolean)attributes.get("deleteStatus");

		if (deleteStatus != null) {
			setDeleteStatus(deleteStatus);
		}

		String draftStatus = (String)attributes.get("draftStatus");

		if (draftStatus != null) {
			setDraftStatus(draftStatus);
		}

		Boolean sentMeCopy = (Boolean)attributes.get("sentMeCopy");

		if (sentMeCopy != null) {
			setSentMeCopy(sentMeCopy);
		}

		Long belongToGroupDetailId = (Long)attributes.get(
				"belongToGroupDetailId");

		if (belongToGroupDetailId != null) {
			setBelongToGroupDetailId(belongToGroupDetailId);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getMessageId() {
		return _messageId;
	}

	@Override
	public void setMessageId(long messageId) {
		_messageId = messageId;
	}

	@JSON
	@Override
	public long getParentMessageId() {
		return _parentMessageId;
	}

	@Override
	public void setParentMessageId(long parentMessageId) {
		_parentMessageId = parentMessageId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public String getFrom() {
		if (_from == null) {
			return StringPool.BLANK;
		}
		else {
			return _from;
		}
	}

	@Override
	public void setFrom(String from) {
		_from = from;
	}

	@JSON
	@Override
	public String getTo() {
		if (_to == null) {
			return StringPool.BLANK;
		}
		else {
			return _to;
		}
	}

	@Override
	public void setTo(String to) {
		_to = to;
	}

	@JSON
	@Override
	public boolean getAllowOpen() {
		return _allowOpen;
	}

	@Override
	public boolean isAllowOpen() {
		return _allowOpen;
	}

	@Override
	public void setAllowOpen(boolean allowOpen) {
		_allowOpen = allowOpen;
	}

	@JSON
	@Override
	public Date getSendDate() {
		return _sendDate;
	}

	@Override
	public void setSendDate(Date sendDate) {
		_sendDate = sendDate;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public String getCreateBy() {
		if (_createBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createBy;
		}
	}

	@Override
	public void setCreateBy(String createBy) {
		_columnBitmask |= CREATEBY_COLUMN_BITMASK;

		if (_originalCreateBy == null) {
			_originalCreateBy = _createBy;
		}

		_createBy = createBy;
	}

	public String getOriginalCreateBy() {
		return GetterUtil.getString(_originalCreateBy);
	}

	@JSON
	@Override
	public String getCreateByUserId() {
		if (_createByUserId == null) {
			return StringPool.BLANK;
		}
		else {
			return _createByUserId;
		}
	}

	@Override
	public void setCreateByUserId(String createByUserId) {
		_columnBitmask |= CREATEBYUSERID_COLUMN_BITMASK;

		if (_originalCreateByUserId == null) {
			_originalCreateByUserId = _createByUserId;
		}

		_createByUserId = createByUserId;
	}

	public String getOriginalCreateByUserId() {
		return GetterUtil.getString(_originalCreateByUserId);
	}

	@JSON
	@Override
	public boolean getDraft() {
		return _draft;
	}

	@Override
	public boolean isDraft() {
		return _draft;
	}

	@Override
	public void setDraft(boolean draft) {
		_columnBitmask |= DRAFT_COLUMN_BITMASK;

		if (!_setOriginalDraft) {
			_setOriginalDraft = true;

			_originalDraft = _draft;
		}

		_draft = draft;
	}

	public boolean getOriginalDraft() {
		return _originalDraft;
	}

	@JSON
	@Override
	public boolean getDeleteStatus() {
		return _deleteStatus;
	}

	@Override
	public boolean isDeleteStatus() {
		return _deleteStatus;
	}

	@Override
	public void setDeleteStatus(boolean deleteStatus) {
		_columnBitmask |= DELETESTATUS_COLUMN_BITMASK;

		if (!_setOriginalDeleteStatus) {
			_setOriginalDeleteStatus = true;

			_originalDeleteStatus = _deleteStatus;
		}

		_deleteStatus = deleteStatus;
	}

	public boolean getOriginalDeleteStatus() {
		return _originalDeleteStatus;
	}

	@JSON
	@Override
	public String getDraftStatus() {
		if (_draftStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _draftStatus;
		}
	}

	@Override
	public void setDraftStatus(String draftStatus) {
		_draftStatus = draftStatus;
	}

	@JSON
	@Override
	public boolean getSentMeCopy() {
		return _sentMeCopy;
	}

	@Override
	public boolean isSentMeCopy() {
		return _sentMeCopy;
	}

	@Override
	public void setSentMeCopy(boolean sentMeCopy) {
		_sentMeCopy = sentMeCopy;
	}

	@JSON
	@Override
	public long getBelongToGroupDetailId() {
		return _belongToGroupDetailId;
	}

	@Override
	public void setBelongToGroupDetailId(long belongToGroupDetailId) {
		_belongToGroupDetailId = belongToGroupDetailId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			IBMessage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public IBMessage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (IBMessage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IBMessageImpl ibMessageImpl = new IBMessageImpl();

		ibMessageImpl.setUuid(getUuid());
		ibMessageImpl.setMessageId(getMessageId());
		ibMessageImpl.setParentMessageId(getParentMessageId());
		ibMessageImpl.setGroupId(getGroupId());
		ibMessageImpl.setCompanyId(getCompanyId());
		ibMessageImpl.setSubject(getSubject());
		ibMessageImpl.setContent(getContent());
		ibMessageImpl.setFrom(getFrom());
		ibMessageImpl.setTo(getTo());
		ibMessageImpl.setAllowOpen(getAllowOpen());
		ibMessageImpl.setSendDate(getSendDate());
		ibMessageImpl.setCreateDate(getCreateDate());
		ibMessageImpl.setCreateBy(getCreateBy());
		ibMessageImpl.setCreateByUserId(getCreateByUserId());
		ibMessageImpl.setDraft(getDraft());
		ibMessageImpl.setDeleteStatus(getDeleteStatus());
		ibMessageImpl.setDraftStatus(getDraftStatus());
		ibMessageImpl.setSentMeCopy(getSentMeCopy());
		ibMessageImpl.setBelongToGroupDetailId(getBelongToGroupDetailId());

		ibMessageImpl.resetOriginalValues();

		return ibMessageImpl;
	}

	@Override
	public int compareTo(IBMessage ibMessage) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), ibMessage.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof IBMessage)) {
			return false;
		}

		IBMessage ibMessage = (IBMessage)obj;

		long primaryKey = ibMessage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		IBMessageModelImpl ibMessageModelImpl = this;

		ibMessageModelImpl._originalUuid = ibMessageModelImpl._uuid;

		ibMessageModelImpl._originalGroupId = ibMessageModelImpl._groupId;

		ibMessageModelImpl._setOriginalGroupId = false;

		ibMessageModelImpl._originalCompanyId = ibMessageModelImpl._companyId;

		ibMessageModelImpl._setOriginalCompanyId = false;

		ibMessageModelImpl._originalCreateBy = ibMessageModelImpl._createBy;

		ibMessageModelImpl._originalCreateByUserId = ibMessageModelImpl._createByUserId;

		ibMessageModelImpl._originalDraft = ibMessageModelImpl._draft;

		ibMessageModelImpl._setOriginalDraft = false;

		ibMessageModelImpl._originalDeleteStatus = ibMessageModelImpl._deleteStatus;

		ibMessageModelImpl._setOriginalDeleteStatus = false;

		ibMessageModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<IBMessage> toCacheModel() {
		IBMessageCacheModel ibMessageCacheModel = new IBMessageCacheModel();

		ibMessageCacheModel.uuid = getUuid();

		String uuid = ibMessageCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			ibMessageCacheModel.uuid = null;
		}

		ibMessageCacheModel.messageId = getMessageId();

		ibMessageCacheModel.parentMessageId = getParentMessageId();

		ibMessageCacheModel.groupId = getGroupId();

		ibMessageCacheModel.companyId = getCompanyId();

		ibMessageCacheModel.subject = getSubject();

		String subject = ibMessageCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			ibMessageCacheModel.subject = null;
		}

		ibMessageCacheModel.content = getContent();

		String content = ibMessageCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			ibMessageCacheModel.content = null;
		}

		ibMessageCacheModel.from = getFrom();

		String from = ibMessageCacheModel.from;

		if ((from != null) && (from.length() == 0)) {
			ibMessageCacheModel.from = null;
		}

		ibMessageCacheModel.to = getTo();

		String to = ibMessageCacheModel.to;

		if ((to != null) && (to.length() == 0)) {
			ibMessageCacheModel.to = null;
		}

		ibMessageCacheModel.allowOpen = getAllowOpen();

		Date sendDate = getSendDate();

		if (sendDate != null) {
			ibMessageCacheModel.sendDate = sendDate.getTime();
		}
		else {
			ibMessageCacheModel.sendDate = Long.MIN_VALUE;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ibMessageCacheModel.createDate = createDate.getTime();
		}
		else {
			ibMessageCacheModel.createDate = Long.MIN_VALUE;
		}

		ibMessageCacheModel.createBy = getCreateBy();

		String createBy = ibMessageCacheModel.createBy;

		if ((createBy != null) && (createBy.length() == 0)) {
			ibMessageCacheModel.createBy = null;
		}

		ibMessageCacheModel.createByUserId = getCreateByUserId();

		String createByUserId = ibMessageCacheModel.createByUserId;

		if ((createByUserId != null) && (createByUserId.length() == 0)) {
			ibMessageCacheModel.createByUserId = null;
		}

		ibMessageCacheModel.draft = getDraft();

		ibMessageCacheModel.deleteStatus = getDeleteStatus();

		ibMessageCacheModel.draftStatus = getDraftStatus();

		String draftStatus = ibMessageCacheModel.draftStatus;

		if ((draftStatus != null) && (draftStatus.length() == 0)) {
			ibMessageCacheModel.draftStatus = null;
		}

		ibMessageCacheModel.sentMeCopy = getSentMeCopy();

		ibMessageCacheModel.belongToGroupDetailId = getBelongToGroupDetailId();

		return ibMessageCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", messageId=");
		sb.append(getMessageId());
		sb.append(", parentMessageId=");
		sb.append(getParentMessageId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", from=");
		sb.append(getFrom());
		sb.append(", to=");
		sb.append(getTo());
		sb.append(", allowOpen=");
		sb.append(getAllowOpen());
		sb.append(", sendDate=");
		sb.append(getSendDate());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", createBy=");
		sb.append(getCreateBy());
		sb.append(", createByUserId=");
		sb.append(getCreateByUserId());
		sb.append(", draft=");
		sb.append(getDraft());
		sb.append(", deleteStatus=");
		sb.append(getDeleteStatus());
		sb.append(", draftStatus=");
		sb.append(getDraftStatus());
		sb.append(", sentMeCopy=");
		sb.append(getSentMeCopy());
		sb.append(", belongToGroupDetailId=");
		sb.append(getBelongToGroupDetailId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.spinbox.model.IBMessage");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageId</column-name><column-value><![CDATA[");
		sb.append(getMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentMessageId</column-name><column-value><![CDATA[");
		sb.append(getParentMessageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>from</column-name><column-value><![CDATA[");
		sb.append(getFrom());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>to</column-name><column-value><![CDATA[");
		sb.append(getTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allowOpen</column-name><column-value><![CDATA[");
		sb.append(getAllowOpen());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sendDate</column-name><column-value><![CDATA[");
		sb.append(getSendDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createBy</column-name><column-value><![CDATA[");
		sb.append(getCreateBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createByUserId</column-name><column-value><![CDATA[");
		sb.append(getCreateByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>draft</column-name><column-value><![CDATA[");
		sb.append(getDraft());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>deleteStatus</column-name><column-value><![CDATA[");
		sb.append(getDeleteStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>draftStatus</column-name><column-value><![CDATA[");
		sb.append(getDraftStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sentMeCopy</column-name><column-value><![CDATA[");
		sb.append(getSentMeCopy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>belongToGroupDetailId</column-name><column-value><![CDATA[");
		sb.append(getBelongToGroupDetailId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = IBMessage.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			IBMessage.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _messageId;
	private long _parentMessageId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private String _subject;
	private String _content;
	private String _from;
	private String _to;
	private boolean _allowOpen;
	private Date _sendDate;
	private Date _createDate;
	private String _createBy;
	private String _originalCreateBy;
	private String _createByUserId;
	private String _originalCreateByUserId;
	private boolean _draft;
	private boolean _originalDraft;
	private boolean _setOriginalDraft;
	private boolean _deleteStatus;
	private boolean _originalDeleteStatus;
	private boolean _setOriginalDeleteStatus;
	private String _draftStatus;
	private boolean _sentMeCopy;
	private long _belongToGroupDetailId;
	private long _columnBitmask;
	private IBMessage _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.mail.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.mail.model.SPMailBlackList;
import com.sambaash.platform.srv.mail.model.SPMailBlackListModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPMailBlackList service. Represents a row in the &quot;SPMailBlackList&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.mail.model.SPMailBlackListModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPMailBlackListImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see SPMailBlackListImpl
 * @see com.sambaash.platform.srv.mail.model.SPMailBlackList
 * @see com.sambaash.platform.srv.mail.model.SPMailBlackListModel
 * @generated
 */
public class SPMailBlackListModelImpl extends BaseModelImpl<SPMailBlackList>
	implements SPMailBlackListModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p mail black list model instance should use the {@link com.sambaash.platform.srv.mail.model.SPMailBlackList} interface instead.
	 */
	public static final String TABLE_NAME = "SPMailBlackList";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spMailBlackListId", Types.BIGINT },
			{ "spMailCampaignId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "emailAddress", Types.VARCHAR },
			{ "bounced", Types.BOOLEAN },
			{ "bounce_soft", Types.BOOLEAN },
			{ "complain", Types.BOOLEAN },
			{ "createDate", Types.TIMESTAMP },
			{ "message", Types.VARCHAR },
			{ "messageId", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SPMailBlackList (spMailBlackListId BIGINT(20) not null primary key,spMailCampaignId BIGINT(20),userId BIGINT(20),emailAddress VARCHAR(75) null,bounced BOOLEAN,bounce_soft BOOLEAN,complain BOOLEAN,createDate DATETIME null,message LONGTEXT null,messageId VARCHAR(500) null)";
	public static final String TABLE_SQL_DROP = "drop table SPMailBlackList";
	public static final String ORDER_BY_JPQL = " ORDER BY spMailBlackList.spMailBlackListId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPMailBlackList.spMailBlackListId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.mail.model.SPMailBlackList"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.mail.model.SPMailBlackList"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.mail.model.SPMailBlackList"),
			true);
	public static long BOUNCE_SOFT_COLUMN_BITMASK = 1L;
	public static long BOUNCED_COLUMN_BITMASK = 2L;
	public static long COMPLAIN_COLUMN_BITMASK = 4L;
	public static long EMAILADDRESS_COLUMN_BITMASK = 8L;
	public static long MESSAGEID_COLUMN_BITMASK = 16L;
	public static long SPMAILCAMPAIGNID_COLUMN_BITMASK = 32L;
	public static long SPMAILBLACKLISTID_COLUMN_BITMASK = 64L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.mail.model.SPMailBlackList"));

	public SPMailBlackListModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spMailBlackListId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpMailBlackListId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spMailBlackListId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPMailBlackList.class;
	}

	@Override
	public String getModelClassName() {
		return SPMailBlackList.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spMailBlackListId", getSpMailBlackListId());
		attributes.put("spMailCampaignId", getSpMailCampaignId());
		attributes.put("userId", getUserId());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("bounced", getBounced());
		attributes.put("bounce_soft", getBounce_soft());
		attributes.put("complain", getComplain());
		attributes.put("createDate", getCreateDate());
		attributes.put("message", getMessage());
		attributes.put("messageId", getMessageId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spMailBlackListId = (Long)attributes.get("spMailBlackListId");

		if (spMailBlackListId != null) {
			setSpMailBlackListId(spMailBlackListId);
		}

		Long spMailCampaignId = (Long)attributes.get("spMailCampaignId");

		if (spMailCampaignId != null) {
			setSpMailCampaignId(spMailCampaignId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		Boolean bounced = (Boolean)attributes.get("bounced");

		if (bounced != null) {
			setBounced(bounced);
		}

		Boolean bounce_soft = (Boolean)attributes.get("bounce_soft");

		if (bounce_soft != null) {
			setBounce_soft(bounce_soft);
		}

		Boolean complain = (Boolean)attributes.get("complain");

		if (complain != null) {
			setComplain(complain);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		String message = (String)attributes.get("message");

		if (message != null) {
			setMessage(message);
		}

		String messageId = (String)attributes.get("messageId");

		if (messageId != null) {
			setMessageId(messageId);
		}
	}

	@Override
	public long getSpMailBlackListId() {
		return _spMailBlackListId;
	}

	@Override
	public void setSpMailBlackListId(long spMailBlackListId) {
		_spMailBlackListId = spMailBlackListId;
	}

	@Override
	public long getSpMailCampaignId() {
		return _spMailCampaignId;
	}

	@Override
	public void setSpMailCampaignId(long spMailCampaignId) {
		_columnBitmask |= SPMAILCAMPAIGNID_COLUMN_BITMASK;

		if (!_setOriginalSpMailCampaignId) {
			_setOriginalSpMailCampaignId = true;

			_originalSpMailCampaignId = _spMailCampaignId;
		}

		_spMailCampaignId = spMailCampaignId;
	}

	public long getOriginalSpMailCampaignId() {
		return _originalSpMailCampaignId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		_columnBitmask |= EMAILADDRESS_COLUMN_BITMASK;

		if (_originalEmailAddress == null) {
			_originalEmailAddress = _emailAddress;
		}

		_emailAddress = emailAddress;
	}

	public String getOriginalEmailAddress() {
		return GetterUtil.getString(_originalEmailAddress);
	}

	@Override
	public boolean getBounced() {
		return _bounced;
	}

	@Override
	public boolean isBounced() {
		return _bounced;
	}

	@Override
	public void setBounced(boolean bounced) {
		_columnBitmask |= BOUNCED_COLUMN_BITMASK;

		if (!_setOriginalBounced) {
			_setOriginalBounced = true;

			_originalBounced = _bounced;
		}

		_bounced = bounced;
	}

	public boolean getOriginalBounced() {
		return _originalBounced;
	}

	@Override
	public boolean getBounce_soft() {
		return _bounce_soft;
	}

	@Override
	public boolean isBounce_soft() {
		return _bounce_soft;
	}

	@Override
	public void setBounce_soft(boolean bounce_soft) {
		_columnBitmask |= BOUNCE_SOFT_COLUMN_BITMASK;

		if (!_setOriginalBounce_soft) {
			_setOriginalBounce_soft = true;

			_originalBounce_soft = _bounce_soft;
		}

		_bounce_soft = bounce_soft;
	}

	public boolean getOriginalBounce_soft() {
		return _originalBounce_soft;
	}

	@Override
	public boolean getComplain() {
		return _complain;
	}

	@Override
	public boolean isComplain() {
		return _complain;
	}

	@Override
	public void setComplain(boolean complain) {
		_columnBitmask |= COMPLAIN_COLUMN_BITMASK;

		if (!_setOriginalComplain) {
			_setOriginalComplain = true;

			_originalComplain = _complain;
		}

		_complain = complain;
	}

	public boolean getOriginalComplain() {
		return _originalComplain;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public String getMessage() {
		if (_message == null) {
			return StringPool.BLANK;
		}
		else {
			return _message;
		}
	}

	@Override
	public void setMessage(String message) {
		_message = message;
	}

	@Override
	public String getMessageId() {
		if (_messageId == null) {
			return StringPool.BLANK;
		}
		else {
			return _messageId;
		}
	}

	@Override
	public void setMessageId(String messageId) {
		_columnBitmask |= MESSAGEID_COLUMN_BITMASK;

		if (_originalMessageId == null) {
			_originalMessageId = _messageId;
		}

		_messageId = messageId;
	}

	public String getOriginalMessageId() {
		return GetterUtil.getString(_originalMessageId);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SPMailBlackList.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPMailBlackList toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPMailBlackList)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPMailBlackListImpl spMailBlackListImpl = new SPMailBlackListImpl();

		spMailBlackListImpl.setSpMailBlackListId(getSpMailBlackListId());
		spMailBlackListImpl.setSpMailCampaignId(getSpMailCampaignId());
		spMailBlackListImpl.setUserId(getUserId());
		spMailBlackListImpl.setEmailAddress(getEmailAddress());
		spMailBlackListImpl.setBounced(getBounced());
		spMailBlackListImpl.setBounce_soft(getBounce_soft());
		spMailBlackListImpl.setComplain(getComplain());
		spMailBlackListImpl.setCreateDate(getCreateDate());
		spMailBlackListImpl.setMessage(getMessage());
		spMailBlackListImpl.setMessageId(getMessageId());

		spMailBlackListImpl.resetOriginalValues();

		return spMailBlackListImpl;
	}

	@Override
	public int compareTo(SPMailBlackList spMailBlackList) {
		long primaryKey = spMailBlackList.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPMailBlackList)) {
			return false;
		}

		SPMailBlackList spMailBlackList = (SPMailBlackList)obj;

		long primaryKey = spMailBlackList.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPMailBlackListModelImpl spMailBlackListModelImpl = this;

		spMailBlackListModelImpl._originalSpMailCampaignId = spMailBlackListModelImpl._spMailCampaignId;

		spMailBlackListModelImpl._setOriginalSpMailCampaignId = false;

		spMailBlackListModelImpl._originalEmailAddress = spMailBlackListModelImpl._emailAddress;

		spMailBlackListModelImpl._originalBounced = spMailBlackListModelImpl._bounced;

		spMailBlackListModelImpl._setOriginalBounced = false;

		spMailBlackListModelImpl._originalBounce_soft = spMailBlackListModelImpl._bounce_soft;

		spMailBlackListModelImpl._setOriginalBounce_soft = false;

		spMailBlackListModelImpl._originalComplain = spMailBlackListModelImpl._complain;

		spMailBlackListModelImpl._setOriginalComplain = false;

		spMailBlackListModelImpl._originalMessageId = spMailBlackListModelImpl._messageId;

		spMailBlackListModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPMailBlackList> toCacheModel() {
		SPMailBlackListCacheModel spMailBlackListCacheModel = new SPMailBlackListCacheModel();

		spMailBlackListCacheModel.spMailBlackListId = getSpMailBlackListId();

		spMailBlackListCacheModel.spMailCampaignId = getSpMailCampaignId();

		spMailBlackListCacheModel.userId = getUserId();

		spMailBlackListCacheModel.emailAddress = getEmailAddress();

		String emailAddress = spMailBlackListCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			spMailBlackListCacheModel.emailAddress = null;
		}

		spMailBlackListCacheModel.bounced = getBounced();

		spMailBlackListCacheModel.bounce_soft = getBounce_soft();

		spMailBlackListCacheModel.complain = getComplain();

		Date createDate = getCreateDate();

		if (createDate != null) {
			spMailBlackListCacheModel.createDate = createDate.getTime();
		}
		else {
			spMailBlackListCacheModel.createDate = Long.MIN_VALUE;
		}

		spMailBlackListCacheModel.message = getMessage();

		String message = spMailBlackListCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			spMailBlackListCacheModel.message = null;
		}

		spMailBlackListCacheModel.messageId = getMessageId();

		String messageId = spMailBlackListCacheModel.messageId;

		if ((messageId != null) && (messageId.length() == 0)) {
			spMailBlackListCacheModel.messageId = null;
		}

		return spMailBlackListCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{spMailBlackListId=");
		sb.append(getSpMailBlackListId());
		sb.append(", spMailCampaignId=");
		sb.append(getSpMailCampaignId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", bounced=");
		sb.append(getBounced());
		sb.append(", bounce_soft=");
		sb.append(getBounce_soft());
		sb.append(", complain=");
		sb.append(getComplain());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", message=");
		sb.append(getMessage());
		sb.append(", messageId=");
		sb.append(getMessageId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.mail.model.SPMailBlackList");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spMailBlackListId</column-name><column-value><![CDATA[");
		sb.append(getSpMailBlackListId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spMailCampaignId</column-name><column-value><![CDATA[");
		sb.append(getSpMailCampaignId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bounced</column-name><column-value><![CDATA[");
		sb.append(getBounced());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bounce_soft</column-name><column-value><![CDATA[");
		sb.append(getBounce_soft());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complain</column-name><column-value><![CDATA[");
		sb.append(getComplain());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messageId</column-name><column-value><![CDATA[");
		sb.append(getMessageId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPMailBlackList.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPMailBlackList.class
		};
	private long _spMailBlackListId;
	private long _spMailCampaignId;
	private long _originalSpMailCampaignId;
	private boolean _setOriginalSpMailCampaignId;
	private long _userId;
	private String _userUuid;
	private String _emailAddress;
	private String _originalEmailAddress;
	private boolean _bounced;
	private boolean _originalBounced;
	private boolean _setOriginalBounced;
	private boolean _bounce_soft;
	private boolean _originalBounce_soft;
	private boolean _setOriginalBounce_soft;
	private boolean _complain;
	private boolean _originalComplain;
	private boolean _setOriginalComplain;
	private Date _createDate;
	private String _message;
	private String _messageId;
	private String _originalMessageId;
	private long _columnBitmask;
	private SPMailBlackList _escapedModel;
}
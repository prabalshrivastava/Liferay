/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.model.Persona;
import com.sambaash.platform.srv.model.PersonaModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Persona service. Represents a row in the &quot;SPPersona&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.model.PersonaModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PersonaImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see PersonaImpl
 * @see com.sambaash.platform.srv.model.Persona
 * @see com.sambaash.platform.srv.model.PersonaModel
 * @generated
 */
public class PersonaModelImpl extends BaseModelImpl<Persona>
	implements PersonaModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a persona model instance should use the {@link com.sambaash.platform.srv.model.Persona} interface instead.
	 */
	public static final String TABLE_NAME = "SPPersona";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spPersonaId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "personaType", Types.BIGINT },
			{ "ageGroup", Types.VARCHAR },
			{ "personaDesc", Types.VARCHAR },
			{ "personaImageId", Types.BIGINT },
			{ "spCourseId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPPersona (spPersonaId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,personaType BIGINT(20),ageGroup VARCHAR(75) null,personaDesc LONGTEXT null,personaImageId BIGINT(20),spCourseId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPPersona";
	public static final String ORDER_BY_JPQL = " ORDER BY persona.spCourseId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPPersona.spCourseId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.model.Persona"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.model.Persona"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.model.Persona"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long SPCOURSEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.model.Persona"));

	public PersonaModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spPersonaId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpPersonaId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spPersonaId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Persona.class;
	}

	@Override
	public String getModelClassName() {
		return Persona.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spPersonaId", getSpPersonaId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("personaType", getPersonaType());
		attributes.put("ageGroup", getAgeGroup());
		attributes.put("personaDesc", getPersonaDesc());
		attributes.put("personaImageId", getPersonaImageId());
		attributes.put("spCourseId", getSpCourseId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spPersonaId = (Long)attributes.get("spPersonaId");

		if (spPersonaId != null) {
			setSpPersonaId(spPersonaId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long personaType = (Long)attributes.get("personaType");

		if (personaType != null) {
			setPersonaType(personaType);
		}

		String ageGroup = (String)attributes.get("ageGroup");

		if (ageGroup != null) {
			setAgeGroup(ageGroup);
		}

		String personaDesc = (String)attributes.get("personaDesc");

		if (personaDesc != null) {
			setPersonaDesc(personaDesc);
		}

		Long personaImageId = (Long)attributes.get("personaImageId");

		if (personaImageId != null) {
			setPersonaImageId(personaImageId);
		}

		Long spCourseId = (Long)attributes.get("spCourseId");

		if (spCourseId != null) {
			setSpCourseId(spCourseId);
		}
	}

	@Override
	public long getSpPersonaId() {
		return _spPersonaId;
	}

	@Override
	public void setSpPersonaId(long spPersonaId) {
		_spPersonaId = spPersonaId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getPersonaType() {
		return _personaType;
	}

	@Override
	public void setPersonaType(long personaType) {
		_personaType = personaType;
	}

	@Override
	public String getAgeGroup() {
		if (_ageGroup == null) {
			return StringPool.BLANK;
		}
		else {
			return _ageGroup;
		}
	}

	@Override
	public void setAgeGroup(String ageGroup) {
		_ageGroup = ageGroup;
	}

	@Override
	public String getPersonaDesc() {
		if (_personaDesc == null) {
			return StringPool.BLANK;
		}
		else {
			return _personaDesc;
		}
	}

	@Override
	public void setPersonaDesc(String personaDesc) {
		_personaDesc = personaDesc;
	}

	@Override
	public long getPersonaImageId() {
		return _personaImageId;
	}

	@Override
	public void setPersonaImageId(long personaImageId) {
		_personaImageId = personaImageId;
	}

	@Override
	public long getSpCourseId() {
		return _spCourseId;
	}

	@Override
	public void setSpCourseId(long spCourseId) {
		_columnBitmask = -1L;

		if (!_setOriginalSpCourseId) {
			_setOriginalSpCourseId = true;

			_originalSpCourseId = _spCourseId;
		}

		_spCourseId = spCourseId;
	}

	public long getOriginalSpCourseId() {
		return _originalSpCourseId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Persona.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Persona toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Persona)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PersonaImpl personaImpl = new PersonaImpl();

		personaImpl.setSpPersonaId(getSpPersonaId());
		personaImpl.setGroupId(getGroupId());
		personaImpl.setCompanyId(getCompanyId());
		personaImpl.setUserId(getUserId());
		personaImpl.setUserName(getUserName());
		personaImpl.setCreateDate(getCreateDate());
		personaImpl.setModifiedDate(getModifiedDate());
		personaImpl.setPersonaType(getPersonaType());
		personaImpl.setAgeGroup(getAgeGroup());
		personaImpl.setPersonaDesc(getPersonaDesc());
		personaImpl.setPersonaImageId(getPersonaImageId());
		personaImpl.setSpCourseId(getSpCourseId());

		personaImpl.resetOriginalValues();

		return personaImpl;
	}

	@Override
	public int compareTo(Persona persona) {
		int value = 0;

		if (getSpCourseId() < persona.getSpCourseId()) {
			value = -1;
		}
		else if (getSpCourseId() > persona.getSpCourseId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Persona)) {
			return false;
		}

		Persona persona = (Persona)obj;

		long primaryKey = persona.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		PersonaModelImpl personaModelImpl = this;

		personaModelImpl._originalGroupId = personaModelImpl._groupId;

		personaModelImpl._setOriginalGroupId = false;

		personaModelImpl._originalSpCourseId = personaModelImpl._spCourseId;

		personaModelImpl._setOriginalSpCourseId = false;

		personaModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Persona> toCacheModel() {
		PersonaCacheModel personaCacheModel = new PersonaCacheModel();

		personaCacheModel.spPersonaId = getSpPersonaId();

		personaCacheModel.groupId = getGroupId();

		personaCacheModel.companyId = getCompanyId();

		personaCacheModel.userId = getUserId();

		personaCacheModel.userName = getUserName();

		String userName = personaCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			personaCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			personaCacheModel.createDate = createDate.getTime();
		}
		else {
			personaCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			personaCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			personaCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		personaCacheModel.personaType = getPersonaType();

		personaCacheModel.ageGroup = getAgeGroup();

		String ageGroup = personaCacheModel.ageGroup;

		if ((ageGroup != null) && (ageGroup.length() == 0)) {
			personaCacheModel.ageGroup = null;
		}

		personaCacheModel.personaDesc = getPersonaDesc();

		String personaDesc = personaCacheModel.personaDesc;

		if ((personaDesc != null) && (personaDesc.length() == 0)) {
			personaCacheModel.personaDesc = null;
		}

		personaCacheModel.personaImageId = getPersonaImageId();

		personaCacheModel.spCourseId = getSpCourseId();

		return personaCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{spPersonaId=");
		sb.append(getSpPersonaId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", personaType=");
		sb.append(getPersonaType());
		sb.append(", ageGroup=");
		sb.append(getAgeGroup());
		sb.append(", personaDesc=");
		sb.append(getPersonaDesc());
		sb.append(", personaImageId=");
		sb.append(getPersonaImageId());
		sb.append(", spCourseId=");
		sb.append(getSpCourseId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.model.Persona");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spPersonaId</column-name><column-value><![CDATA[");
		sb.append(getSpPersonaId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personaType</column-name><column-value><![CDATA[");
		sb.append(getPersonaType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ageGroup</column-name><column-value><![CDATA[");
		sb.append(getAgeGroup());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personaDesc</column-name><column-value><![CDATA[");
		sb.append(getPersonaDesc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>personaImageId</column-name><column-value><![CDATA[");
		sb.append(getPersonaImageId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spCourseId</column-name><column-value><![CDATA[");
		sb.append(getSpCourseId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Persona.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Persona.class
		};
	private long _spPersonaId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _personaType;
	private String _ageGroup;
	private String _personaDesc;
	private long _personaImageId;
	private long _spCourseId;
	private long _originalSpCourseId;
	private boolean _setOriginalSpCourseId;
	private long _columnBitmask;
	private Persona _escapedModel;
}
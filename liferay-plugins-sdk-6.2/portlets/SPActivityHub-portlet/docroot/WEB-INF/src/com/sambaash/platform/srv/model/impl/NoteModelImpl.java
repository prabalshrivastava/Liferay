/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.model.Note;
import com.sambaash.platform.srv.model.NoteModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Note service. Represents a row in the &quot;SPNote&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.model.NoteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NoteImpl}.
 * </p>
 *
 * @author aishwarya
 * @see NoteImpl
 * @see com.sambaash.platform.srv.model.Note
 * @see com.sambaash.platform.srv.model.NoteModel
 * @generated
 */
public class NoteModelImpl extends BaseModelImpl<Note> implements NoteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a note model instance should use the {@link com.sambaash.platform.srv.model.Note} interface instead.
	 */
	public static final String TABLE_NAME = "SPNote";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spNoteId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "entityClassId", Types.BIGINT },
			{ "entityClassName", Types.VARCHAR },
			{ "entityId", Types.BIGINT },
			{ "savedByUserId", Types.BIGINT },
			{ "noteTitle", Types.VARCHAR },
			{ "noteContent", Types.VARCHAR },
			{ "fileEntryId", Types.VARCHAR },
			{ "associatedWith", Types.BIGINT },
			{ "status", Types.INTEGER },
			{ "parentNoteId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPNote (spNoteId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,entityClassId BIGINT(20),entityClassName VARCHAR(75) null,entityId BIGINT(20),savedByUserId BIGINT(20),noteTitle VARCHAR(75) null,noteContent VARCHAR(75) null,fileEntryId VARCHAR(75) null,associatedWith BIGINT(20),status INTEGER,parentNoteId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPNote";
	public static final String ORDER_BY_JPQL = " ORDER BY note.spNoteId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPNote.spNoteId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.model.Note"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.model.Note"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.model.Note"),
			true);
	public static long ENTITYCLASSID_COLUMN_BITMASK = 1L;
	public static long ENTITYID_COLUMN_BITMASK = 2L;
	public static long PARENTNOTEID_COLUMN_BITMASK = 4L;
	public static long SPNOTEID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.model.Note"));

	public NoteModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spNoteId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpNoteId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spNoteId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Note.class;
	}

	@Override
	public String getModelClassName() {
		return Note.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spNoteId", getSpNoteId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("entityClassId", getEntityClassId());
		attributes.put("entityClassName", getEntityClassName());
		attributes.put("entityId", getEntityId());
		attributes.put("savedByUserId", getSavedByUserId());
		attributes.put("noteTitle", getNoteTitle());
		attributes.put("noteContent", getNoteContent());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("associatedWith", getAssociatedWith());
		attributes.put("status", getStatus());
		attributes.put("parentNoteId", getParentNoteId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spNoteId = (Long)attributes.get("spNoteId");

		if (spNoteId != null) {
			setSpNoteId(spNoteId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long entityClassId = (Long)attributes.get("entityClassId");

		if (entityClassId != null) {
			setEntityClassId(entityClassId);
		}

		String entityClassName = (String)attributes.get("entityClassName");

		if (entityClassName != null) {
			setEntityClassName(entityClassName);
		}

		Long entityId = (Long)attributes.get("entityId");

		if (entityId != null) {
			setEntityId(entityId);
		}

		Long savedByUserId = (Long)attributes.get("savedByUserId");

		if (savedByUserId != null) {
			setSavedByUserId(savedByUserId);
		}

		String noteTitle = (String)attributes.get("noteTitle");

		if (noteTitle != null) {
			setNoteTitle(noteTitle);
		}

		String noteContent = (String)attributes.get("noteContent");

		if (noteContent != null) {
			setNoteContent(noteContent);
		}

		String fileEntryId = (String)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		Long associatedWith = (Long)attributes.get("associatedWith");

		if (associatedWith != null) {
			setAssociatedWith(associatedWith);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long parentNoteId = (Long)attributes.get("parentNoteId");

		if (parentNoteId != null) {
			setParentNoteId(parentNoteId);
		}
	}

	@Override
	public long getSpNoteId() {
		return _spNoteId;
	}

	@Override
	public void setSpNoteId(long spNoteId) {
		_spNoteId = spNoteId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getEntityClassId() {
		return _entityClassId;
	}

	@Override
	public void setEntityClassId(long entityClassId) {
		_columnBitmask |= ENTITYCLASSID_COLUMN_BITMASK;

		if (!_setOriginalEntityClassId) {
			_setOriginalEntityClassId = true;

			_originalEntityClassId = _entityClassId;
		}

		_entityClassId = entityClassId;
	}

	public long getOriginalEntityClassId() {
		return _originalEntityClassId;
	}

	@Override
	public String getEntityClassName() {
		if (_entityClassName == null) {
			return StringPool.BLANK;
		}
		else {
			return _entityClassName;
		}
	}

	@Override
	public void setEntityClassName(String entityClassName) {
		_entityClassName = entityClassName;
	}

	@Override
	public long getEntityId() {
		return _entityId;
	}

	@Override
	public void setEntityId(long entityId) {
		_columnBitmask |= ENTITYID_COLUMN_BITMASK;

		if (!_setOriginalEntityId) {
			_setOriginalEntityId = true;

			_originalEntityId = _entityId;
		}

		_entityId = entityId;
	}

	public long getOriginalEntityId() {
		return _originalEntityId;
	}

	@Override
	public long getSavedByUserId() {
		return _savedByUserId;
	}

	@Override
	public void setSavedByUserId(long savedByUserId) {
		_savedByUserId = savedByUserId;
	}

	@Override
	public String getSavedByUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getSavedByUserId(), "uuid",
			_savedByUserUuid);
	}

	@Override
	public void setSavedByUserUuid(String savedByUserUuid) {
		_savedByUserUuid = savedByUserUuid;
	}

	@Override
	public String getNoteTitle() {
		if (_noteTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _noteTitle;
		}
	}

	@Override
	public void setNoteTitle(String noteTitle) {
		_noteTitle = noteTitle;
	}

	@Override
	public String getNoteContent() {
		if (_noteContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _noteContent;
		}
	}

	@Override
	public void setNoteContent(String noteContent) {
		_noteContent = noteContent;
	}

	@Override
	public String getFileEntryId() {
		if (_fileEntryId == null) {
			return StringPool.BLANK;
		}
		else {
			return _fileEntryId;
		}
	}

	@Override
	public void setFileEntryId(String fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@Override
	public long getAssociatedWith() {
		return _associatedWith;
	}

	@Override
	public void setAssociatedWith(long associatedWith) {
		_associatedWith = associatedWith;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public long getParentNoteId() {
		return _parentNoteId;
	}

	@Override
	public void setParentNoteId(long parentNoteId) {
		_columnBitmask |= PARENTNOTEID_COLUMN_BITMASK;

		if (!_setOriginalParentNoteId) {
			_setOriginalParentNoteId = true;

			_originalParentNoteId = _parentNoteId;
		}

		_parentNoteId = parentNoteId;
	}

	public long getOriginalParentNoteId() {
		return _originalParentNoteId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Note.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Note toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Note)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NoteImpl noteImpl = new NoteImpl();

		noteImpl.setSpNoteId(getSpNoteId());
		noteImpl.setGroupId(getGroupId());
		noteImpl.setCompanyId(getCompanyId());
		noteImpl.setUserId(getUserId());
		noteImpl.setUserName(getUserName());
		noteImpl.setCreateDate(getCreateDate());
		noteImpl.setModifiedDate(getModifiedDate());
		noteImpl.setEntityClassId(getEntityClassId());
		noteImpl.setEntityClassName(getEntityClassName());
		noteImpl.setEntityId(getEntityId());
		noteImpl.setSavedByUserId(getSavedByUserId());
		noteImpl.setNoteTitle(getNoteTitle());
		noteImpl.setNoteContent(getNoteContent());
		noteImpl.setFileEntryId(getFileEntryId());
		noteImpl.setAssociatedWith(getAssociatedWith());
		noteImpl.setStatus(getStatus());
		noteImpl.setParentNoteId(getParentNoteId());

		noteImpl.resetOriginalValues();

		return noteImpl;
	}

	@Override
	public int compareTo(Note note) {
		long primaryKey = note.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Note)) {
			return false;
		}

		Note note = (Note)obj;

		long primaryKey = note.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		NoteModelImpl noteModelImpl = this;

		noteModelImpl._originalEntityClassId = noteModelImpl._entityClassId;

		noteModelImpl._setOriginalEntityClassId = false;

		noteModelImpl._originalEntityId = noteModelImpl._entityId;

		noteModelImpl._setOriginalEntityId = false;

		noteModelImpl._originalParentNoteId = noteModelImpl._parentNoteId;

		noteModelImpl._setOriginalParentNoteId = false;

		noteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Note> toCacheModel() {
		NoteCacheModel noteCacheModel = new NoteCacheModel();

		noteCacheModel.spNoteId = getSpNoteId();

		noteCacheModel.groupId = getGroupId();

		noteCacheModel.companyId = getCompanyId();

		noteCacheModel.userId = getUserId();

		noteCacheModel.userName = getUserName();

		String userName = noteCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			noteCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			noteCacheModel.createDate = createDate.getTime();
		}
		else {
			noteCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			noteCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			noteCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		noteCacheModel.entityClassId = getEntityClassId();

		noteCacheModel.entityClassName = getEntityClassName();

		String entityClassName = noteCacheModel.entityClassName;

		if ((entityClassName != null) && (entityClassName.length() == 0)) {
			noteCacheModel.entityClassName = null;
		}

		noteCacheModel.entityId = getEntityId();

		noteCacheModel.savedByUserId = getSavedByUserId();

		noteCacheModel.noteTitle = getNoteTitle();

		String noteTitle = noteCacheModel.noteTitle;

		if ((noteTitle != null) && (noteTitle.length() == 0)) {
			noteCacheModel.noteTitle = null;
		}

		noteCacheModel.noteContent = getNoteContent();

		String noteContent = noteCacheModel.noteContent;

		if ((noteContent != null) && (noteContent.length() == 0)) {
			noteCacheModel.noteContent = null;
		}

		noteCacheModel.fileEntryId = getFileEntryId();

		String fileEntryId = noteCacheModel.fileEntryId;

		if ((fileEntryId != null) && (fileEntryId.length() == 0)) {
			noteCacheModel.fileEntryId = null;
		}

		noteCacheModel.associatedWith = getAssociatedWith();

		noteCacheModel.status = getStatus();

		noteCacheModel.parentNoteId = getParentNoteId();

		return noteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(35);

		sb.append("{spNoteId=");
		sb.append(getSpNoteId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", entityClassId=");
		sb.append(getEntityClassId());
		sb.append(", entityClassName=");
		sb.append(getEntityClassName());
		sb.append(", entityId=");
		sb.append(getEntityId());
		sb.append(", savedByUserId=");
		sb.append(getSavedByUserId());
		sb.append(", noteTitle=");
		sb.append(getNoteTitle());
		sb.append(", noteContent=");
		sb.append(getNoteContent());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", associatedWith=");
		sb.append(getAssociatedWith());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", parentNoteId=");
		sb.append(getParentNoteId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(55);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.model.Note");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spNoteId</column-name><column-value><![CDATA[");
		sb.append(getSpNoteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityClassId</column-name><column-value><![CDATA[");
		sb.append(getEntityClassId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityClassName</column-name><column-value><![CDATA[");
		sb.append(getEntityClassName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>entityId</column-name><column-value><![CDATA[");
		sb.append(getEntityId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>savedByUserId</column-name><column-value><![CDATA[");
		sb.append(getSavedByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noteTitle</column-name><column-value><![CDATA[");
		sb.append(getNoteTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>noteContent</column-name><column-value><![CDATA[");
		sb.append(getNoteContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>associatedWith</column-name><column-value><![CDATA[");
		sb.append(getAssociatedWith());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentNoteId</column-name><column-value><![CDATA[");
		sb.append(getParentNoteId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Note.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Note.class };
	private long _spNoteId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _entityClassId;
	private long _originalEntityClassId;
	private boolean _setOriginalEntityClassId;
	private String _entityClassName;
	private long _entityId;
	private long _originalEntityId;
	private boolean _setOriginalEntityId;
	private long _savedByUserId;
	private String _savedByUserUuid;
	private String _noteTitle;
	private String _noteContent;
	private String _fileEntryId;
	private long _associatedWith;
	private int _status;
	private long _parentNoteId;
	private long _originalParentNoteId;
	private boolean _setOriginalParentNoteId;
	private long _columnBitmask;
	private Note _escapedModel;
}
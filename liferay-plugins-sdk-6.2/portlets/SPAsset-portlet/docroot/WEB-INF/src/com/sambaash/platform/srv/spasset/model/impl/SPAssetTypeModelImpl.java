/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spasset.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spasset.model.SPAssetType;
import com.sambaash.platform.srv.spasset.model.SPAssetTypeModel;
import com.sambaash.platform.srv.spasset.model.SPAssetTypeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SPAssetType service. Represents a row in the &quot;SPAssetType&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spasset.model.SPAssetTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPAssetTypeImpl}.
 * </p>
 *
 * @author harini
 * @see SPAssetTypeImpl
 * @see com.sambaash.platform.srv.spasset.model.SPAssetType
 * @see com.sambaash.platform.srv.spasset.model.SPAssetTypeModel
 * @generated
 */
@JSON(strict = true)
public class SPAssetTypeModelImpl extends BaseModelImpl<SPAssetType>
	implements SPAssetTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p asset type model instance should use the {@link com.sambaash.platform.srv.spasset.model.SPAssetType} interface instead.
	 */
	public static final String TABLE_NAME = "SPAssetType";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spAssetTypeId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "spAssetTypeName", Types.VARCHAR },
			{ "status", Types.BOOLEAN },
			{ "modifiedBy", Types.VARCHAR },
			{ "spAssetTypeCreateUrl", Types.VARCHAR },
			{ "spAssetTypeDetailUrl", Types.VARCHAR },
			{ "spAssetTypeInnerDetailUrl", Types.VARCHAR },
			{ "requiredTermsOfUse", Types.BOOLEAN },
			{ "requiredLogin", Types.BOOLEAN },
			{ "categoryMandatory", Types.BOOLEAN },
			{ "notifyUponCreation", Types.BOOLEAN },
			{ "notificationTemplateId", Types.BIGINT },
			{ "allowedFileTypes", Types.VARCHAR },
			{ "maxFileSize", Types.INTEGER },
			{ "minImageHeight", Types.INTEGER },
			{ "minImageWidth", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table SPAssetType (uuid_ VARCHAR(75) null,spAssetTypeId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,spAssetTypeName VARCHAR(75) null,status BOOLEAN,modifiedBy VARCHAR(75) null,spAssetTypeCreateUrl VARCHAR(75) null,spAssetTypeDetailUrl VARCHAR(75) null,spAssetTypeInnerDetailUrl VARCHAR(75) null,requiredTermsOfUse BOOLEAN,requiredLogin BOOLEAN,categoryMandatory BOOLEAN,notifyUponCreation BOOLEAN,notificationTemplateId BIGINT(20),allowedFileTypes VARCHAR(255) null,maxFileSize INTEGER,minImageHeight INTEGER,minImageWidth INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table SPAssetType";
	public static final String ORDER_BY_JPQL = " ORDER BY spAssetType.spAssetTypeId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPAssetType.spAssetTypeId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spasset.model.SPAssetType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spasset.model.SPAssetType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spasset.model.SPAssetType"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long STATUS_COLUMN_BITMASK = 2L;
	public static long SPASSETTYPEID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SPAssetType toModel(SPAssetTypeSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SPAssetType model = new SPAssetTypeImpl();

		model.setUuid_(soapModel.getUuid_());
		model.setSpAssetTypeId(soapModel.getSpAssetTypeId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setSpAssetTypeName(soapModel.getSpAssetTypeName());
		model.setStatus(soapModel.getStatus());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setSpAssetTypeCreateUrl(soapModel.getSpAssetTypeCreateUrl());
		model.setSpAssetTypeDetailUrl(soapModel.getSpAssetTypeDetailUrl());
		model.setSpAssetTypeInnerDetailUrl(soapModel.getSpAssetTypeInnerDetailUrl());
		model.setRequiredTermsOfUse(soapModel.getRequiredTermsOfUse());
		model.setRequiredLogin(soapModel.getRequiredLogin());
		model.setCategoryMandatory(soapModel.getCategoryMandatory());
		model.setNotifyUponCreation(soapModel.getNotifyUponCreation());
		model.setNotificationTemplateId(soapModel.getNotificationTemplateId());
		model.setAllowedFileTypes(soapModel.getAllowedFileTypes());
		model.setMaxFileSize(soapModel.getMaxFileSize());
		model.setMinImageHeight(soapModel.getMinImageHeight());
		model.setMinImageWidth(soapModel.getMinImageWidth());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SPAssetType> toModels(SPAssetTypeSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SPAssetType> models = new ArrayList<SPAssetType>(soapModels.length);

		for (SPAssetTypeSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spasset.model.SPAssetType"));

	public SPAssetTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spAssetTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpAssetTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spAssetTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPAssetType.class;
	}

	@Override
	public String getModelClassName() {
		return SPAssetType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid_", getUuid_());
		attributes.put("spAssetTypeId", getSpAssetTypeId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("spAssetTypeName", getSpAssetTypeName());
		attributes.put("status", getStatus());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("spAssetTypeCreateUrl", getSpAssetTypeCreateUrl());
		attributes.put("spAssetTypeDetailUrl", getSpAssetTypeDetailUrl());
		attributes.put("spAssetTypeInnerDetailUrl",
			getSpAssetTypeInnerDetailUrl());
		attributes.put("requiredTermsOfUse", getRequiredTermsOfUse());
		attributes.put("requiredLogin", getRequiredLogin());
		attributes.put("categoryMandatory", getCategoryMandatory());
		attributes.put("notifyUponCreation", getNotifyUponCreation());
		attributes.put("notificationTemplateId", getNotificationTemplateId());
		attributes.put("allowedFileTypes", getAllowedFileTypes());
		attributes.put("maxFileSize", getMaxFileSize());
		attributes.put("minImageHeight", getMinImageHeight());
		attributes.put("minImageWidth", getMinImageWidth());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid_ = (String)attributes.get("uuid_");

		if (uuid_ != null) {
			setUuid_(uuid_);
		}

		Long spAssetTypeId = (Long)attributes.get("spAssetTypeId");

		if (spAssetTypeId != null) {
			setSpAssetTypeId(spAssetTypeId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String spAssetTypeName = (String)attributes.get("spAssetTypeName");

		if (spAssetTypeName != null) {
			setSpAssetTypeName(spAssetTypeName);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		String spAssetTypeCreateUrl = (String)attributes.get(
				"spAssetTypeCreateUrl");

		if (spAssetTypeCreateUrl != null) {
			setSpAssetTypeCreateUrl(spAssetTypeCreateUrl);
		}

		String spAssetTypeDetailUrl = (String)attributes.get(
				"spAssetTypeDetailUrl");

		if (spAssetTypeDetailUrl != null) {
			setSpAssetTypeDetailUrl(spAssetTypeDetailUrl);
		}

		String spAssetTypeInnerDetailUrl = (String)attributes.get(
				"spAssetTypeInnerDetailUrl");

		if (spAssetTypeInnerDetailUrl != null) {
			setSpAssetTypeInnerDetailUrl(spAssetTypeInnerDetailUrl);
		}

		Boolean requiredTermsOfUse = (Boolean)attributes.get(
				"requiredTermsOfUse");

		if (requiredTermsOfUse != null) {
			setRequiredTermsOfUse(requiredTermsOfUse);
		}

		Boolean requiredLogin = (Boolean)attributes.get("requiredLogin");

		if (requiredLogin != null) {
			setRequiredLogin(requiredLogin);
		}

		Boolean categoryMandatory = (Boolean)attributes.get("categoryMandatory");

		if (categoryMandatory != null) {
			setCategoryMandatory(categoryMandatory);
		}

		Boolean notifyUponCreation = (Boolean)attributes.get(
				"notifyUponCreation");

		if (notifyUponCreation != null) {
			setNotifyUponCreation(notifyUponCreation);
		}

		Long notificationTemplateId = (Long)attributes.get(
				"notificationTemplateId");

		if (notificationTemplateId != null) {
			setNotificationTemplateId(notificationTemplateId);
		}

		String allowedFileTypes = (String)attributes.get("allowedFileTypes");

		if (allowedFileTypes != null) {
			setAllowedFileTypes(allowedFileTypes);
		}

		Integer maxFileSize = (Integer)attributes.get("maxFileSize");

		if (maxFileSize != null) {
			setMaxFileSize(maxFileSize);
		}

		Integer minImageHeight = (Integer)attributes.get("minImageHeight");

		if (minImageHeight != null) {
			setMinImageHeight(minImageHeight);
		}

		Integer minImageWidth = (Integer)attributes.get("minImageWidth");

		if (minImageWidth != null) {
			setMinImageWidth(minImageWidth);
		}
	}

	@JSON
	@Override
	public String getUuid_() {
		if (_uuid_ == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid_;
		}
	}

	@Override
	public void setUuid_(String uuid_) {
		_uuid_ = uuid_;
	}

	@JSON
	@Override
	public long getSpAssetTypeId() {
		return _spAssetTypeId;
	}

	@Override
	public void setSpAssetTypeId(long spAssetTypeId) {
		_spAssetTypeId = spAssetTypeId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getSpAssetTypeName() {
		if (_spAssetTypeName == null) {
			return StringPool.BLANK;
		}
		else {
			return _spAssetTypeName;
		}
	}

	@Override
	public void setSpAssetTypeName(String spAssetTypeName) {
		_spAssetTypeName = spAssetTypeName;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public boolean getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public String getSpAssetTypeCreateUrl() {
		if (_spAssetTypeCreateUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _spAssetTypeCreateUrl;
		}
	}

	@Override
	public void setSpAssetTypeCreateUrl(String spAssetTypeCreateUrl) {
		_spAssetTypeCreateUrl = spAssetTypeCreateUrl;
	}

	@JSON
	@Override
	public String getSpAssetTypeDetailUrl() {
		if (_spAssetTypeDetailUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _spAssetTypeDetailUrl;
		}
	}

	@Override
	public void setSpAssetTypeDetailUrl(String spAssetTypeDetailUrl) {
		_spAssetTypeDetailUrl = spAssetTypeDetailUrl;
	}

	@JSON
	@Override
	public String getSpAssetTypeInnerDetailUrl() {
		if (_spAssetTypeInnerDetailUrl == null) {
			return StringPool.BLANK;
		}
		else {
			return _spAssetTypeInnerDetailUrl;
		}
	}

	@Override
	public void setSpAssetTypeInnerDetailUrl(String spAssetTypeInnerDetailUrl) {
		_spAssetTypeInnerDetailUrl = spAssetTypeInnerDetailUrl;
	}

	@JSON
	@Override
	public boolean getRequiredTermsOfUse() {
		return _requiredTermsOfUse;
	}

	@Override
	public boolean isRequiredTermsOfUse() {
		return _requiredTermsOfUse;
	}

	@Override
	public void setRequiredTermsOfUse(boolean requiredTermsOfUse) {
		_requiredTermsOfUse = requiredTermsOfUse;
	}

	@JSON
	@Override
	public boolean getRequiredLogin() {
		return _requiredLogin;
	}

	@Override
	public boolean isRequiredLogin() {
		return _requiredLogin;
	}

	@Override
	public void setRequiredLogin(boolean requiredLogin) {
		_requiredLogin = requiredLogin;
	}

	@JSON
	@Override
	public boolean getCategoryMandatory() {
		return _categoryMandatory;
	}

	@Override
	public boolean isCategoryMandatory() {
		return _categoryMandatory;
	}

	@Override
	public void setCategoryMandatory(boolean categoryMandatory) {
		_categoryMandatory = categoryMandatory;
	}

	@JSON
	@Override
	public boolean getNotifyUponCreation() {
		return _notifyUponCreation;
	}

	@Override
	public boolean isNotifyUponCreation() {
		return _notifyUponCreation;
	}

	@Override
	public void setNotifyUponCreation(boolean notifyUponCreation) {
		_notifyUponCreation = notifyUponCreation;
	}

	@JSON
	@Override
	public long getNotificationTemplateId() {
		return _notificationTemplateId;
	}

	@Override
	public void setNotificationTemplateId(long notificationTemplateId) {
		_notificationTemplateId = notificationTemplateId;
	}

	@JSON
	@Override
	public String getAllowedFileTypes() {
		if (_allowedFileTypes == null) {
			return StringPool.BLANK;
		}
		else {
			return _allowedFileTypes;
		}
	}

	@Override
	public void setAllowedFileTypes(String allowedFileTypes) {
		_allowedFileTypes = allowedFileTypes;
	}

	@JSON
	@Override
	public int getMaxFileSize() {
		return _maxFileSize;
	}

	@Override
	public void setMaxFileSize(int maxFileSize) {
		_maxFileSize = maxFileSize;
	}

	@JSON
	@Override
	public int getMinImageHeight() {
		return _minImageHeight;
	}

	@Override
	public void setMinImageHeight(int minImageHeight) {
		_minImageHeight = minImageHeight;
	}

	@JSON
	@Override
	public int getMinImageWidth() {
		return _minImageWidth;
	}

	@Override
	public void setMinImageWidth(int minImageWidth) {
		_minImageWidth = minImageWidth;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPAssetType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPAssetType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPAssetType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPAssetTypeImpl spAssetTypeImpl = new SPAssetTypeImpl();

		spAssetTypeImpl.setUuid_(getUuid_());
		spAssetTypeImpl.setSpAssetTypeId(getSpAssetTypeId());
		spAssetTypeImpl.setGroupId(getGroupId());
		spAssetTypeImpl.setCompanyId(getCompanyId());
		spAssetTypeImpl.setUserId(getUserId());
		spAssetTypeImpl.setUserName(getUserName());
		spAssetTypeImpl.setCreateDate(getCreateDate());
		spAssetTypeImpl.setModifiedDate(getModifiedDate());
		spAssetTypeImpl.setSpAssetTypeName(getSpAssetTypeName());
		spAssetTypeImpl.setStatus(getStatus());
		spAssetTypeImpl.setModifiedBy(getModifiedBy());
		spAssetTypeImpl.setSpAssetTypeCreateUrl(getSpAssetTypeCreateUrl());
		spAssetTypeImpl.setSpAssetTypeDetailUrl(getSpAssetTypeDetailUrl());
		spAssetTypeImpl.setSpAssetTypeInnerDetailUrl(getSpAssetTypeInnerDetailUrl());
		spAssetTypeImpl.setRequiredTermsOfUse(getRequiredTermsOfUse());
		spAssetTypeImpl.setRequiredLogin(getRequiredLogin());
		spAssetTypeImpl.setCategoryMandatory(getCategoryMandatory());
		spAssetTypeImpl.setNotifyUponCreation(getNotifyUponCreation());
		spAssetTypeImpl.setNotificationTemplateId(getNotificationTemplateId());
		spAssetTypeImpl.setAllowedFileTypes(getAllowedFileTypes());
		spAssetTypeImpl.setMaxFileSize(getMaxFileSize());
		spAssetTypeImpl.setMinImageHeight(getMinImageHeight());
		spAssetTypeImpl.setMinImageWidth(getMinImageWidth());

		spAssetTypeImpl.resetOriginalValues();

		return spAssetTypeImpl;
	}

	@Override
	public int compareTo(SPAssetType spAssetType) {
		long primaryKey = spAssetType.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPAssetType)) {
			return false;
		}

		SPAssetType spAssetType = (SPAssetType)obj;

		long primaryKey = spAssetType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPAssetTypeModelImpl spAssetTypeModelImpl = this;

		spAssetTypeModelImpl._originalGroupId = spAssetTypeModelImpl._groupId;

		spAssetTypeModelImpl._setOriginalGroupId = false;

		spAssetTypeModelImpl._originalStatus = spAssetTypeModelImpl._status;

		spAssetTypeModelImpl._setOriginalStatus = false;

		spAssetTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPAssetType> toCacheModel() {
		SPAssetTypeCacheModel spAssetTypeCacheModel = new SPAssetTypeCacheModel();

		spAssetTypeCacheModel.uuid_ = getUuid_();

		String uuid_ = spAssetTypeCacheModel.uuid_;

		if ((uuid_ != null) && (uuid_.length() == 0)) {
			spAssetTypeCacheModel.uuid_ = null;
		}

		spAssetTypeCacheModel.spAssetTypeId = getSpAssetTypeId();

		spAssetTypeCacheModel.groupId = getGroupId();

		spAssetTypeCacheModel.companyId = getCompanyId();

		spAssetTypeCacheModel.userId = getUserId();

		spAssetTypeCacheModel.userName = getUserName();

		String userName = spAssetTypeCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			spAssetTypeCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			spAssetTypeCacheModel.createDate = createDate.getTime();
		}
		else {
			spAssetTypeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spAssetTypeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spAssetTypeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		spAssetTypeCacheModel.spAssetTypeName = getSpAssetTypeName();

		String spAssetTypeName = spAssetTypeCacheModel.spAssetTypeName;

		if ((spAssetTypeName != null) && (spAssetTypeName.length() == 0)) {
			spAssetTypeCacheModel.spAssetTypeName = null;
		}

		spAssetTypeCacheModel.status = getStatus();

		spAssetTypeCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = spAssetTypeCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			spAssetTypeCacheModel.modifiedBy = null;
		}

		spAssetTypeCacheModel.spAssetTypeCreateUrl = getSpAssetTypeCreateUrl();

		String spAssetTypeCreateUrl = spAssetTypeCacheModel.spAssetTypeCreateUrl;

		if ((spAssetTypeCreateUrl != null) &&
				(spAssetTypeCreateUrl.length() == 0)) {
			spAssetTypeCacheModel.spAssetTypeCreateUrl = null;
		}

		spAssetTypeCacheModel.spAssetTypeDetailUrl = getSpAssetTypeDetailUrl();

		String spAssetTypeDetailUrl = spAssetTypeCacheModel.spAssetTypeDetailUrl;

		if ((spAssetTypeDetailUrl != null) &&
				(spAssetTypeDetailUrl.length() == 0)) {
			spAssetTypeCacheModel.spAssetTypeDetailUrl = null;
		}

		spAssetTypeCacheModel.spAssetTypeInnerDetailUrl = getSpAssetTypeInnerDetailUrl();

		String spAssetTypeInnerDetailUrl = spAssetTypeCacheModel.spAssetTypeInnerDetailUrl;

		if ((spAssetTypeInnerDetailUrl != null) &&
				(spAssetTypeInnerDetailUrl.length() == 0)) {
			spAssetTypeCacheModel.spAssetTypeInnerDetailUrl = null;
		}

		spAssetTypeCacheModel.requiredTermsOfUse = getRequiredTermsOfUse();

		spAssetTypeCacheModel.requiredLogin = getRequiredLogin();

		spAssetTypeCacheModel.categoryMandatory = getCategoryMandatory();

		spAssetTypeCacheModel.notifyUponCreation = getNotifyUponCreation();

		spAssetTypeCacheModel.notificationTemplateId = getNotificationTemplateId();

		spAssetTypeCacheModel.allowedFileTypes = getAllowedFileTypes();

		String allowedFileTypes = spAssetTypeCacheModel.allowedFileTypes;

		if ((allowedFileTypes != null) && (allowedFileTypes.length() == 0)) {
			spAssetTypeCacheModel.allowedFileTypes = null;
		}

		spAssetTypeCacheModel.maxFileSize = getMaxFileSize();

		spAssetTypeCacheModel.minImageHeight = getMinImageHeight();

		spAssetTypeCacheModel.minImageWidth = getMinImageWidth();

		return spAssetTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{uuid_=");
		sb.append(getUuid_());
		sb.append(", spAssetTypeId=");
		sb.append(getSpAssetTypeId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", spAssetTypeName=");
		sb.append(getSpAssetTypeName());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", spAssetTypeCreateUrl=");
		sb.append(getSpAssetTypeCreateUrl());
		sb.append(", spAssetTypeDetailUrl=");
		sb.append(getSpAssetTypeDetailUrl());
		sb.append(", spAssetTypeInnerDetailUrl=");
		sb.append(getSpAssetTypeInnerDetailUrl());
		sb.append(", requiredTermsOfUse=");
		sb.append(getRequiredTermsOfUse());
		sb.append(", requiredLogin=");
		sb.append(getRequiredLogin());
		sb.append(", categoryMandatory=");
		sb.append(getCategoryMandatory());
		sb.append(", notifyUponCreation=");
		sb.append(getNotifyUponCreation());
		sb.append(", notificationTemplateId=");
		sb.append(getNotificationTemplateId());
		sb.append(", allowedFileTypes=");
		sb.append(getAllowedFileTypes());
		sb.append(", maxFileSize=");
		sb.append(getMaxFileSize());
		sb.append(", minImageHeight=");
		sb.append(getMinImageHeight());
		sb.append(", minImageWidth=");
		sb.append(getMinImageWidth());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.spasset.model.SPAssetType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid_</column-name><column-value><![CDATA[");
		sb.append(getUuid_());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spAssetTypeId</column-name><column-value><![CDATA[");
		sb.append(getSpAssetTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spAssetTypeName</column-name><column-value><![CDATA[");
		sb.append(getSpAssetTypeName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spAssetTypeCreateUrl</column-name><column-value><![CDATA[");
		sb.append(getSpAssetTypeCreateUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spAssetTypeDetailUrl</column-name><column-value><![CDATA[");
		sb.append(getSpAssetTypeDetailUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spAssetTypeInnerDetailUrl</column-name><column-value><![CDATA[");
		sb.append(getSpAssetTypeInnerDetailUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requiredTermsOfUse</column-name><column-value><![CDATA[");
		sb.append(getRequiredTermsOfUse());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requiredLogin</column-name><column-value><![CDATA[");
		sb.append(getRequiredLogin());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryMandatory</column-name><column-value><![CDATA[");
		sb.append(getCategoryMandatory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notifyUponCreation</column-name><column-value><![CDATA[");
		sb.append(getNotifyUponCreation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notificationTemplateId</column-name><column-value><![CDATA[");
		sb.append(getNotificationTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allowedFileTypes</column-name><column-value><![CDATA[");
		sb.append(getAllowedFileTypes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxFileSize</column-name><column-value><![CDATA[");
		sb.append(getMaxFileSize());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minImageHeight</column-name><column-value><![CDATA[");
		sb.append(getMinImageHeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minImageWidth</column-name><column-value><![CDATA[");
		sb.append(getMinImageWidth());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPAssetType.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPAssetType.class
		};
	private String _uuid_;
	private long _spAssetTypeId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _spAssetTypeName;
	private boolean _status;
	private boolean _originalStatus;
	private boolean _setOriginalStatus;
	private String _modifiedBy;
	private String _spAssetTypeCreateUrl;
	private String _spAssetTypeDetailUrl;
	private String _spAssetTypeInnerDetailUrl;
	private boolean _requiredTermsOfUse;
	private boolean _requiredLogin;
	private boolean _categoryMandatory;
	private boolean _notifyUponCreation;
	private long _notificationTemplateId;
	private String _allowedFileTypes;
	private int _maxFileSize;
	private int _minImageHeight;
	private int _minImageWidth;
	private long _columnBitmask;
	private SPAssetType _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spinbox.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.sambaash.platform.srv.spinbox.model.IBMessage;
import com.sambaash.platform.srv.spinbox.service.IBMessageLocalService;
import com.sambaash.platform.srv.spinbox.service.persistence.IBMessageDetailPersistence;
import com.sambaash.platform.srv.spinbox.service.persistence.IBMessagePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the i b message local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.sambaash.platform.srv.spinbox.service.impl.IBMessageLocalServiceImpl}.
 * </p>
 *
 * @author nareshchebolu
 * @see com.sambaash.platform.srv.spinbox.service.impl.IBMessageLocalServiceImpl
 * @see com.sambaash.platform.srv.spinbox.service.IBMessageLocalServiceUtil
 * @generated
 */
public abstract class IBMessageLocalServiceBaseImpl extends BaseLocalServiceImpl
	implements IBMessageLocalService, IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.sambaash.platform.srv.spinbox.service.IBMessageLocalServiceUtil} to access the i b message local service.
	 */

	/**
	 * Adds the i b message to the database. Also notifies the appropriate model listeners.
	 *
	 * @param ibMessage the i b message
	 * @return the i b message that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public IBMessage addIBMessage(IBMessage ibMessage)
		throws SystemException {
		ibMessage.setNew(true);

		return ibMessagePersistence.update(ibMessage);
	}

	/**
	 * Creates a new i b message with the primary key. Does not add the i b message to the database.
	 *
	 * @param messageId the primary key for the new i b message
	 * @return the new i b message
	 */
	@Override
	public IBMessage createIBMessage(long messageId) {
		return ibMessagePersistence.create(messageId);
	}

	/**
	 * Deletes the i b message with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param messageId the primary key of the i b message
	 * @return the i b message that was removed
	 * @throws PortalException if a i b message with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public IBMessage deleteIBMessage(long messageId)
		throws PortalException, SystemException {
		return ibMessagePersistence.remove(messageId);
	}

	/**
	 * Deletes the i b message from the database. Also notifies the appropriate model listeners.
	 *
	 * @param ibMessage the i b message
	 * @return the i b message that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public IBMessage deleteIBMessage(IBMessage ibMessage)
		throws SystemException {
		return ibMessagePersistence.remove(ibMessage);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(IBMessage.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return ibMessagePersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sambaash.platform.srv.spinbox.model.impl.IBMessageModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return ibMessagePersistence.findWithDynamicQuery(dynamicQuery, start,
			end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sambaash.platform.srv.spinbox.model.impl.IBMessageModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return ibMessagePersistence.findWithDynamicQuery(dynamicQuery, start,
			end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return ibMessagePersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return ibMessagePersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public IBMessage fetchIBMessage(long messageId) throws SystemException {
		return ibMessagePersistence.fetchByPrimaryKey(messageId);
	}

	/**
	 * Returns the i b message with the matching UUID and company.
	 *
	 * @param uuid the i b message's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching i b message, or <code>null</code> if a matching i b message could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public IBMessage fetchIBMessageByUuidAndCompanyId(String uuid,
		long companyId) throws SystemException {
		return ibMessagePersistence.fetchByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the i b message matching the UUID and group.
	 *
	 * @param uuid the i b message's UUID
	 * @param groupId the primary key of the group
	 * @return the matching i b message, or <code>null</code> if a matching i b message could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public IBMessage fetchIBMessageByUuidAndGroupId(String uuid, long groupId)
		throws SystemException {
		return ibMessagePersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the i b message with the primary key.
	 *
	 * @param messageId the primary key of the i b message
	 * @return the i b message
	 * @throws PortalException if a i b message with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public IBMessage getIBMessage(long messageId)
		throws PortalException, SystemException {
		return ibMessagePersistence.findByPrimaryKey(messageId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return ibMessagePersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the i b message with the matching UUID and company.
	 *
	 * @param uuid the i b message's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching i b message
	 * @throws PortalException if a matching i b message could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public IBMessage getIBMessageByUuidAndCompanyId(String uuid, long companyId)
		throws PortalException, SystemException {
		return ibMessagePersistence.findByUuid_C_First(uuid, companyId, null);
	}

	/**
	 * Returns the i b message matching the UUID and group.
	 *
	 * @param uuid the i b message's UUID
	 * @param groupId the primary key of the group
	 * @return the matching i b message
	 * @throws PortalException if a matching i b message could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public IBMessage getIBMessageByUuidAndGroupId(String uuid, long groupId)
		throws PortalException, SystemException {
		return ibMessagePersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the i b messages.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.sambaash.platform.srv.spinbox.model.impl.IBMessageModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of i b messages
	 * @param end the upper bound of the range of i b messages (not inclusive)
	 * @return the range of i b messages
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<IBMessage> getIBMessages(int start, int end)
		throws SystemException {
		return ibMessagePersistence.findAll(start, end);
	}

	/**
	 * Returns the number of i b messages.
	 *
	 * @return the number of i b messages
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getIBMessagesCount() throws SystemException {
		return ibMessagePersistence.countAll();
	}

	/**
	 * Updates the i b message in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param ibMessage the i b message
	 * @return the i b message that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public IBMessage updateIBMessage(IBMessage ibMessage)
		throws SystemException {
		return ibMessagePersistence.update(ibMessage);
	}

	/**
	 * Returns the i b message local service.
	 *
	 * @return the i b message local service
	 */
	public com.sambaash.platform.srv.spinbox.service.IBMessageLocalService getIBMessageLocalService() {
		return ibMessageLocalService;
	}

	/**
	 * Sets the i b message local service.
	 *
	 * @param ibMessageLocalService the i b message local service
	 */
	public void setIBMessageLocalService(
		com.sambaash.platform.srv.spinbox.service.IBMessageLocalService ibMessageLocalService) {
		this.ibMessageLocalService = ibMessageLocalService;
	}

	/**
	 * Returns the i b message remote service.
	 *
	 * @return the i b message remote service
	 */
	public com.sambaash.platform.srv.spinbox.service.IBMessageService getIBMessageService() {
		return ibMessageService;
	}

	/**
	 * Sets the i b message remote service.
	 *
	 * @param ibMessageService the i b message remote service
	 */
	public void setIBMessageService(
		com.sambaash.platform.srv.spinbox.service.IBMessageService ibMessageService) {
		this.ibMessageService = ibMessageService;
	}

	/**
	 * Returns the i b message persistence.
	 *
	 * @return the i b message persistence
	 */
	public IBMessagePersistence getIBMessagePersistence() {
		return ibMessagePersistence;
	}

	/**
	 * Sets the i b message persistence.
	 *
	 * @param ibMessagePersistence the i b message persistence
	 */
	public void setIBMessagePersistence(
		IBMessagePersistence ibMessagePersistence) {
		this.ibMessagePersistence = ibMessagePersistence;
	}

	/**
	 * Returns the i b message detail local service.
	 *
	 * @return the i b message detail local service
	 */
	public com.sambaash.platform.srv.spinbox.service.IBMessageDetailLocalService getIBMessageDetailLocalService() {
		return ibMessageDetailLocalService;
	}

	/**
	 * Sets the i b message detail local service.
	 *
	 * @param ibMessageDetailLocalService the i b message detail local service
	 */
	public void setIBMessageDetailLocalService(
		com.sambaash.platform.srv.spinbox.service.IBMessageDetailLocalService ibMessageDetailLocalService) {
		this.ibMessageDetailLocalService = ibMessageDetailLocalService;
	}

	/**
	 * Returns the i b message detail remote service.
	 *
	 * @return the i b message detail remote service
	 */
	public com.sambaash.platform.srv.spinbox.service.IBMessageDetailService getIBMessageDetailService() {
		return ibMessageDetailService;
	}

	/**
	 * Sets the i b message detail remote service.
	 *
	 * @param ibMessageDetailService the i b message detail remote service
	 */
	public void setIBMessageDetailService(
		com.sambaash.platform.srv.spinbox.service.IBMessageDetailService ibMessageDetailService) {
		this.ibMessageDetailService = ibMessageDetailService;
	}

	/**
	 * Returns the i b message detail persistence.
	 *
	 * @return the i b message detail persistence
	 */
	public IBMessageDetailPersistence getIBMessageDetailPersistence() {
		return ibMessageDetailPersistence;
	}

	/**
	 * Sets the i b message detail persistence.
	 *
	 * @param ibMessageDetailPersistence the i b message detail persistence
	 */
	public void setIBMessageDetailPersistence(
		IBMessageDetailPersistence ibMessageDetailPersistence) {
		this.ibMessageDetailPersistence = ibMessageDetailPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.sambaash.platform.srv.spinbox.model.IBMessage",
			ibMessageLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.sambaash.platform.srv.spinbox.model.IBMessage");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return IBMessage.class;
	}

	protected String getModelClassName() {
		return IBMessage.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = ibMessagePersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.sambaash.platform.srv.spinbox.service.IBMessageLocalService.class)
	protected com.sambaash.platform.srv.spinbox.service.IBMessageLocalService ibMessageLocalService;
	@BeanReference(type = com.sambaash.platform.srv.spinbox.service.IBMessageService.class)
	protected com.sambaash.platform.srv.spinbox.service.IBMessageService ibMessageService;
	@BeanReference(type = IBMessagePersistence.class)
	protected IBMessagePersistence ibMessagePersistence;
	@BeanReference(type = com.sambaash.platform.srv.spinbox.service.IBMessageDetailLocalService.class)
	protected com.sambaash.platform.srv.spinbox.service.IBMessageDetailLocalService ibMessageDetailLocalService;
	@BeanReference(type = com.sambaash.platform.srv.spinbox.service.IBMessageDetailService.class)
	protected com.sambaash.platform.srv.spinbox.service.IBMessageDetailService ibMessageDetailService;
	@BeanReference(type = IBMessageDetailPersistence.class)
	protected IBMessageDetailPersistence ibMessageDetailPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private IBMessageLocalServiceClpInvoker _clpInvoker = new IBMessageLocalServiceClpInvoker();
}
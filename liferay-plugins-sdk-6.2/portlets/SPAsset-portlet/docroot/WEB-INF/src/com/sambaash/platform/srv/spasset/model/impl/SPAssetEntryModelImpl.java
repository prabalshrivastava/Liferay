/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spasset.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spasset.model.SPAssetEntry;
import com.sambaash.platform.srv.spasset.model.SPAssetEntryModel;
import com.sambaash.platform.srv.spasset.model.SPAssetEntrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SPAssetEntry service. Represents a row in the &quot;SPAssetEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spasset.model.SPAssetEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPAssetEntryImpl}.
 * </p>
 *
 * @author harini
 * @see SPAssetEntryImpl
 * @see com.sambaash.platform.srv.spasset.model.SPAssetEntry
 * @see com.sambaash.platform.srv.spasset.model.SPAssetEntryModel
 * @generated
 */
@JSON(strict = true)
public class SPAssetEntryModelImpl extends BaseModelImpl<SPAssetEntry>
	implements SPAssetEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p asset entry model instance should use the {@link com.sambaash.platform.srv.spasset.model.SPAssetEntry} interface instead.
	 */
	public static final String TABLE_NAME = "SPAssetEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spAssetEntryId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dlFolderId", Types.BIGINT },
			{ "coverFileEntryId", Types.BIGINT },
			{ "spAssetTypeId", Types.BIGINT },
			{ "spAssetEntrySubType", Types.VARCHAR },
			{ "corporateProfileUserId", Types.BIGINT },
			{ "classNameId", Types.BIGINT },
			{ "title", Types.VARCHAR },
			{ "urlTitle", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "content", Types.VARCHAR },
			{ "link", Types.VARCHAR },
			{ "status", Types.BOOLEAN },
			{ "statusByUserName", Types.VARCHAR },
			{ "type_", Types.VARCHAR },
			{ "modifiedBy", Types.VARCHAR },
			{ "allowPingbacks", Types.BOOLEAN },
			{ "allowTrackbacks", Types.BOOLEAN },
			{ "trackbacks", Types.VARCHAR },
			{ "permissionType", Types.INTEGER },
			{ "agreedToTermsOfUse", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SPAssetEntry (uuid_ VARCHAR(75) null,spAssetEntryId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,dlFolderId BIGINT(20),coverFileEntryId BIGINT(20),spAssetTypeId BIGINT(20),spAssetEntrySubType VARCHAR(75) null,corporateProfileUserId BIGINT(20),classNameId BIGINT(20),title VARCHAR(255) null,urlTitle VARCHAR(300) null,description LONGTEXT null,content VARCHAR(75) null,link VARCHAR(75) null,status BOOLEAN,statusByUserName VARCHAR(75) null,type_ VARCHAR(75) null,modifiedBy VARCHAR(75) null,allowPingbacks BOOLEAN,allowTrackbacks BOOLEAN,trackbacks VARCHAR(75) null,permissionType INTEGER,agreedToTermsOfUse BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SPAssetEntry";
	public static final String ORDER_BY_JPQL = " ORDER BY spAssetEntry.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY SPAssetEntry.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spasset.model.SPAssetEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spasset.model.SPAssetEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spasset.model.SPAssetEntry"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long SPASSETTYPEID_COLUMN_BITMASK = 2L;
	public static long STATUS_COLUMN_BITMASK = 4L;
	public static long URLTITLE_COLUMN_BITMASK = 8L;
	public static long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SPAssetEntry toModel(SPAssetEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SPAssetEntry model = new SPAssetEntryImpl();

		model.setUuid_(soapModel.getUuid_());
		model.setSpAssetEntryId(soapModel.getSpAssetEntryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setDlFolderId(soapModel.getDlFolderId());
		model.setCoverFileEntryId(soapModel.getCoverFileEntryId());
		model.setSpAssetTypeId(soapModel.getSpAssetTypeId());
		model.setSpAssetEntrySubType(soapModel.getSpAssetEntrySubType());
		model.setCorporateProfileUserId(soapModel.getCorporateProfileUserId());
		model.setClassNameId(soapModel.getClassNameId());
		model.setTitle(soapModel.getTitle());
		model.setUrlTitle(soapModel.getUrlTitle());
		model.setDescription(soapModel.getDescription());
		model.setContent(soapModel.getContent());
		model.setLink(soapModel.getLink());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setType(soapModel.getType());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setAllowPingbacks(soapModel.getAllowPingbacks());
		model.setAllowTrackbacks(soapModel.getAllowTrackbacks());
		model.setTrackbacks(soapModel.getTrackbacks());
		model.setPermissionType(soapModel.getPermissionType());
		model.setAgreedToTermsOfUse(soapModel.getAgreedToTermsOfUse());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SPAssetEntry> toModels(SPAssetEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SPAssetEntry> models = new ArrayList<SPAssetEntry>(soapModels.length);

		for (SPAssetEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spasset.model.SPAssetEntry"));

	public SPAssetEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spAssetEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpAssetEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spAssetEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPAssetEntry.class;
	}

	@Override
	public String getModelClassName() {
		return SPAssetEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid_", getUuid_());
		attributes.put("spAssetEntryId", getSpAssetEntryId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dlFolderId", getDlFolderId());
		attributes.put("coverFileEntryId", getCoverFileEntryId());
		attributes.put("spAssetTypeId", getSpAssetTypeId());
		attributes.put("spAssetEntrySubType", getSpAssetEntrySubType());
		attributes.put("corporateProfileUserId", getCorporateProfileUserId());
		attributes.put("classNameId", getClassNameId());
		attributes.put("title", getTitle());
		attributes.put("urlTitle", getUrlTitle());
		attributes.put("description", getDescription());
		attributes.put("content", getContent());
		attributes.put("link", getLink());
		attributes.put("status", getStatus());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("type", getType());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("allowPingbacks", getAllowPingbacks());
		attributes.put("allowTrackbacks", getAllowTrackbacks());
		attributes.put("trackbacks", getTrackbacks());
		attributes.put("permissionType", getPermissionType());
		attributes.put("agreedToTermsOfUse", getAgreedToTermsOfUse());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid_ = (String)attributes.get("uuid_");

		if (uuid_ != null) {
			setUuid_(uuid_);
		}

		Long spAssetEntryId = (Long)attributes.get("spAssetEntryId");

		if (spAssetEntryId != null) {
			setSpAssetEntryId(spAssetEntryId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long dlFolderId = (Long)attributes.get("dlFolderId");

		if (dlFolderId != null) {
			setDlFolderId(dlFolderId);
		}

		Long coverFileEntryId = (Long)attributes.get("coverFileEntryId");

		if (coverFileEntryId != null) {
			setCoverFileEntryId(coverFileEntryId);
		}

		Long spAssetTypeId = (Long)attributes.get("spAssetTypeId");

		if (spAssetTypeId != null) {
			setSpAssetTypeId(spAssetTypeId);
		}

		String spAssetEntrySubType = (String)attributes.get(
				"spAssetEntrySubType");

		if (spAssetEntrySubType != null) {
			setSpAssetEntrySubType(spAssetEntrySubType);
		}

		Long corporateProfileUserId = (Long)attributes.get(
				"corporateProfileUserId");

		if (corporateProfileUserId != null) {
			setCorporateProfileUserId(corporateProfileUserId);
		}

		Long classNameId = (Long)attributes.get("classNameId");

		if (classNameId != null) {
			setClassNameId(classNameId);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String urlTitle = (String)attributes.get("urlTitle");

		if (urlTitle != null) {
			setUrlTitle(urlTitle);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		String link = (String)attributes.get("link");

		if (link != null) {
			setLink(link);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		String type = (String)attributes.get("type");

		if (type != null) {
			setType(type);
		}

		String modifiedBy = (String)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Boolean allowPingbacks = (Boolean)attributes.get("allowPingbacks");

		if (allowPingbacks != null) {
			setAllowPingbacks(allowPingbacks);
		}

		Boolean allowTrackbacks = (Boolean)attributes.get("allowTrackbacks");

		if (allowTrackbacks != null) {
			setAllowTrackbacks(allowTrackbacks);
		}

		String trackbacks = (String)attributes.get("trackbacks");

		if (trackbacks != null) {
			setTrackbacks(trackbacks);
		}

		Integer permissionType = (Integer)attributes.get("permissionType");

		if (permissionType != null) {
			setPermissionType(permissionType);
		}

		Boolean agreedToTermsOfUse = (Boolean)attributes.get(
				"agreedToTermsOfUse");

		if (agreedToTermsOfUse != null) {
			setAgreedToTermsOfUse(agreedToTermsOfUse);
		}
	}

	@JSON
	@Override
	public String getUuid_() {
		if (_uuid_ == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid_;
		}
	}

	@Override
	public void setUuid_(String uuid_) {
		_uuid_ = uuid_;
	}

	@JSON
	@Override
	public long getSpAssetEntryId() {
		return _spAssetEntryId;
	}

	@Override
	public void setSpAssetEntryId(long spAssetEntryId) {
		_spAssetEntryId = spAssetEntryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getDlFolderId() {
		return _dlFolderId;
	}

	@Override
	public void setDlFolderId(long dlFolderId) {
		_dlFolderId = dlFolderId;
	}

	@JSON
	@Override
	public long getCoverFileEntryId() {
		return _coverFileEntryId;
	}

	@Override
	public void setCoverFileEntryId(long coverFileEntryId) {
		_coverFileEntryId = coverFileEntryId;
	}

	@JSON
	@Override
	public long getSpAssetTypeId() {
		return _spAssetTypeId;
	}

	@Override
	public void setSpAssetTypeId(long spAssetTypeId) {
		_columnBitmask |= SPASSETTYPEID_COLUMN_BITMASK;

		if (!_setOriginalSpAssetTypeId) {
			_setOriginalSpAssetTypeId = true;

			_originalSpAssetTypeId = _spAssetTypeId;
		}

		_spAssetTypeId = spAssetTypeId;
	}

	public long getOriginalSpAssetTypeId() {
		return _originalSpAssetTypeId;
	}

	@JSON
	@Override
	public String getSpAssetEntrySubType() {
		if (_spAssetEntrySubType == null) {
			return StringPool.BLANK;
		}
		else {
			return _spAssetEntrySubType;
		}
	}

	@Override
	public void setSpAssetEntrySubType(String spAssetEntrySubType) {
		_spAssetEntrySubType = spAssetEntrySubType;
	}

	@JSON
	@Override
	public long getCorporateProfileUserId() {
		return _corporateProfileUserId;
	}

	@Override
	public void setCorporateProfileUserId(long corporateProfileUserId) {
		_corporateProfileUserId = corporateProfileUserId;
	}

	@Override
	public String getCorporateProfileUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getCorporateProfileUserId(), "uuid",
			_corporateProfileUserUuid);
	}

	@Override
	public void setCorporateProfileUserUuid(String corporateProfileUserUuid) {
		_corporateProfileUserUuid = corporateProfileUserUuid;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return StringPool.BLANK;
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		_classNameId = classNameId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_title = title;
	}

	@JSON
	@Override
	public String getUrlTitle() {
		if (_urlTitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _urlTitle;
		}
	}

	@Override
	public void setUrlTitle(String urlTitle) {
		_columnBitmask |= URLTITLE_COLUMN_BITMASK;

		if (_originalUrlTitle == null) {
			_originalUrlTitle = _urlTitle;
		}

		_urlTitle = urlTitle;
	}

	public String getOriginalUrlTitle() {
		return GetterUtil.getString(_originalUrlTitle);
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@JSON
	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@JSON
	@Override
	public String getLink() {
		if (_link == null) {
			return StringPool.BLANK;
		}
		else {
			return _link;
		}
	}

	@Override
	public void setLink(String link) {
		_link = link;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public boolean getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return StringPool.BLANK;
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_type = type;
	}

	@JSON
	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return StringPool.BLANK;
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public boolean getAllowPingbacks() {
		return _allowPingbacks;
	}

	@Override
	public boolean isAllowPingbacks() {
		return _allowPingbacks;
	}

	@Override
	public void setAllowPingbacks(boolean allowPingbacks) {
		_allowPingbacks = allowPingbacks;
	}

	@JSON
	@Override
	public boolean getAllowTrackbacks() {
		return _allowTrackbacks;
	}

	@Override
	public boolean isAllowTrackbacks() {
		return _allowTrackbacks;
	}

	@Override
	public void setAllowTrackbacks(boolean allowTrackbacks) {
		_allowTrackbacks = allowTrackbacks;
	}

	@JSON
	@Override
	public String getTrackbacks() {
		if (_trackbacks == null) {
			return StringPool.BLANK;
		}
		else {
			return _trackbacks;
		}
	}

	@Override
	public void setTrackbacks(String trackbacks) {
		_trackbacks = trackbacks;
	}

	@JSON
	@Override
	public int getPermissionType() {
		return _permissionType;
	}

	@Override
	public void setPermissionType(int permissionType) {
		_permissionType = permissionType;
	}

	@JSON
	@Override
	public boolean getAgreedToTermsOfUse() {
		return _agreedToTermsOfUse;
	}

	@Override
	public boolean isAgreedToTermsOfUse() {
		return _agreedToTermsOfUse;
	}

	@Override
	public void setAgreedToTermsOfUse(boolean agreedToTermsOfUse) {
		_agreedToTermsOfUse = agreedToTermsOfUse;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPAssetEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPAssetEntry toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPAssetEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPAssetEntryImpl spAssetEntryImpl = new SPAssetEntryImpl();

		spAssetEntryImpl.setUuid_(getUuid_());
		spAssetEntryImpl.setSpAssetEntryId(getSpAssetEntryId());
		spAssetEntryImpl.setGroupId(getGroupId());
		spAssetEntryImpl.setCompanyId(getCompanyId());
		spAssetEntryImpl.setUserId(getUserId());
		spAssetEntryImpl.setUserName(getUserName());
		spAssetEntryImpl.setCreateDate(getCreateDate());
		spAssetEntryImpl.setModifiedDate(getModifiedDate());
		spAssetEntryImpl.setDlFolderId(getDlFolderId());
		spAssetEntryImpl.setCoverFileEntryId(getCoverFileEntryId());
		spAssetEntryImpl.setSpAssetTypeId(getSpAssetTypeId());
		spAssetEntryImpl.setSpAssetEntrySubType(getSpAssetEntrySubType());
		spAssetEntryImpl.setCorporateProfileUserId(getCorporateProfileUserId());
		spAssetEntryImpl.setClassNameId(getClassNameId());
		spAssetEntryImpl.setTitle(getTitle());
		spAssetEntryImpl.setUrlTitle(getUrlTitle());
		spAssetEntryImpl.setDescription(getDescription());
		spAssetEntryImpl.setContent(getContent());
		spAssetEntryImpl.setLink(getLink());
		spAssetEntryImpl.setStatus(getStatus());
		spAssetEntryImpl.setStatusByUserName(getStatusByUserName());
		spAssetEntryImpl.setType(getType());
		spAssetEntryImpl.setModifiedBy(getModifiedBy());
		spAssetEntryImpl.setAllowPingbacks(getAllowPingbacks());
		spAssetEntryImpl.setAllowTrackbacks(getAllowTrackbacks());
		spAssetEntryImpl.setTrackbacks(getTrackbacks());
		spAssetEntryImpl.setPermissionType(getPermissionType());
		spAssetEntryImpl.setAgreedToTermsOfUse(getAgreedToTermsOfUse());

		spAssetEntryImpl.resetOriginalValues();

		return spAssetEntryImpl;
	}

	@Override
	public int compareTo(SPAssetEntry spAssetEntry) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), spAssetEntry.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPAssetEntry)) {
			return false;
		}

		SPAssetEntry spAssetEntry = (SPAssetEntry)obj;

		long primaryKey = spAssetEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPAssetEntryModelImpl spAssetEntryModelImpl = this;

		spAssetEntryModelImpl._originalGroupId = spAssetEntryModelImpl._groupId;

		spAssetEntryModelImpl._setOriginalGroupId = false;

		spAssetEntryModelImpl._originalSpAssetTypeId = spAssetEntryModelImpl._spAssetTypeId;

		spAssetEntryModelImpl._setOriginalSpAssetTypeId = false;

		spAssetEntryModelImpl._originalUrlTitle = spAssetEntryModelImpl._urlTitle;

		spAssetEntryModelImpl._originalStatus = spAssetEntryModelImpl._status;

		spAssetEntryModelImpl._setOriginalStatus = false;

		spAssetEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPAssetEntry> toCacheModel() {
		SPAssetEntryCacheModel spAssetEntryCacheModel = new SPAssetEntryCacheModel();

		spAssetEntryCacheModel.uuid_ = getUuid_();

		String uuid_ = spAssetEntryCacheModel.uuid_;

		if ((uuid_ != null) && (uuid_.length() == 0)) {
			spAssetEntryCacheModel.uuid_ = null;
		}

		spAssetEntryCacheModel.spAssetEntryId = getSpAssetEntryId();

		spAssetEntryCacheModel.groupId = getGroupId();

		spAssetEntryCacheModel.companyId = getCompanyId();

		spAssetEntryCacheModel.userId = getUserId();

		spAssetEntryCacheModel.userName = getUserName();

		String userName = spAssetEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			spAssetEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			spAssetEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			spAssetEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spAssetEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spAssetEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		spAssetEntryCacheModel.dlFolderId = getDlFolderId();

		spAssetEntryCacheModel.coverFileEntryId = getCoverFileEntryId();

		spAssetEntryCacheModel.spAssetTypeId = getSpAssetTypeId();

		spAssetEntryCacheModel.spAssetEntrySubType = getSpAssetEntrySubType();

		String spAssetEntrySubType = spAssetEntryCacheModel.spAssetEntrySubType;

		if ((spAssetEntrySubType != null) &&
				(spAssetEntrySubType.length() == 0)) {
			spAssetEntryCacheModel.spAssetEntrySubType = null;
		}

		spAssetEntryCacheModel.corporateProfileUserId = getCorporateProfileUserId();

		spAssetEntryCacheModel.classNameId = getClassNameId();

		spAssetEntryCacheModel.title = getTitle();

		String title = spAssetEntryCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			spAssetEntryCacheModel.title = null;
		}

		spAssetEntryCacheModel.urlTitle = getUrlTitle();

		String urlTitle = spAssetEntryCacheModel.urlTitle;

		if ((urlTitle != null) && (urlTitle.length() == 0)) {
			spAssetEntryCacheModel.urlTitle = null;
		}

		spAssetEntryCacheModel.description = getDescription();

		String description = spAssetEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			spAssetEntryCacheModel.description = null;
		}

		spAssetEntryCacheModel.content = getContent();

		String content = spAssetEntryCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			spAssetEntryCacheModel.content = null;
		}

		spAssetEntryCacheModel.link = getLink();

		String link = spAssetEntryCacheModel.link;

		if ((link != null) && (link.length() == 0)) {
			spAssetEntryCacheModel.link = null;
		}

		spAssetEntryCacheModel.status = getStatus();

		spAssetEntryCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = spAssetEntryCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			spAssetEntryCacheModel.statusByUserName = null;
		}

		spAssetEntryCacheModel.type = getType();

		String type = spAssetEntryCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			spAssetEntryCacheModel.type = null;
		}

		spAssetEntryCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = spAssetEntryCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			spAssetEntryCacheModel.modifiedBy = null;
		}

		spAssetEntryCacheModel.allowPingbacks = getAllowPingbacks();

		spAssetEntryCacheModel.allowTrackbacks = getAllowTrackbacks();

		spAssetEntryCacheModel.trackbacks = getTrackbacks();

		String trackbacks = spAssetEntryCacheModel.trackbacks;

		if ((trackbacks != null) && (trackbacks.length() == 0)) {
			spAssetEntryCacheModel.trackbacks = null;
		}

		spAssetEntryCacheModel.permissionType = getPermissionType();

		spAssetEntryCacheModel.agreedToTermsOfUse = getAgreedToTermsOfUse();

		return spAssetEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(57);

		sb.append("{uuid_=");
		sb.append(getUuid_());
		sb.append(", spAssetEntryId=");
		sb.append(getSpAssetEntryId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dlFolderId=");
		sb.append(getDlFolderId());
		sb.append(", coverFileEntryId=");
		sb.append(getCoverFileEntryId());
		sb.append(", spAssetTypeId=");
		sb.append(getSpAssetTypeId());
		sb.append(", spAssetEntrySubType=");
		sb.append(getSpAssetEntrySubType());
		sb.append(", corporateProfileUserId=");
		sb.append(getCorporateProfileUserId());
		sb.append(", classNameId=");
		sb.append(getClassNameId());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", urlTitle=");
		sb.append(getUrlTitle());
		sb.append(", description=");
		sb.append(getDescription());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", link=");
		sb.append(getLink());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", type=");
		sb.append(getType());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", allowPingbacks=");
		sb.append(getAllowPingbacks());
		sb.append(", allowTrackbacks=");
		sb.append(getAllowTrackbacks());
		sb.append(", trackbacks=");
		sb.append(getTrackbacks());
		sb.append(", permissionType=");
		sb.append(getPermissionType());
		sb.append(", agreedToTermsOfUse=");
		sb.append(getAgreedToTermsOfUse());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(88);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.spasset.model.SPAssetEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid_</column-name><column-value><![CDATA[");
		sb.append(getUuid_());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spAssetEntryId</column-name><column-value><![CDATA[");
		sb.append(getSpAssetEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dlFolderId</column-name><column-value><![CDATA[");
		sb.append(getDlFolderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>coverFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getCoverFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spAssetTypeId</column-name><column-value><![CDATA[");
		sb.append(getSpAssetTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spAssetEntrySubType</column-name><column-value><![CDATA[");
		sb.append(getSpAssetEntrySubType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>corporateProfileUserId</column-name><column-value><![CDATA[");
		sb.append(getCorporateProfileUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classNameId</column-name><column-value><![CDATA[");
		sb.append(getClassNameId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>urlTitle</column-name><column-value><![CDATA[");
		sb.append(getUrlTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>link</column-name><column-value><![CDATA[");
		sb.append(getLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allowPingbacks</column-name><column-value><![CDATA[");
		sb.append(getAllowPingbacks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allowTrackbacks</column-name><column-value><![CDATA[");
		sb.append(getAllowTrackbacks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trackbacks</column-name><column-value><![CDATA[");
		sb.append(getTrackbacks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>permissionType</column-name><column-value><![CDATA[");
		sb.append(getPermissionType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>agreedToTermsOfUse</column-name><column-value><![CDATA[");
		sb.append(getAgreedToTermsOfUse());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPAssetEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPAssetEntry.class
		};
	private String _uuid_;
	private long _spAssetEntryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _dlFolderId;
	private long _coverFileEntryId;
	private long _spAssetTypeId;
	private long _originalSpAssetTypeId;
	private boolean _setOriginalSpAssetTypeId;
	private String _spAssetEntrySubType;
	private long _corporateProfileUserId;
	private String _corporateProfileUserUuid;
	private long _classNameId;
	private String _title;
	private String _urlTitle;
	private String _originalUrlTitle;
	private String _description;
	private String _content;
	private String _link;
	private boolean _status;
	private boolean _originalStatus;
	private boolean _setOriginalStatus;
	private String _statusByUserName;
	private String _type;
	private String _modifiedBy;
	private boolean _allowPingbacks;
	private boolean _allowTrackbacks;
	private String _trackbacks;
	private int _permissionType;
	private boolean _agreedToTermsOfUse;
	private long _columnBitmask;
	private SPAssetEntry _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.wtberks.configuration.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.wtberks.configuration.model.ConfigurationProperty;
import com.wtberks.configuration.service.ConfigurationPropertyLocalService;
import com.wtberks.configuration.service.persistence.ConfigurationPropertyPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the configuration property local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link com.wtberks.configuration.service.impl.ConfigurationPropertyLocalServiceImpl}.
 * </p>
 *
 * @author liferay
 * @see com.wtberks.configuration.service.impl.ConfigurationPropertyLocalServiceImpl
 * @see com.wtberks.configuration.service.ConfigurationPropertyLocalServiceUtil
 * @generated
 */
public abstract class ConfigurationPropertyLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements ConfigurationPropertyLocalService,
		IdentifiableBean {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link com.wtberks.configuration.service.ConfigurationPropertyLocalServiceUtil} to access the configuration property local service.
	 */

	/**
	 * Adds the configuration property to the database. Also notifies the appropriate model listeners.
	 *
	 * @param configurationProperty the configuration property
	 * @return the configuration property that was added
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ConfigurationProperty addConfigurationProperty(
		ConfigurationProperty configurationProperty) throws SystemException {
		configurationProperty.setNew(true);

		return configurationPropertyPersistence.update(configurationProperty);
	}

	/**
	 * Creates a new configuration property with the primary key. Does not add the configuration property to the database.
	 *
	 * @param configurationPropertyId the primary key for the new configuration property
	 * @return the new configuration property
	 */
	@Override
	public ConfigurationProperty createConfigurationProperty(
		long configurationPropertyId) {
		return configurationPropertyPersistence.create(configurationPropertyId);
	}

	/**
	 * Deletes the configuration property with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param configurationPropertyId the primary key of the configuration property
	 * @return the configuration property that was removed
	 * @throws PortalException if a configuration property with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ConfigurationProperty deleteConfigurationProperty(
		long configurationPropertyId) throws PortalException, SystemException {
		return configurationPropertyPersistence.remove(configurationPropertyId);
	}

	/**
	 * Deletes the configuration property from the database. Also notifies the appropriate model listeners.
	 *
	 * @param configurationProperty the configuration property
	 * @return the configuration property that was removed
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public ConfigurationProperty deleteConfigurationProperty(
		ConfigurationProperty configurationProperty) throws SystemException {
		return configurationPropertyPersistence.remove(configurationProperty);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(ConfigurationProperty.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery)
		throws SystemException {
		return configurationPropertyPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.wtberks.configuration.model.impl.ConfigurationPropertyModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
		throws SystemException {
		return configurationPropertyPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.wtberks.configuration.model.impl.ConfigurationPropertyModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	@SuppressWarnings("rawtypes")
	public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
		OrderByComparator orderByComparator) throws SystemException {
		return configurationPropertyPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery)
		throws SystemException {
		return configurationPropertyPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows that match the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows that match the dynamic query
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) throws SystemException {
		return configurationPropertyPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public ConfigurationProperty fetchConfigurationProperty(
		long configurationPropertyId) throws SystemException {
		return configurationPropertyPersistence.fetchByPrimaryKey(configurationPropertyId);
	}

	/**
	 * Returns the configuration property with the matching UUID and company.
	 *
	 * @param uuid the configuration property's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching configuration property, or <code>null</code> if a matching configuration property could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ConfigurationProperty fetchConfigurationPropertyByUuidAndCompanyId(
		String uuid, long companyId) throws SystemException {
		return configurationPropertyPersistence.fetchByUuid_C_First(uuid,
			companyId, null);
	}

	/**
	 * Returns the configuration property matching the UUID and group.
	 *
	 * @param uuid the configuration property's UUID
	 * @param groupId the primary key of the group
	 * @return the matching configuration property, or <code>null</code> if a matching configuration property could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ConfigurationProperty fetchConfigurationPropertyByUuidAndGroupId(
		String uuid, long groupId) throws SystemException {
		return configurationPropertyPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the configuration property with the primary key.
	 *
	 * @param configurationPropertyId the primary key of the configuration property
	 * @return the configuration property
	 * @throws PortalException if a configuration property with the primary key could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ConfigurationProperty getConfigurationProperty(
		long configurationPropertyId) throws PortalException, SystemException {
		return configurationPropertyPersistence.findByPrimaryKey(configurationPropertyId);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException, SystemException {
		return configurationPropertyPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns the configuration property with the matching UUID and company.
	 *
	 * @param uuid the configuration property's UUID
	 * @param  companyId the primary key of the company
	 * @return the matching configuration property
	 * @throws PortalException if a matching configuration property could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ConfigurationProperty getConfigurationPropertyByUuidAndCompanyId(
		String uuid, long companyId) throws PortalException, SystemException {
		return configurationPropertyPersistence.findByUuid_C_First(uuid,
			companyId, null);
	}

	/**
	 * Returns the configuration property matching the UUID and group.
	 *
	 * @param uuid the configuration property's UUID
	 * @param groupId the primary key of the group
	 * @return the matching configuration property
	 * @throws PortalException if a matching configuration property could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public ConfigurationProperty getConfigurationPropertyByUuidAndGroupId(
		String uuid, long groupId) throws PortalException, SystemException {
		return configurationPropertyPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the configuration properties.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link com.wtberks.configuration.model.impl.ConfigurationPropertyModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of configuration properties
	 * @param end the upper bound of the range of configuration properties (not inclusive)
	 * @return the range of configuration properties
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<ConfigurationProperty> getConfigurationProperties(int start,
		int end) throws SystemException {
		return configurationPropertyPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of configuration properties.
	 *
	 * @return the number of configuration properties
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public int getConfigurationPropertiesCount() throws SystemException {
		return configurationPropertyPersistence.countAll();
	}

	/**
	 * Updates the configuration property in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param configurationProperty the configuration property
	 * @return the configuration property that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public ConfigurationProperty updateConfigurationProperty(
		ConfigurationProperty configurationProperty) throws SystemException {
		return configurationPropertyPersistence.update(configurationProperty);
	}

	/**
	 * Returns the configuration property local service.
	 *
	 * @return the configuration property local service
	 */
	public com.wtberks.configuration.service.ConfigurationPropertyLocalService getConfigurationPropertyLocalService() {
		return configurationPropertyLocalService;
	}

	/**
	 * Sets the configuration property local service.
	 *
	 * @param configurationPropertyLocalService the configuration property local service
	 */
	public void setConfigurationPropertyLocalService(
		com.wtberks.configuration.service.ConfigurationPropertyLocalService configurationPropertyLocalService) {
		this.configurationPropertyLocalService = configurationPropertyLocalService;
	}

	/**
	 * Returns the configuration property persistence.
	 *
	 * @return the configuration property persistence
	 */
	public ConfigurationPropertyPersistence getConfigurationPropertyPersistence() {
		return configurationPropertyPersistence;
	}

	/**
	 * Sets the configuration property persistence.
	 *
	 * @param configurationPropertyPersistence the configuration property persistence
	 */
	public void setConfigurationPropertyPersistence(
		ConfigurationPropertyPersistence configurationPropertyPersistence) {
		this.configurationPropertyPersistence = configurationPropertyPersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user remote service.
	 *
	 * @return the user remote service
	 */
	public com.liferay.portal.service.UserService getUserService() {
		return userService;
	}

	/**
	 * Sets the user remote service.
	 *
	 * @param userService the user remote service
	 */
	public void setUserService(
		com.liferay.portal.service.UserService userService) {
		this.userService = userService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		Class<?> clazz = getClass();

		_classLoader = clazz.getClassLoader();

		PersistedModelLocalServiceRegistryUtil.register("com.wtberks.configuration.model.ConfigurationProperty",
			configurationPropertyLocalService);
	}

	public void destroy() {
		PersistedModelLocalServiceRegistryUtil.unregister(
			"com.wtberks.configuration.model.ConfigurationProperty");
	}

	/**
	 * Returns the Spring bean ID for this bean.
	 *
	 * @return the Spring bean ID for this bean
	 */
	@Override
	public String getBeanIdentifier() {
		return _beanIdentifier;
	}

	/**
	 * Sets the Spring bean ID for this bean.
	 *
	 * @param beanIdentifier the Spring bean ID for this bean
	 */
	@Override
	public void setBeanIdentifier(String beanIdentifier) {
		_beanIdentifier = beanIdentifier;
	}

	@Override
	public Object invokeMethod(String name, String[] parameterTypes,
		Object[] arguments) throws Throwable {
		Thread currentThread = Thread.currentThread();

		ClassLoader contextClassLoader = currentThread.getContextClassLoader();

		if (contextClassLoader != _classLoader) {
			currentThread.setContextClassLoader(_classLoader);
		}

		try {
			return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
		}
		finally {
			if (contextClassLoader != _classLoader) {
				currentThread.setContextClassLoader(contextClassLoader);
			}
		}
	}

	protected Class<?> getModelClass() {
		return ConfigurationProperty.class;
	}

	protected String getModelClassName() {
		return ConfigurationProperty.class.getName();
	}

	/**
	 * Performs an SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) throws SystemException {
		try {
			DataSource dataSource = configurationPropertyPersistence.getDataSource();

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql, new int[0]);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = com.wtberks.configuration.service.ConfigurationPropertyLocalService.class)
	protected com.wtberks.configuration.service.ConfigurationPropertyLocalService configurationPropertyLocalService;
	@BeanReference(type = ConfigurationPropertyPersistence.class)
	protected ConfigurationPropertyPersistence configurationPropertyPersistence;
	@BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
	protected com.liferay.counter.service.CounterLocalService counterLocalService;
	@BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
	protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
	@BeanReference(type = com.liferay.portal.service.UserLocalService.class)
	protected com.liferay.portal.service.UserLocalService userLocalService;
	@BeanReference(type = com.liferay.portal.service.UserService.class)
	protected com.liferay.portal.service.UserService userService;
	@BeanReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	private String _beanIdentifier;
	private ClassLoader _classLoader;
	private ConfigurationPropertyLocalServiceClpInvoker _clpInvoker = new ConfigurationPropertyLocalServiceClpInvoker();
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spsocialprofile.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spsocialprofile.model.UserAvailabilityCalendar;
import com.sambaash.platform.srv.spsocialprofile.model.UserAvailabilityCalendarModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserAvailabilityCalendar service. Represents a row in the &quot;SPUserAvailabilityCalendar&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spsocialprofile.model.UserAvailabilityCalendarModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserAvailabilityCalendarImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see UserAvailabilityCalendarImpl
 * @see com.sambaash.platform.srv.spsocialprofile.model.UserAvailabilityCalendar
 * @see com.sambaash.platform.srv.spsocialprofile.model.UserAvailabilityCalendarModel
 * @generated
 */
public class UserAvailabilityCalendarModelImpl extends BaseModelImpl<UserAvailabilityCalendar>
	implements UserAvailabilityCalendarModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user availability calendar model instance should use the {@link com.sambaash.platform.srv.spsocialprofile.model.UserAvailabilityCalendar} interface instead.
	 */
	public static final String TABLE_NAME = "SPUserAvailabilityCalendar";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spUserAvailabilityCalendarId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "availableFor", Types.VARCHAR },
			{ "startDate", Types.TIMESTAMP },
			{ "endDate", Types.TIMESTAMP },
			{ "active_", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table SPUserAvailabilityCalendar (spUserAvailabilityCalendarId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),createDate DATETIME null,modifiedDate DATETIME null,userId BIGINT(20),availableFor VARCHAR(75) null,startDate DATETIME null,endDate DATETIME null,active_ BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table SPUserAvailabilityCalendar";
	public static final String ORDER_BY_JPQL = " ORDER BY userAvailabilityCalendar.userAvailabilityCalendarId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPUserAvailabilityCalendar.spUserAvailabilityCalendarId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spsocialprofile.model.UserAvailabilityCalendar"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spsocialprofile.model.UserAvailabilityCalendar"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spsocialprofile.model.UserAvailabilityCalendar"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long USERID_COLUMN_BITMASK = 2L;
	public static long USERAVAILABILITYCALENDARID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spsocialprofile.model.UserAvailabilityCalendar"));

	public UserAvailabilityCalendarModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userAvailabilityCalendarId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserAvailabilityCalendarId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userAvailabilityCalendarId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserAvailabilityCalendar.class;
	}

	@Override
	public String getModelClassName() {
		return UserAvailabilityCalendar.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userAvailabilityCalendarId",
			getUserAvailabilityCalendarId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("userId", getUserId());
		attributes.put("availableFor", getAvailableFor());
		attributes.put("startDate", getStartDate());
		attributes.put("endDate", getEndDate());
		attributes.put("active", getActive());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userAvailabilityCalendarId = (Long)attributes.get(
				"userAvailabilityCalendarId");

		if (userAvailabilityCalendarId != null) {
			setUserAvailabilityCalendarId(userAvailabilityCalendarId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String availableFor = (String)attributes.get("availableFor");

		if (availableFor != null) {
			setAvailableFor(availableFor);
		}

		Date startDate = (Date)attributes.get("startDate");

		if (startDate != null) {
			setStartDate(startDate);
		}

		Date endDate = (Date)attributes.get("endDate");

		if (endDate != null) {
			setEndDate(endDate);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}
	}

	@Override
	public long getUserAvailabilityCalendarId() {
		return _userAvailabilityCalendarId;
	}

	@Override
	public void setUserAvailabilityCalendarId(long userAvailabilityCalendarId) {
		_userAvailabilityCalendarId = userAvailabilityCalendarId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getAvailableFor() {
		if (_availableFor == null) {
			return StringPool.BLANK;
		}
		else {
			return _availableFor;
		}
	}

	@Override
	public void setAvailableFor(String availableFor) {
		_availableFor = availableFor;
	}

	@Override
	public Date getStartDate() {
		return _startDate;
	}

	@Override
	public void setStartDate(Date startDate) {
		_startDate = startDate;
	}

	@Override
	public Date getEndDate() {
		return _endDate;
	}

	@Override
	public void setEndDate(Date endDate) {
		_endDate = endDate;
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			UserAvailabilityCalendar.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserAvailabilityCalendar toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserAvailabilityCalendar)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserAvailabilityCalendarImpl userAvailabilityCalendarImpl = new UserAvailabilityCalendarImpl();

		userAvailabilityCalendarImpl.setUserAvailabilityCalendarId(getUserAvailabilityCalendarId());
		userAvailabilityCalendarImpl.setGroupId(getGroupId());
		userAvailabilityCalendarImpl.setCompanyId(getCompanyId());
		userAvailabilityCalendarImpl.setCreateDate(getCreateDate());
		userAvailabilityCalendarImpl.setModifiedDate(getModifiedDate());
		userAvailabilityCalendarImpl.setUserId(getUserId());
		userAvailabilityCalendarImpl.setAvailableFor(getAvailableFor());
		userAvailabilityCalendarImpl.setStartDate(getStartDate());
		userAvailabilityCalendarImpl.setEndDate(getEndDate());
		userAvailabilityCalendarImpl.setActive(getActive());

		userAvailabilityCalendarImpl.resetOriginalValues();

		return userAvailabilityCalendarImpl;
	}

	@Override
	public int compareTo(UserAvailabilityCalendar userAvailabilityCalendar) {
		long primaryKey = userAvailabilityCalendar.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserAvailabilityCalendar)) {
			return false;
		}

		UserAvailabilityCalendar userAvailabilityCalendar = (UserAvailabilityCalendar)obj;

		long primaryKey = userAvailabilityCalendar.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		UserAvailabilityCalendarModelImpl userAvailabilityCalendarModelImpl = this;

		userAvailabilityCalendarModelImpl._originalCompanyId = userAvailabilityCalendarModelImpl._companyId;

		userAvailabilityCalendarModelImpl._setOriginalCompanyId = false;

		userAvailabilityCalendarModelImpl._originalUserId = userAvailabilityCalendarModelImpl._userId;

		userAvailabilityCalendarModelImpl._setOriginalUserId = false;

		userAvailabilityCalendarModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserAvailabilityCalendar> toCacheModel() {
		UserAvailabilityCalendarCacheModel userAvailabilityCalendarCacheModel = new UserAvailabilityCalendarCacheModel();

		userAvailabilityCalendarCacheModel.userAvailabilityCalendarId = getUserAvailabilityCalendarId();

		userAvailabilityCalendarCacheModel.groupId = getGroupId();

		userAvailabilityCalendarCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			userAvailabilityCalendarCacheModel.createDate = createDate.getTime();
		}
		else {
			userAvailabilityCalendarCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			userAvailabilityCalendarCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			userAvailabilityCalendarCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		userAvailabilityCalendarCacheModel.userId = getUserId();

		userAvailabilityCalendarCacheModel.availableFor = getAvailableFor();

		String availableFor = userAvailabilityCalendarCacheModel.availableFor;

		if ((availableFor != null) && (availableFor.length() == 0)) {
			userAvailabilityCalendarCacheModel.availableFor = null;
		}

		Date startDate = getStartDate();

		if (startDate != null) {
			userAvailabilityCalendarCacheModel.startDate = startDate.getTime();
		}
		else {
			userAvailabilityCalendarCacheModel.startDate = Long.MIN_VALUE;
		}

		Date endDate = getEndDate();

		if (endDate != null) {
			userAvailabilityCalendarCacheModel.endDate = endDate.getTime();
		}
		else {
			userAvailabilityCalendarCacheModel.endDate = Long.MIN_VALUE;
		}

		userAvailabilityCalendarCacheModel.active = getActive();

		return userAvailabilityCalendarCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{userAvailabilityCalendarId=");
		sb.append(getUserAvailabilityCalendarId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", availableFor=");
		sb.append(getAvailableFor());
		sb.append(", startDate=");
		sb.append(getStartDate());
		sb.append(", endDate=");
		sb.append(getEndDate());
		sb.append(", active=");
		sb.append(getActive());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append(
			"com.sambaash.platform.srv.spsocialprofile.model.UserAvailabilityCalendar");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userAvailabilityCalendarId</column-name><column-value><![CDATA[");
		sb.append(getUserAvailabilityCalendarId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>availableFor</column-name><column-value><![CDATA[");
		sb.append(getAvailableFor());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDate</column-name><column-value><![CDATA[");
		sb.append(getStartDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endDate</column-name><column-value><![CDATA[");
		sb.append(getEndDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = UserAvailabilityCalendar.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			UserAvailabilityCalendar.class
		};
	private long _userAvailabilityCalendarId;
	private long _groupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _availableFor;
	private Date _startDate;
	private Date _endDate;
	private boolean _active;
	private long _columnBitmask;
	private UserAvailabilityCalendar _escapedModel;
}
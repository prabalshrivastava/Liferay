/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.legalandcontract.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.legalandcontract.model.RDL;
import com.sambaash.platform.srv.legalandcontract.model.RDLModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the RDL service. Represents a row in the &quot;SPLitigationRDL&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.legalandcontract.model.RDLModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RDLImpl}.
 * </p>
 *
 * @author nareshchebolu
 * @see RDLImpl
 * @see com.sambaash.platform.srv.legalandcontract.model.RDL
 * @see com.sambaash.platform.srv.legalandcontract.model.RDLModel
 * @generated
 */
public class RDLModelImpl extends BaseModelImpl<RDL> implements RDLModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a r d l model instance should use the {@link com.sambaash.platform.srv.legalandcontract.model.RDL} interface instead.
	 */
	public static final String TABLE_NAME = "SPLitigationRDL";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spRdlId", Types.BIGINT },
			{ "spLitigationId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "responseDeadline", Types.TIMESTAMP },
			{ "claimsRemarks", Types.CLOB },
			{ "alertBefore", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPLitigationRDL (uuid_ VARCHAR(75) null,spRdlId BIGINT(20) not null primary key,spLitigationId BIGINT(20),groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,responseDeadline DATETIME null,claimsRemarks LONGTEXT null,alertBefore BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPLitigationRDL";
	public static final String ORDER_BY_JPQL = " ORDER BY rdl.responseDeadline ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPLitigationRDL.responseDeadline ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.legalandcontract.model.RDL"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.legalandcontract.model.RDL"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.legalandcontract.model.RDL"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long SPLITIGATIONID_COLUMN_BITMASK = 4L;
	public static long SPRDLID_COLUMN_BITMASK = 8L;
	public static long UUID_COLUMN_BITMASK = 16L;
	public static long RESPONSEDEADLINE_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.legalandcontract.model.RDL"));

	public RDLModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spRdlId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpRdlId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spRdlId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return RDL.class;
	}

	@Override
	public String getModelClassName() {
		return RDL.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("spRdlId", getSpRdlId());
		attributes.put("spLitigationId", getSpLitigationId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("responseDeadline", getResponseDeadline());
		attributes.put("claimsRemarks", getClaimsRemarks());
		attributes.put("alertBefore", getAlertBefore());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long spRdlId = (Long)attributes.get("spRdlId");

		if (spRdlId != null) {
			setSpRdlId(spRdlId);
		}

		Long spLitigationId = (Long)attributes.get("spLitigationId");

		if (spLitigationId != null) {
			setSpLitigationId(spLitigationId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Date responseDeadline = (Date)attributes.get("responseDeadline");

		if (responseDeadline != null) {
			setResponseDeadline(responseDeadline);
		}

		String claimsRemarks = (String)attributes.get("claimsRemarks");

		if (claimsRemarks != null) {
			setClaimsRemarks(claimsRemarks);
		}

		Long alertBefore = (Long)attributes.get("alertBefore");

		if (alertBefore != null) {
			setAlertBefore(alertBefore);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getSpRdlId() {
		return _spRdlId;
	}

	@Override
	public void setSpRdlId(long spRdlId) {
		_columnBitmask |= SPRDLID_COLUMN_BITMASK;

		if (!_setOriginalSpRdlId) {
			_setOriginalSpRdlId = true;

			_originalSpRdlId = _spRdlId;
		}

		_spRdlId = spRdlId;
	}

	public long getOriginalSpRdlId() {
		return _originalSpRdlId;
	}

	@Override
	public long getSpLitigationId() {
		return _spLitigationId;
	}

	@Override
	public void setSpLitigationId(long spLitigationId) {
		_columnBitmask |= SPLITIGATIONID_COLUMN_BITMASK;

		if (!_setOriginalSpLitigationId) {
			_setOriginalSpLitigationId = true;

			_originalSpLitigationId = _spLitigationId;
		}

		_spLitigationId = spLitigationId;
	}

	public long getOriginalSpLitigationId() {
		return _originalSpLitigationId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public Date getResponseDeadline() {
		return _responseDeadline;
	}

	@Override
	public void setResponseDeadline(Date responseDeadline) {
		_columnBitmask = -1L;

		_responseDeadline = responseDeadline;
	}

	@Override
	public String getClaimsRemarks() {
		if (_claimsRemarks == null) {
			return StringPool.BLANK;
		}
		else {
			return _claimsRemarks;
		}
	}

	@Override
	public void setClaimsRemarks(String claimsRemarks) {
		_claimsRemarks = claimsRemarks;
	}

	@Override
	public long getAlertBefore() {
		return _alertBefore;
	}

	@Override
	public void setAlertBefore(long alertBefore) {
		_alertBefore = alertBefore;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				RDL.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			RDL.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public RDL toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (RDL)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		RDLImpl rdlImpl = new RDLImpl();

		rdlImpl.setUuid(getUuid());
		rdlImpl.setSpRdlId(getSpRdlId());
		rdlImpl.setSpLitigationId(getSpLitigationId());
		rdlImpl.setGroupId(getGroupId());
		rdlImpl.setCompanyId(getCompanyId());
		rdlImpl.setUserId(getUserId());
		rdlImpl.setUserName(getUserName());
		rdlImpl.setCreateDate(getCreateDate());
		rdlImpl.setModifiedDate(getModifiedDate());
		rdlImpl.setResponseDeadline(getResponseDeadline());
		rdlImpl.setClaimsRemarks(getClaimsRemarks());
		rdlImpl.setAlertBefore(getAlertBefore());

		rdlImpl.resetOriginalValues();

		return rdlImpl;
	}

	@Override
	public int compareTo(RDL rdl) {
		int value = 0;

		value = DateUtil.compareTo(getResponseDeadline(),
				rdl.getResponseDeadline());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof RDL)) {
			return false;
		}

		RDL rdl = (RDL)obj;

		long primaryKey = rdl.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RDLModelImpl rdlModelImpl = this;

		rdlModelImpl._originalUuid = rdlModelImpl._uuid;

		rdlModelImpl._originalSpRdlId = rdlModelImpl._spRdlId;

		rdlModelImpl._setOriginalSpRdlId = false;

		rdlModelImpl._originalSpLitigationId = rdlModelImpl._spLitigationId;

		rdlModelImpl._setOriginalSpLitigationId = false;

		rdlModelImpl._originalGroupId = rdlModelImpl._groupId;

		rdlModelImpl._setOriginalGroupId = false;

		rdlModelImpl._originalCompanyId = rdlModelImpl._companyId;

		rdlModelImpl._setOriginalCompanyId = false;

		rdlModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<RDL> toCacheModel() {
		RDLCacheModel rdlCacheModel = new RDLCacheModel();

		rdlCacheModel.uuid = getUuid();

		String uuid = rdlCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			rdlCacheModel.uuid = null;
		}

		rdlCacheModel.spRdlId = getSpRdlId();

		rdlCacheModel.spLitigationId = getSpLitigationId();

		rdlCacheModel.groupId = getGroupId();

		rdlCacheModel.companyId = getCompanyId();

		rdlCacheModel.userId = getUserId();

		rdlCacheModel.userName = getUserName();

		String userName = rdlCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			rdlCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			rdlCacheModel.createDate = createDate.getTime();
		}
		else {
			rdlCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			rdlCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			rdlCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		Date responseDeadline = getResponseDeadline();

		if (responseDeadline != null) {
			rdlCacheModel.responseDeadline = responseDeadline.getTime();
		}
		else {
			rdlCacheModel.responseDeadline = Long.MIN_VALUE;
		}

		rdlCacheModel.claimsRemarks = getClaimsRemarks();

		String claimsRemarks = rdlCacheModel.claimsRemarks;

		if ((claimsRemarks != null) && (claimsRemarks.length() == 0)) {
			rdlCacheModel.claimsRemarks = null;
		}

		rdlCacheModel.alertBefore = getAlertBefore();

		return rdlCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", spRdlId=");
		sb.append(getSpRdlId());
		sb.append(", spLitigationId=");
		sb.append(getSpLitigationId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", responseDeadline=");
		sb.append(getResponseDeadline());
		sb.append(", claimsRemarks=");
		sb.append(getClaimsRemarks());
		sb.append(", alertBefore=");
		sb.append(getAlertBefore());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.legalandcontract.model.RDL");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spRdlId</column-name><column-value><![CDATA[");
		sb.append(getSpRdlId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spLitigationId</column-name><column-value><![CDATA[");
		sb.append(getSpLitigationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>responseDeadline</column-name><column-value><![CDATA[");
		sb.append(getResponseDeadline());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>claimsRemarks</column-name><column-value><![CDATA[");
		sb.append(getClaimsRemarks());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>alertBefore</column-name><column-value><![CDATA[");
		sb.append(getAlertBefore());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = RDL.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { RDL.class };
	private String _uuid;
	private String _originalUuid;
	private long _spRdlId;
	private long _originalSpRdlId;
	private boolean _setOriginalSpRdlId;
	private long _spLitigationId;
	private long _originalSpLitigationId;
	private boolean _setOriginalSpLitigationId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _responseDeadline;
	private String _claimsRemarks;
	private long _alertBefore;
	private long _columnBitmask;
	private RDL _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spservices.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spservices.model.SPLdapMapping;
import com.sambaash.platform.srv.spservices.model.SPLdapMappingModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPLdapMapping service. Represents a row in the &quot;SPLdapMapping&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spservices.model.SPLdapMappingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPLdapMappingImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see SPLdapMappingImpl
 * @see com.sambaash.platform.srv.spservices.model.SPLdapMapping
 * @see com.sambaash.platform.srv.spservices.model.SPLdapMappingModel
 * @generated
 */
public class SPLdapMappingModelImpl extends BaseModelImpl<SPLdapMapping>
	implements SPLdapMappingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p ldap mapping model instance should use the {@link com.sambaash.platform.srv.spservices.model.SPLdapMapping} interface instead.
	 */
	public static final String TABLE_NAME = "SPLdapMapping";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spLdapMappingId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "countryId", Types.BIGINT },
			{ "departmentId", Types.BIGINT },
			{ "countryDepartmentId", Types.BIGINT },
			{ "ldapCountry", Types.VARCHAR },
			{ "ldapDepartment", Types.VARCHAR },
			{ "ldapCompany", Types.VARCHAR },
			{ "defaultRoleId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPLdapMapping (spLdapMappingId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,countryId BIGINT(20),departmentId BIGINT(20),countryDepartmentId BIGINT(20),ldapCountry VARCHAR(75) null,ldapDepartment VARCHAR(75) null,ldapCompany VARCHAR(75) null,defaultRoleId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPLdapMapping";
	public static final String ORDER_BY_JPQL = " ORDER BY spLdapMapping.spLdapMappingId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPLdapMapping.spLdapMappingId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spservices.model.SPLdapMapping"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spservices.model.SPLdapMapping"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spservices.model.SPLdapMapping"),
			true);
	public static long LDAPCOMPANY_COLUMN_BITMASK = 1L;
	public static long LDAPCOUNTRY_COLUMN_BITMASK = 2L;
	public static long LDAPDEPARTMENT_COLUMN_BITMASK = 4L;
	public static long SPLDAPMAPPINGID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spservices.model.SPLdapMapping"));

	public SPLdapMappingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spLdapMappingId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpLdapMappingId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spLdapMappingId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPLdapMapping.class;
	}

	@Override
	public String getModelClassName() {
		return SPLdapMapping.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spLdapMappingId", getSpLdapMappingId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("countryId", getCountryId());
		attributes.put("departmentId", getDepartmentId());
		attributes.put("countryDepartmentId", getCountryDepartmentId());
		attributes.put("ldapCountry", getLdapCountry());
		attributes.put("ldapDepartment", getLdapDepartment());
		attributes.put("ldapCompany", getLdapCompany());
		attributes.put("defaultRoleId", getDefaultRoleId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spLdapMappingId = (Long)attributes.get("spLdapMappingId");

		if (spLdapMappingId != null) {
			setSpLdapMappingId(spLdapMappingId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long countryId = (Long)attributes.get("countryId");

		if (countryId != null) {
			setCountryId(countryId);
		}

		Long departmentId = (Long)attributes.get("departmentId");

		if (departmentId != null) {
			setDepartmentId(departmentId);
		}

		Long countryDepartmentId = (Long)attributes.get("countryDepartmentId");

		if (countryDepartmentId != null) {
			setCountryDepartmentId(countryDepartmentId);
		}

		String ldapCountry = (String)attributes.get("ldapCountry");

		if (ldapCountry != null) {
			setLdapCountry(ldapCountry);
		}

		String ldapDepartment = (String)attributes.get("ldapDepartment");

		if (ldapDepartment != null) {
			setLdapDepartment(ldapDepartment);
		}

		String ldapCompany = (String)attributes.get("ldapCompany");

		if (ldapCompany != null) {
			setLdapCompany(ldapCompany);
		}

		Long defaultRoleId = (Long)attributes.get("defaultRoleId");

		if (defaultRoleId != null) {
			setDefaultRoleId(defaultRoleId);
		}
	}

	@Override
	public long getSpLdapMappingId() {
		return _spLdapMappingId;
	}

	@Override
	public void setSpLdapMappingId(long spLdapMappingId) {
		_columnBitmask = -1L;

		_spLdapMappingId = spLdapMappingId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCountryId() {
		return _countryId;
	}

	@Override
	public void setCountryId(long countryId) {
		_countryId = countryId;
	}

	@Override
	public long getDepartmentId() {
		return _departmentId;
	}

	@Override
	public void setDepartmentId(long departmentId) {
		_departmentId = departmentId;
	}

	@Override
	public long getCountryDepartmentId() {
		return _countryDepartmentId;
	}

	@Override
	public void setCountryDepartmentId(long countryDepartmentId) {
		_countryDepartmentId = countryDepartmentId;
	}

	@Override
	public String getLdapCountry() {
		if (_ldapCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _ldapCountry;
		}
	}

	@Override
	public void setLdapCountry(String ldapCountry) {
		_columnBitmask |= LDAPCOUNTRY_COLUMN_BITMASK;

		if (_originalLdapCountry == null) {
			_originalLdapCountry = _ldapCountry;
		}

		_ldapCountry = ldapCountry;
	}

	public String getOriginalLdapCountry() {
		return GetterUtil.getString(_originalLdapCountry);
	}

	@Override
	public String getLdapDepartment() {
		if (_ldapDepartment == null) {
			return StringPool.BLANK;
		}
		else {
			return _ldapDepartment;
		}
	}

	@Override
	public void setLdapDepartment(String ldapDepartment) {
		_columnBitmask |= LDAPDEPARTMENT_COLUMN_BITMASK;

		if (_originalLdapDepartment == null) {
			_originalLdapDepartment = _ldapDepartment;
		}

		_ldapDepartment = ldapDepartment;
	}

	public String getOriginalLdapDepartment() {
		return GetterUtil.getString(_originalLdapDepartment);
	}

	@Override
	public String getLdapCompany() {
		if (_ldapCompany == null) {
			return StringPool.BLANK;
		}
		else {
			return _ldapCompany;
		}
	}

	@Override
	public void setLdapCompany(String ldapCompany) {
		_columnBitmask |= LDAPCOMPANY_COLUMN_BITMASK;

		if (_originalLdapCompany == null) {
			_originalLdapCompany = _ldapCompany;
		}

		_ldapCompany = ldapCompany;
	}

	public String getOriginalLdapCompany() {
		return GetterUtil.getString(_originalLdapCompany);
	}

	@Override
	public long getDefaultRoleId() {
		return _defaultRoleId;
	}

	@Override
	public void setDefaultRoleId(long defaultRoleId) {
		_defaultRoleId = defaultRoleId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPLdapMapping.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPLdapMapping toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPLdapMapping)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPLdapMappingImpl spLdapMappingImpl = new SPLdapMappingImpl();

		spLdapMappingImpl.setSpLdapMappingId(getSpLdapMappingId());
		spLdapMappingImpl.setGroupId(getGroupId());
		spLdapMappingImpl.setCompanyId(getCompanyId());
		spLdapMappingImpl.setUserId(getUserId());
		spLdapMappingImpl.setUserName(getUserName());
		spLdapMappingImpl.setCreateDate(getCreateDate());
		spLdapMappingImpl.setModifiedDate(getModifiedDate());
		spLdapMappingImpl.setCountryId(getCountryId());
		spLdapMappingImpl.setDepartmentId(getDepartmentId());
		spLdapMappingImpl.setCountryDepartmentId(getCountryDepartmentId());
		spLdapMappingImpl.setLdapCountry(getLdapCountry());
		spLdapMappingImpl.setLdapDepartment(getLdapDepartment());
		spLdapMappingImpl.setLdapCompany(getLdapCompany());
		spLdapMappingImpl.setDefaultRoleId(getDefaultRoleId());

		spLdapMappingImpl.resetOriginalValues();

		return spLdapMappingImpl;
	}

	@Override
	public int compareTo(SPLdapMapping spLdapMapping) {
		int value = 0;

		if (getSpLdapMappingId() < spLdapMapping.getSpLdapMappingId()) {
			value = -1;
		}
		else if (getSpLdapMappingId() > spLdapMapping.getSpLdapMappingId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPLdapMapping)) {
			return false;
		}

		SPLdapMapping spLdapMapping = (SPLdapMapping)obj;

		long primaryKey = spLdapMapping.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPLdapMappingModelImpl spLdapMappingModelImpl = this;

		spLdapMappingModelImpl._originalLdapCountry = spLdapMappingModelImpl._ldapCountry;

		spLdapMappingModelImpl._originalLdapDepartment = spLdapMappingModelImpl._ldapDepartment;

		spLdapMappingModelImpl._originalLdapCompany = spLdapMappingModelImpl._ldapCompany;

		spLdapMappingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPLdapMapping> toCacheModel() {
		SPLdapMappingCacheModel spLdapMappingCacheModel = new SPLdapMappingCacheModel();

		spLdapMappingCacheModel.spLdapMappingId = getSpLdapMappingId();

		spLdapMappingCacheModel.groupId = getGroupId();

		spLdapMappingCacheModel.companyId = getCompanyId();

		spLdapMappingCacheModel.userId = getUserId();

		spLdapMappingCacheModel.userName = getUserName();

		String userName = spLdapMappingCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			spLdapMappingCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			spLdapMappingCacheModel.createDate = createDate.getTime();
		}
		else {
			spLdapMappingCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spLdapMappingCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spLdapMappingCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		spLdapMappingCacheModel.countryId = getCountryId();

		spLdapMappingCacheModel.departmentId = getDepartmentId();

		spLdapMappingCacheModel.countryDepartmentId = getCountryDepartmentId();

		spLdapMappingCacheModel.ldapCountry = getLdapCountry();

		String ldapCountry = spLdapMappingCacheModel.ldapCountry;

		if ((ldapCountry != null) && (ldapCountry.length() == 0)) {
			spLdapMappingCacheModel.ldapCountry = null;
		}

		spLdapMappingCacheModel.ldapDepartment = getLdapDepartment();

		String ldapDepartment = spLdapMappingCacheModel.ldapDepartment;

		if ((ldapDepartment != null) && (ldapDepartment.length() == 0)) {
			spLdapMappingCacheModel.ldapDepartment = null;
		}

		spLdapMappingCacheModel.ldapCompany = getLdapCompany();

		String ldapCompany = spLdapMappingCacheModel.ldapCompany;

		if ((ldapCompany != null) && (ldapCompany.length() == 0)) {
			spLdapMappingCacheModel.ldapCompany = null;
		}

		spLdapMappingCacheModel.defaultRoleId = getDefaultRoleId();

		return spLdapMappingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{spLdapMappingId=");
		sb.append(getSpLdapMappingId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", countryId=");
		sb.append(getCountryId());
		sb.append(", departmentId=");
		sb.append(getDepartmentId());
		sb.append(", countryDepartmentId=");
		sb.append(getCountryDepartmentId());
		sb.append(", ldapCountry=");
		sb.append(getLdapCountry());
		sb.append(", ldapDepartment=");
		sb.append(getLdapDepartment());
		sb.append(", ldapCompany=");
		sb.append(getLdapCompany());
		sb.append(", defaultRoleId=");
		sb.append(getDefaultRoleId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.spservices.model.SPLdapMapping");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spLdapMappingId</column-name><column-value><![CDATA[");
		sb.append(getSpLdapMappingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryId</column-name><column-value><![CDATA[");
		sb.append(getCountryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>departmentId</column-name><column-value><![CDATA[");
		sb.append(getDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>countryDepartmentId</column-name><column-value><![CDATA[");
		sb.append(getCountryDepartmentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ldapCountry</column-name><column-value><![CDATA[");
		sb.append(getLdapCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ldapDepartment</column-name><column-value><![CDATA[");
		sb.append(getLdapDepartment());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ldapCompany</column-name><column-value><![CDATA[");
		sb.append(getLdapCompany());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>defaultRoleId</column-name><column-value><![CDATA[");
		sb.append(getDefaultRoleId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPLdapMapping.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPLdapMapping.class
		};
	private long _spLdapMappingId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _countryId;
	private long _departmentId;
	private long _countryDepartmentId;
	private String _ldapCountry;
	private String _originalLdapCountry;
	private String _ldapDepartment;
	private String _originalLdapDepartment;
	private String _ldapCompany;
	private String _originalLdapCompany;
	private long _defaultRoleId;
	private long _columnBitmask;
	private SPLdapMapping _escapedModel;
}
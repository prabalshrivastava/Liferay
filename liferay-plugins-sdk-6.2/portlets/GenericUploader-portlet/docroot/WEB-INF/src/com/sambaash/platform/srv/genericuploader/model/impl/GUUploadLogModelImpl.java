/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.genericuploader.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.genericuploader.model.GUUploadLog;
import com.sambaash.platform.srv.genericuploader.model.GUUploadLogModel;
import com.sambaash.platform.srv.genericuploader.model.GUUploadLogSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GUUploadLog service. Represents a row in the &quot;SPGUUploadLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.genericuploader.model.GUUploadLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GUUploadLogImpl}.
 * </p>
 *
 * @author nareshchebolu
 * @see GUUploadLogImpl
 * @see com.sambaash.platform.srv.genericuploader.model.GUUploadLog
 * @see com.sambaash.platform.srv.genericuploader.model.GUUploadLogModel
 * @generated
 */
@JSON(strict = true)
public class GUUploadLogModelImpl extends BaseModelImpl<GUUploadLog>
	implements GUUploadLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a g u upload log model instance should use the {@link com.sambaash.platform.srv.genericuploader.model.GUUploadLog} interface instead.
	 */
	public static final String TABLE_NAME = "SPGUUploadLog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "SPGUUploadLogId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "successCount", Types.INTEGER },
			{ "errorCount", Types.INTEGER },
			{ "startTime", Types.TIMESTAMP },
			{ "endTime", Types.TIMESTAMP },
			{ "uploadedFileEntryId", Types.BIGINT },
			{ "errorFileEntryId", Types.BIGINT },
			{ "errors", Types.VARCHAR },
			{ "msgs", Types.VARCHAR },
			{ "status", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SPGUUploadLog (SPGUUploadLogId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,successCount INTEGER,errorCount INTEGER,startTime DATETIME null,endTime DATETIME null,uploadedFileEntryId BIGINT(20),errorFileEntryId BIGINT(20),errors VARCHAR(75) null,msgs VARCHAR(75) null,status VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SPGUUploadLog";
	public static final String ORDER_BY_JPQL = " ORDER BY guUploadLog.modifiedDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPGUUploadLog.modifiedDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.genericuploader.model.GUUploadLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.genericuploader.model.GUUploadLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GUUploadLog toModel(GUUploadLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GUUploadLog model = new GUUploadLogImpl();

		model.setSPGUUploadLogId(soapModel.getSPGUUploadLogId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setSuccessCount(soapModel.getSuccessCount());
		model.setErrorCount(soapModel.getErrorCount());
		model.setStartTime(soapModel.getStartTime());
		model.setEndTime(soapModel.getEndTime());
		model.setUploadedFileEntryId(soapModel.getUploadedFileEntryId());
		model.setErrorFileEntryId(soapModel.getErrorFileEntryId());
		model.setErrors(soapModel.getErrors());
		model.setMsgs(soapModel.getMsgs());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GUUploadLog> toModels(GUUploadLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GUUploadLog> models = new ArrayList<GUUploadLog>(soapModels.length);

		for (GUUploadLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.genericuploader.model.GUUploadLog"));

	public GUUploadLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _SPGUUploadLogId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSPGUUploadLogId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _SPGUUploadLogId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return GUUploadLog.class;
	}

	@Override
	public String getModelClassName() {
		return GUUploadLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("SPGUUploadLogId", getSPGUUploadLogId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("successCount", getSuccessCount());
		attributes.put("errorCount", getErrorCount());
		attributes.put("startTime", getStartTime());
		attributes.put("endTime", getEndTime());
		attributes.put("uploadedFileEntryId", getUploadedFileEntryId());
		attributes.put("errorFileEntryId", getErrorFileEntryId());
		attributes.put("errors", getErrors());
		attributes.put("msgs", getMsgs());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long SPGUUploadLogId = (Long)attributes.get("SPGUUploadLogId");

		if (SPGUUploadLogId != null) {
			setSPGUUploadLogId(SPGUUploadLogId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer successCount = (Integer)attributes.get("successCount");

		if (successCount != null) {
			setSuccessCount(successCount);
		}

		Integer errorCount = (Integer)attributes.get("errorCount");

		if (errorCount != null) {
			setErrorCount(errorCount);
		}

		Date startTime = (Date)attributes.get("startTime");

		if (startTime != null) {
			setStartTime(startTime);
		}

		Date endTime = (Date)attributes.get("endTime");

		if (endTime != null) {
			setEndTime(endTime);
		}

		Long uploadedFileEntryId = (Long)attributes.get("uploadedFileEntryId");

		if (uploadedFileEntryId != null) {
			setUploadedFileEntryId(uploadedFileEntryId);
		}

		Long errorFileEntryId = (Long)attributes.get("errorFileEntryId");

		if (errorFileEntryId != null) {
			setErrorFileEntryId(errorFileEntryId);
		}

		String errors = (String)attributes.get("errors");

		if (errors != null) {
			setErrors(errors);
		}

		String msgs = (String)attributes.get("msgs");

		if (msgs != null) {
			setMsgs(msgs);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	@Override
	public long getSPGUUploadLogId() {
		return _SPGUUploadLogId;
	}

	@Override
	public void setSPGUUploadLogId(long SPGUUploadLogId) {
		_SPGUUploadLogId = SPGUUploadLogId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getSuccessCount() {
		return _successCount;
	}

	@Override
	public void setSuccessCount(int successCount) {
		_successCount = successCount;
	}

	@JSON
	@Override
	public int getErrorCount() {
		return _errorCount;
	}

	@Override
	public void setErrorCount(int errorCount) {
		_errorCount = errorCount;
	}

	@JSON
	@Override
	public Date getStartTime() {
		return _startTime;
	}

	@Override
	public void setStartTime(Date startTime) {
		_startTime = startTime;
	}

	@JSON
	@Override
	public Date getEndTime() {
		return _endTime;
	}

	@Override
	public void setEndTime(Date endTime) {
		_endTime = endTime;
	}

	@JSON
	@Override
	public long getUploadedFileEntryId() {
		return _uploadedFileEntryId;
	}

	@Override
	public void setUploadedFileEntryId(long uploadedFileEntryId) {
		_uploadedFileEntryId = uploadedFileEntryId;
	}

	@JSON
	@Override
	public long getErrorFileEntryId() {
		return _errorFileEntryId;
	}

	@Override
	public void setErrorFileEntryId(long errorFileEntryId) {
		_errorFileEntryId = errorFileEntryId;
	}

	@JSON
	@Override
	public String getErrors() {
		if (_errors == null) {
			return StringPool.BLANK;
		}
		else {
			return _errors;
		}
	}

	@Override
	public void setErrors(String errors) {
		_errors = errors;
	}

	@JSON
	@Override
	public String getMsgs() {
		if (_msgs == null) {
			return StringPool.BLANK;
		}
		else {
			return _msgs;
		}
	}

	@Override
	public void setMsgs(String msgs) {
		_msgs = msgs;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			GUUploadLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GUUploadLog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (GUUploadLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		GUUploadLogImpl guUploadLogImpl = new GUUploadLogImpl();

		guUploadLogImpl.setSPGUUploadLogId(getSPGUUploadLogId());
		guUploadLogImpl.setGroupId(getGroupId());
		guUploadLogImpl.setCompanyId(getCompanyId());
		guUploadLogImpl.setUserId(getUserId());
		guUploadLogImpl.setUserName(getUserName());
		guUploadLogImpl.setCreateDate(getCreateDate());
		guUploadLogImpl.setModifiedDate(getModifiedDate());
		guUploadLogImpl.setSuccessCount(getSuccessCount());
		guUploadLogImpl.setErrorCount(getErrorCount());
		guUploadLogImpl.setStartTime(getStartTime());
		guUploadLogImpl.setEndTime(getEndTime());
		guUploadLogImpl.setUploadedFileEntryId(getUploadedFileEntryId());
		guUploadLogImpl.setErrorFileEntryId(getErrorFileEntryId());
		guUploadLogImpl.setErrors(getErrors());
		guUploadLogImpl.setMsgs(getMsgs());
		guUploadLogImpl.setStatus(getStatus());

		guUploadLogImpl.resetOriginalValues();

		return guUploadLogImpl;
	}

	@Override
	public int compareTo(GUUploadLog guUploadLog) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				guUploadLog.getModifiedDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof GUUploadLog)) {
			return false;
		}

		GUUploadLog guUploadLog = (GUUploadLog)obj;

		long primaryKey = guUploadLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GUUploadLog> toCacheModel() {
		GUUploadLogCacheModel guUploadLogCacheModel = new GUUploadLogCacheModel();

		guUploadLogCacheModel.SPGUUploadLogId = getSPGUUploadLogId();

		guUploadLogCacheModel.groupId = getGroupId();

		guUploadLogCacheModel.companyId = getCompanyId();

		guUploadLogCacheModel.userId = getUserId();

		guUploadLogCacheModel.userName = getUserName();

		String userName = guUploadLogCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			guUploadLogCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			guUploadLogCacheModel.createDate = createDate.getTime();
		}
		else {
			guUploadLogCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			guUploadLogCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			guUploadLogCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		guUploadLogCacheModel.successCount = getSuccessCount();

		guUploadLogCacheModel.errorCount = getErrorCount();

		Date startTime = getStartTime();

		if (startTime != null) {
			guUploadLogCacheModel.startTime = startTime.getTime();
		}
		else {
			guUploadLogCacheModel.startTime = Long.MIN_VALUE;
		}

		Date endTime = getEndTime();

		if (endTime != null) {
			guUploadLogCacheModel.endTime = endTime.getTime();
		}
		else {
			guUploadLogCacheModel.endTime = Long.MIN_VALUE;
		}

		guUploadLogCacheModel.uploadedFileEntryId = getUploadedFileEntryId();

		guUploadLogCacheModel.errorFileEntryId = getErrorFileEntryId();

		guUploadLogCacheModel.errors = getErrors();

		String errors = guUploadLogCacheModel.errors;

		if ((errors != null) && (errors.length() == 0)) {
			guUploadLogCacheModel.errors = null;
		}

		guUploadLogCacheModel.msgs = getMsgs();

		String msgs = guUploadLogCacheModel.msgs;

		if ((msgs != null) && (msgs.length() == 0)) {
			guUploadLogCacheModel.msgs = null;
		}

		guUploadLogCacheModel.status = getStatus();

		String status = guUploadLogCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			guUploadLogCacheModel.status = null;
		}

		return guUploadLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{SPGUUploadLogId=");
		sb.append(getSPGUUploadLogId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", successCount=");
		sb.append(getSuccessCount());
		sb.append(", errorCount=");
		sb.append(getErrorCount());
		sb.append(", startTime=");
		sb.append(getStartTime());
		sb.append(", endTime=");
		sb.append(getEndTime());
		sb.append(", uploadedFileEntryId=");
		sb.append(getUploadedFileEntryId());
		sb.append(", errorFileEntryId=");
		sb.append(getErrorFileEntryId());
		sb.append(", errors=");
		sb.append(getErrors());
		sb.append(", msgs=");
		sb.append(getMsgs());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.genericuploader.model.GUUploadLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>SPGUUploadLogId</column-name><column-value><![CDATA[");
		sb.append(getSPGUUploadLogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>successCount</column-name><column-value><![CDATA[");
		sb.append(getSuccessCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorCount</column-name><column-value><![CDATA[");
		sb.append(getErrorCount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startTime</column-name><column-value><![CDATA[");
		sb.append(getStartTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>endTime</column-name><column-value><![CDATA[");
		sb.append(getEndTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>uploadedFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getUploadedFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errorFileEntryId</column-name><column-value><![CDATA[");
		sb.append(getErrorFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>errors</column-name><column-value><![CDATA[");
		sb.append(getErrors());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>msgs</column-name><column-value><![CDATA[");
		sb.append(getMsgs());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GUUploadLog.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			GUUploadLog.class
		};
	private long _SPGUUploadLogId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private int _successCount;
	private int _errorCount;
	private Date _startTime;
	private Date _endTime;
	private long _uploadedFileEntryId;
	private long _errorFileEntryId;
	private String _errors;
	private String _msgs;
	private String _status;
	private GUUploadLog _escapedModel;
}
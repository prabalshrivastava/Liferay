/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.mail.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.mail.model.SPEMailAudit;
import com.sambaash.platform.srv.mail.model.SPEMailAuditModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPEMailAudit service. Represents a row in the &quot;SPEMailAudit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.mail.model.SPEMailAuditModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPEMailAuditImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see SPEMailAuditImpl
 * @see com.sambaash.platform.srv.mail.model.SPEMailAudit
 * @see com.sambaash.platform.srv.mail.model.SPEMailAuditModel
 * @generated
 */
public class SPEMailAuditModelImpl extends BaseModelImpl<SPEMailAudit>
	implements SPEMailAuditModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p e mail audit model instance should use the {@link com.sambaash.platform.srv.mail.model.SPEMailAudit} interface instead.
	 */
	public static final String TABLE_NAME = "SPEMailAudit";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spEMailAudit", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "sentTo", Types.VARCHAR },
			{ "cc", Types.VARCHAR },
			{ "bcc", Types.VARCHAR },
			{ "category", Types.VARCHAR },
			{ "subject", Types.VARCHAR },
			{ "content", Types.VARCHAR },
			{ "sentDate", Types.TIMESTAMP },
			{ "messasgeId", Types.VARCHAR },
			{ "userId", Types.BIGINT },
			{ "orgId", Types.BIGINT },
			{ "processStateId", Types.BIGINT },
			{ "nodeId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPEMailAudit (spEMailAudit BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),sentTo VARCHAR(500) null,cc VARCHAR(500) null,bcc VARCHAR(500) null,category VARCHAR(75) null,subject VARCHAR(500) null,content LONGTEXT null,sentDate DATETIME null,messasgeId VARCHAR(75) null,userId BIGINT(20),orgId BIGINT(20),processStateId BIGINT(20),nodeId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPEMailAudit";
	public static final String ORDER_BY_JPQL = " ORDER BY speMailAudit.spEMailAudit ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPEMailAudit.spEMailAudit ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.mail.model.SPEMailAudit"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.mail.model.SPEMailAudit"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.mail.model.SPEMailAudit"),
			true);
	public static long NODEID_COLUMN_BITMASK = 1L;
	public static long ORGID_COLUMN_BITMASK = 2L;
	public static long PROCESSSTATEID_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static long SPEMAILAUDIT_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.mail.model.SPEMailAudit"));

	public SPEMailAuditModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spEMailAudit;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpEMailAudit(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spEMailAudit;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPEMailAudit.class;
	}

	@Override
	public String getModelClassName() {
		return SPEMailAudit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spEMailAudit", getSpEMailAudit());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("sentTo", getSentTo());
		attributes.put("cc", getCc());
		attributes.put("bcc", getBcc());
		attributes.put("category", getCategory());
		attributes.put("subject", getSubject());
		attributes.put("content", getContent());
		attributes.put("sentDate", getSentDate());
		attributes.put("messasgeId", getMessasgeId());
		attributes.put("userId", getUserId());
		attributes.put("orgId", getOrgId());
		attributes.put("processStateId", getProcessStateId());
		attributes.put("nodeId", getNodeId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spEMailAudit = (Long)attributes.get("spEMailAudit");

		if (spEMailAudit != null) {
			setSpEMailAudit(spEMailAudit);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String sentTo = (String)attributes.get("sentTo");

		if (sentTo != null) {
			setSentTo(sentTo);
		}

		String cc = (String)attributes.get("cc");

		if (cc != null) {
			setCc(cc);
		}

		String bcc = (String)attributes.get("bcc");

		if (bcc != null) {
			setBcc(bcc);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String content = (String)attributes.get("content");

		if (content != null) {
			setContent(content);
		}

		Date sentDate = (Date)attributes.get("sentDate");

		if (sentDate != null) {
			setSentDate(sentDate);
		}

		String messasgeId = (String)attributes.get("messasgeId");

		if (messasgeId != null) {
			setMessasgeId(messasgeId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long orgId = (Long)attributes.get("orgId");

		if (orgId != null) {
			setOrgId(orgId);
		}

		Long processStateId = (Long)attributes.get("processStateId");

		if (processStateId != null) {
			setProcessStateId(processStateId);
		}

		Long nodeId = (Long)attributes.get("nodeId");

		if (nodeId != null) {
			setNodeId(nodeId);
		}
	}

	@Override
	public long getSpEMailAudit() {
		return _spEMailAudit;
	}

	@Override
	public void setSpEMailAudit(long spEMailAudit) {
		_spEMailAudit = spEMailAudit;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public String getSentTo() {
		if (_sentTo == null) {
			return StringPool.BLANK;
		}
		else {
			return _sentTo;
		}
	}

	@Override
	public void setSentTo(String sentTo) {
		_sentTo = sentTo;
	}

	@Override
	public String getCc() {
		if (_cc == null) {
			return StringPool.BLANK;
		}
		else {
			return _cc;
		}
	}

	@Override
	public void setCc(String cc) {
		_cc = cc;
	}

	@Override
	public String getBcc() {
		if (_bcc == null) {
			return StringPool.BLANK;
		}
		else {
			return _bcc;
		}
	}

	@Override
	public void setBcc(String bcc) {
		_bcc = bcc;
	}

	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_category = category;
	}

	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@Override
	public String getContent() {
		if (_content == null) {
			return StringPool.BLANK;
		}
		else {
			return _content;
		}
	}

	@Override
	public void setContent(String content) {
		_content = content;
	}

	@Override
	public Date getSentDate() {
		return _sentDate;
	}

	@Override
	public void setSentDate(Date sentDate) {
		_sentDate = sentDate;
	}

	@Override
	public String getMessasgeId() {
		if (_messasgeId == null) {
			return StringPool.BLANK;
		}
		else {
			return _messasgeId;
		}
	}

	@Override
	public void setMessasgeId(String messasgeId) {
		_messasgeId = messasgeId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public long getOrgId() {
		return _orgId;
	}

	@Override
	public void setOrgId(long orgId) {
		_columnBitmask |= ORGID_COLUMN_BITMASK;

		if (!_setOriginalOrgId) {
			_setOriginalOrgId = true;

			_originalOrgId = _orgId;
		}

		_orgId = orgId;
	}

	public long getOriginalOrgId() {
		return _originalOrgId;
	}

	@Override
	public long getProcessStateId() {
		return _processStateId;
	}

	@Override
	public void setProcessStateId(long processStateId) {
		_columnBitmask |= PROCESSSTATEID_COLUMN_BITMASK;

		if (!_setOriginalProcessStateId) {
			_setOriginalProcessStateId = true;

			_originalProcessStateId = _processStateId;
		}

		_processStateId = processStateId;
	}

	public long getOriginalProcessStateId() {
		return _originalProcessStateId;
	}

	@Override
	public long getNodeId() {
		return _nodeId;
	}

	@Override
	public void setNodeId(long nodeId) {
		_columnBitmask |= NODEID_COLUMN_BITMASK;

		if (!_setOriginalNodeId) {
			_setOriginalNodeId = true;

			_originalNodeId = _nodeId;
		}

		_nodeId = nodeId;
	}

	public long getOriginalNodeId() {
		return _originalNodeId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPEMailAudit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPEMailAudit toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPEMailAudit)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPEMailAuditImpl speMailAuditImpl = new SPEMailAuditImpl();

		speMailAuditImpl.setSpEMailAudit(getSpEMailAudit());
		speMailAuditImpl.setGroupId(getGroupId());
		speMailAuditImpl.setCompanyId(getCompanyId());
		speMailAuditImpl.setSentTo(getSentTo());
		speMailAuditImpl.setCc(getCc());
		speMailAuditImpl.setBcc(getBcc());
		speMailAuditImpl.setCategory(getCategory());
		speMailAuditImpl.setSubject(getSubject());
		speMailAuditImpl.setContent(getContent());
		speMailAuditImpl.setSentDate(getSentDate());
		speMailAuditImpl.setMessasgeId(getMessasgeId());
		speMailAuditImpl.setUserId(getUserId());
		speMailAuditImpl.setOrgId(getOrgId());
		speMailAuditImpl.setProcessStateId(getProcessStateId());
		speMailAuditImpl.setNodeId(getNodeId());

		speMailAuditImpl.resetOriginalValues();

		return speMailAuditImpl;
	}

	@Override
	public int compareTo(SPEMailAudit speMailAudit) {
		long primaryKey = speMailAudit.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPEMailAudit)) {
			return false;
		}

		SPEMailAudit speMailAudit = (SPEMailAudit)obj;

		long primaryKey = speMailAudit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPEMailAuditModelImpl speMailAuditModelImpl = this;

		speMailAuditModelImpl._originalUserId = speMailAuditModelImpl._userId;

		speMailAuditModelImpl._setOriginalUserId = false;

		speMailAuditModelImpl._originalOrgId = speMailAuditModelImpl._orgId;

		speMailAuditModelImpl._setOriginalOrgId = false;

		speMailAuditModelImpl._originalProcessStateId = speMailAuditModelImpl._processStateId;

		speMailAuditModelImpl._setOriginalProcessStateId = false;

		speMailAuditModelImpl._originalNodeId = speMailAuditModelImpl._nodeId;

		speMailAuditModelImpl._setOriginalNodeId = false;

		speMailAuditModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPEMailAudit> toCacheModel() {
		SPEMailAuditCacheModel speMailAuditCacheModel = new SPEMailAuditCacheModel();

		speMailAuditCacheModel.spEMailAudit = getSpEMailAudit();

		speMailAuditCacheModel.groupId = getGroupId();

		speMailAuditCacheModel.companyId = getCompanyId();

		speMailAuditCacheModel.sentTo = getSentTo();

		String sentTo = speMailAuditCacheModel.sentTo;

		if ((sentTo != null) && (sentTo.length() == 0)) {
			speMailAuditCacheModel.sentTo = null;
		}

		speMailAuditCacheModel.cc = getCc();

		String cc = speMailAuditCacheModel.cc;

		if ((cc != null) && (cc.length() == 0)) {
			speMailAuditCacheModel.cc = null;
		}

		speMailAuditCacheModel.bcc = getBcc();

		String bcc = speMailAuditCacheModel.bcc;

		if ((bcc != null) && (bcc.length() == 0)) {
			speMailAuditCacheModel.bcc = null;
		}

		speMailAuditCacheModel.category = getCategory();

		String category = speMailAuditCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			speMailAuditCacheModel.category = null;
		}

		speMailAuditCacheModel.subject = getSubject();

		String subject = speMailAuditCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			speMailAuditCacheModel.subject = null;
		}

		speMailAuditCacheModel.content = getContent();

		String content = speMailAuditCacheModel.content;

		if ((content != null) && (content.length() == 0)) {
			speMailAuditCacheModel.content = null;
		}

		Date sentDate = getSentDate();

		if (sentDate != null) {
			speMailAuditCacheModel.sentDate = sentDate.getTime();
		}
		else {
			speMailAuditCacheModel.sentDate = Long.MIN_VALUE;
		}

		speMailAuditCacheModel.messasgeId = getMessasgeId();

		String messasgeId = speMailAuditCacheModel.messasgeId;

		if ((messasgeId != null) && (messasgeId.length() == 0)) {
			speMailAuditCacheModel.messasgeId = null;
		}

		speMailAuditCacheModel.userId = getUserId();

		speMailAuditCacheModel.orgId = getOrgId();

		speMailAuditCacheModel.processStateId = getProcessStateId();

		speMailAuditCacheModel.nodeId = getNodeId();

		return speMailAuditCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{spEMailAudit=");
		sb.append(getSpEMailAudit());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", sentTo=");
		sb.append(getSentTo());
		sb.append(", cc=");
		sb.append(getCc());
		sb.append(", bcc=");
		sb.append(getBcc());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", content=");
		sb.append(getContent());
		sb.append(", sentDate=");
		sb.append(getSentDate());
		sb.append(", messasgeId=");
		sb.append(getMessasgeId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", orgId=");
		sb.append(getOrgId());
		sb.append(", processStateId=");
		sb.append(getProcessStateId());
		sb.append(", nodeId=");
		sb.append(getNodeId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.mail.model.SPEMailAudit");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spEMailAudit</column-name><column-value><![CDATA[");
		sb.append(getSpEMailAudit());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sentTo</column-name><column-value><![CDATA[");
		sb.append(getSentTo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cc</column-name><column-value><![CDATA[");
		sb.append(getCc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bcc</column-name><column-value><![CDATA[");
		sb.append(getBcc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>content</column-name><column-value><![CDATA[");
		sb.append(getContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sentDate</column-name><column-value><![CDATA[");
		sb.append(getSentDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>messasgeId</column-name><column-value><![CDATA[");
		sb.append(getMessasgeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>orgId</column-name><column-value><![CDATA[");
		sb.append(getOrgId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processStateId</column-name><column-value><![CDATA[");
		sb.append(getProcessStateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nodeId</column-name><column-value><![CDATA[");
		sb.append(getNodeId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPEMailAudit.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPEMailAudit.class
		};
	private long _spEMailAudit;
	private long _groupId;
	private long _companyId;
	private String _sentTo;
	private String _cc;
	private String _bcc;
	private String _category;
	private String _subject;
	private String _content;
	private Date _sentDate;
	private String _messasgeId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private long _orgId;
	private long _originalOrgId;
	private boolean _setOriginalOrgId;
	private long _processStateId;
	private long _originalProcessStateId;
	private boolean _setOriginalProcessStateId;
	private long _nodeId;
	private long _originalNodeId;
	private boolean _setOriginalNodeId;
	private long _columnBitmask;
	private SPEMailAudit _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.mail.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.mail.model.SPMailTemplate;
import com.sambaash.platform.srv.mail.model.SPMailTemplateModel;
import com.sambaash.platform.srv.mail.model.SPMailTemplateSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SPMailTemplate service. Represents a row in the &quot;SPMailTemplate&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.mail.model.SPMailTemplateModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPMailTemplateImpl}.
 * </p>
 *
 * @author gauravvijayvergia
 * @see SPMailTemplateImpl
 * @see com.sambaash.platform.srv.mail.model.SPMailTemplate
 * @see com.sambaash.platform.srv.mail.model.SPMailTemplateModel
 * @generated
 */
@JSON(strict = true)
public class SPMailTemplateModelImpl extends BaseModelImpl<SPMailTemplate>
	implements SPMailTemplateModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p mail template model instance should use the {@link com.sambaash.platform.srv.mail.model.SPMailTemplate} interface instead.
	 */
	public static final String TABLE_NAME = "SPMailTemplate";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spMailTemplateId", Types.BIGINT },
			{ "productTypeId", Types.BIGINT },
			{ "subProductTypeId", Types.BIGINT },
			{ "templateName", Types.VARCHAR },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "subject", Types.VARCHAR },
			{ "htmlContent", Types.VARCHAR },
			{ "textContent", Types.VARCHAR },
			{ "htmlUpload", Types.BOOLEAN },
			{ "status", Types.BOOLEAN },
			{ "createBy", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedBy", Types.BIGINT },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "parentTempalteId", Types.BIGINT },
			{ "versionNumber", Types.VARCHAR },
			{ "fromAddress", Types.VARCHAR },
			{ "fromName", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table SPMailTemplate (spMailTemplateId BIGINT(20) not null primary key,productTypeId BIGINT(20),subProductTypeId BIGINT(20),templateName VARCHAR(250) null,groupId BIGINT(20),companyId BIGINT(20),subject VARCHAR(550) null,htmlContent LONGTEXT null,textContent LONGTEXT null,htmlUpload BOOLEAN,status BOOLEAN,createBy BIGINT(20),createDate DATETIME null,modifiedBy BIGINT(20),modifiedDate DATETIME null,parentTempalteId BIGINT(20),versionNumber VARCHAR(75) null,fromAddress VARCHAR(75) null,fromName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table SPMailTemplate";
	public static final String ORDER_BY_JPQL = " ORDER BY spMailTemplate.parentTempalteId DESC, spMailTemplate.versionNumber DESC, spMailTemplate.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY SPMailTemplate.parentTempalteId DESC, SPMailTemplate.versionNumber DESC, SPMailTemplate.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.mail.model.SPMailTemplate"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.mail.model.SPMailTemplate"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.mail.model.SPMailTemplate"),
			true);
	public static long PARENTTEMPALTEID_COLUMN_BITMASK = 1L;
	public static long PRODUCTTYPEID_COLUMN_BITMASK = 2L;
	public static long STATUS_COLUMN_BITMASK = 4L;
	public static long SUBPRODUCTTYPEID_COLUMN_BITMASK = 8L;
	public static long TEMPLATENAME_COLUMN_BITMASK = 16L;
	public static long VERSIONNUMBER_COLUMN_BITMASK = 32L;
	public static long MODIFIEDDATE_COLUMN_BITMASK = 64L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SPMailTemplate toModel(SPMailTemplateSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SPMailTemplate model = new SPMailTemplateImpl();

		model.setSpMailTemplateId(soapModel.getSpMailTemplateId());
		model.setProductTypeId(soapModel.getProductTypeId());
		model.setSubProductTypeId(soapModel.getSubProductTypeId());
		model.setTemplateName(soapModel.getTemplateName());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setSubject(soapModel.getSubject());
		model.setHtmlContent(soapModel.getHtmlContent());
		model.setTextContent(soapModel.getTextContent());
		model.setHtmlUpload(soapModel.getHtmlUpload());
		model.setStatus(soapModel.getStatus());
		model.setCreateBy(soapModel.getCreateBy());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setParentTempalteId(soapModel.getParentTempalteId());
		model.setVersionNumber(soapModel.getVersionNumber());
		model.setFromAddress(soapModel.getFromAddress());
		model.setFromName(soapModel.getFromName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SPMailTemplate> toModels(SPMailTemplateSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SPMailTemplate> models = new ArrayList<SPMailTemplate>(soapModels.length);

		for (SPMailTemplateSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.mail.model.SPMailTemplate"));

	public SPMailTemplateModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spMailTemplateId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpMailTemplateId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spMailTemplateId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPMailTemplate.class;
	}

	@Override
	public String getModelClassName() {
		return SPMailTemplate.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spMailTemplateId", getSpMailTemplateId());
		attributes.put("productTypeId", getProductTypeId());
		attributes.put("subProductTypeId", getSubProductTypeId());
		attributes.put("templateName", getTemplateName());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("subject", getSubject());
		attributes.put("htmlContent", getHtmlContent());
		attributes.put("textContent", getTextContent());
		attributes.put("htmlUpload", getHtmlUpload());
		attributes.put("status", getStatus());
		attributes.put("createBy", getCreateBy());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("parentTempalteId", getParentTempalteId());
		attributes.put("versionNumber", getVersionNumber());
		attributes.put("fromAddress", getFromAddress());
		attributes.put("fromName", getFromName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spMailTemplateId = (Long)attributes.get("spMailTemplateId");

		if (spMailTemplateId != null) {
			setSpMailTemplateId(spMailTemplateId);
		}

		Long productTypeId = (Long)attributes.get("productTypeId");

		if (productTypeId != null) {
			setProductTypeId(productTypeId);
		}

		Long subProductTypeId = (Long)attributes.get("subProductTypeId");

		if (subProductTypeId != null) {
			setSubProductTypeId(subProductTypeId);
		}

		String templateName = (String)attributes.get("templateName");

		if (templateName != null) {
			setTemplateName(templateName);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		String subject = (String)attributes.get("subject");

		if (subject != null) {
			setSubject(subject);
		}

		String htmlContent = (String)attributes.get("htmlContent");

		if (htmlContent != null) {
			setHtmlContent(htmlContent);
		}

		String textContent = (String)attributes.get("textContent");

		if (textContent != null) {
			setTextContent(textContent);
		}

		Boolean htmlUpload = (Boolean)attributes.get("htmlUpload");

		if (htmlUpload != null) {
			setHtmlUpload(htmlUpload);
		}

		Boolean status = (Boolean)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long createBy = (Long)attributes.get("createBy");

		if (createBy != null) {
			setCreateBy(createBy);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long parentTempalteId = (Long)attributes.get("parentTempalteId");

		if (parentTempalteId != null) {
			setParentTempalteId(parentTempalteId);
		}

		String versionNumber = (String)attributes.get("versionNumber");

		if (versionNumber != null) {
			setVersionNumber(versionNumber);
		}

		String fromAddress = (String)attributes.get("fromAddress");

		if (fromAddress != null) {
			setFromAddress(fromAddress);
		}

		String fromName = (String)attributes.get("fromName");

		if (fromName != null) {
			setFromName(fromName);
		}
	}

	@JSON
	@Override
	public long getSpMailTemplateId() {
		return _spMailTemplateId;
	}

	@Override
	public void setSpMailTemplateId(long spMailTemplateId) {
		_spMailTemplateId = spMailTemplateId;
	}

	@JSON
	@Override
	public long getProductTypeId() {
		return _productTypeId;
	}

	@Override
	public void setProductTypeId(long productTypeId) {
		_columnBitmask |= PRODUCTTYPEID_COLUMN_BITMASK;

		if (!_setOriginalProductTypeId) {
			_setOriginalProductTypeId = true;

			_originalProductTypeId = _productTypeId;
		}

		_productTypeId = productTypeId;
	}

	public long getOriginalProductTypeId() {
		return _originalProductTypeId;
	}

	@JSON
	@Override
	public long getSubProductTypeId() {
		return _subProductTypeId;
	}

	@Override
	public void setSubProductTypeId(long subProductTypeId) {
		_columnBitmask |= SUBPRODUCTTYPEID_COLUMN_BITMASK;

		if (!_setOriginalSubProductTypeId) {
			_setOriginalSubProductTypeId = true;

			_originalSubProductTypeId = _subProductTypeId;
		}

		_subProductTypeId = subProductTypeId;
	}

	public long getOriginalSubProductTypeId() {
		return _originalSubProductTypeId;
	}

	@JSON
	@Override
	public String getTemplateName() {
		if (_templateName == null) {
			return StringPool.BLANK;
		}
		else {
			return _templateName;
		}
	}

	@Override
	public void setTemplateName(String templateName) {
		_columnBitmask |= TEMPLATENAME_COLUMN_BITMASK;

		if (_originalTemplateName == null) {
			_originalTemplateName = _templateName;
		}

		_templateName = templateName;
	}

	public String getOriginalTemplateName() {
		return GetterUtil.getString(_originalTemplateName);
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public String getSubject() {
		if (_subject == null) {
			return StringPool.BLANK;
		}
		else {
			return _subject;
		}
	}

	@Override
	public void setSubject(String subject) {
		_subject = subject;
	}

	@JSON
	@Override
	public String getHtmlContent() {
		if (_htmlContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _htmlContent;
		}
	}

	@Override
	public void setHtmlContent(String htmlContent) {
		_htmlContent = htmlContent;
	}

	@JSON
	@Override
	public String getTextContent() {
		if (_textContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _textContent;
		}
	}

	@Override
	public void setTextContent(String textContent) {
		_textContent = textContent;
	}

	@JSON
	@Override
	public boolean getHtmlUpload() {
		return _htmlUpload;
	}

	@Override
	public boolean isHtmlUpload() {
		return _htmlUpload;
	}

	@Override
	public void setHtmlUpload(boolean htmlUpload) {
		_htmlUpload = htmlUpload;
	}

	@JSON
	@Override
	public boolean getStatus() {
		return _status;
	}

	@Override
	public boolean isStatus() {
		return _status;
	}

	@Override
	public void setStatus(boolean status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public boolean getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public long getCreateBy() {
		return _createBy;
	}

	@Override
	public void setCreateBy(long createBy) {
		_createBy = createBy;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getParentTempalteId() {
		return _parentTempalteId;
	}

	@Override
	public void setParentTempalteId(long parentTempalteId) {
		_columnBitmask = -1L;

		if (!_setOriginalParentTempalteId) {
			_setOriginalParentTempalteId = true;

			_originalParentTempalteId = _parentTempalteId;
		}

		_parentTempalteId = parentTempalteId;
	}

	public long getOriginalParentTempalteId() {
		return _originalParentTempalteId;
	}

	@JSON
	@Override
	public String getVersionNumber() {
		if (_versionNumber == null) {
			return StringPool.BLANK;
		}
		else {
			return _versionNumber;
		}
	}

	@Override
	public void setVersionNumber(String versionNumber) {
		_columnBitmask = -1L;

		if (_originalVersionNumber == null) {
			_originalVersionNumber = _versionNumber;
		}

		_versionNumber = versionNumber;
	}

	public String getOriginalVersionNumber() {
		return GetterUtil.getString(_originalVersionNumber);
	}

	@JSON
	@Override
	public String getFromAddress() {
		if (_fromAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromAddress;
		}
	}

	@Override
	public void setFromAddress(String fromAddress) {
		_fromAddress = fromAddress;
	}

	@JSON
	@Override
	public String getFromName() {
		if (_fromName == null) {
			return StringPool.BLANK;
		}
		else {
			return _fromName;
		}
	}

	@Override
	public void setFromName(String fromName) {
		_fromName = fromName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPMailTemplate.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPMailTemplate toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPMailTemplate)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPMailTemplateImpl spMailTemplateImpl = new SPMailTemplateImpl();

		spMailTemplateImpl.setSpMailTemplateId(getSpMailTemplateId());
		spMailTemplateImpl.setProductTypeId(getProductTypeId());
		spMailTemplateImpl.setSubProductTypeId(getSubProductTypeId());
		spMailTemplateImpl.setTemplateName(getTemplateName());
		spMailTemplateImpl.setGroupId(getGroupId());
		spMailTemplateImpl.setCompanyId(getCompanyId());
		spMailTemplateImpl.setSubject(getSubject());
		spMailTemplateImpl.setHtmlContent(getHtmlContent());
		spMailTemplateImpl.setTextContent(getTextContent());
		spMailTemplateImpl.setHtmlUpload(getHtmlUpload());
		spMailTemplateImpl.setStatus(getStatus());
		spMailTemplateImpl.setCreateBy(getCreateBy());
		spMailTemplateImpl.setCreateDate(getCreateDate());
		spMailTemplateImpl.setModifiedBy(getModifiedBy());
		spMailTemplateImpl.setModifiedDate(getModifiedDate());
		spMailTemplateImpl.setParentTempalteId(getParentTempalteId());
		spMailTemplateImpl.setVersionNumber(getVersionNumber());
		spMailTemplateImpl.setFromAddress(getFromAddress());
		spMailTemplateImpl.setFromName(getFromName());

		spMailTemplateImpl.resetOriginalValues();

		return spMailTemplateImpl;
	}

	@Override
	public int compareTo(SPMailTemplate spMailTemplate) {
		int value = 0;

		if (getParentTempalteId() < spMailTemplate.getParentTempalteId()) {
			value = -1;
		}
		else if (getParentTempalteId() > spMailTemplate.getParentTempalteId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = getVersionNumber().compareTo(spMailTemplate.getVersionNumber());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getModifiedDate(),
				spMailTemplate.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPMailTemplate)) {
			return false;
		}

		SPMailTemplate spMailTemplate = (SPMailTemplate)obj;

		long primaryKey = spMailTemplate.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPMailTemplateModelImpl spMailTemplateModelImpl = this;

		spMailTemplateModelImpl._originalProductTypeId = spMailTemplateModelImpl._productTypeId;

		spMailTemplateModelImpl._setOriginalProductTypeId = false;

		spMailTemplateModelImpl._originalSubProductTypeId = spMailTemplateModelImpl._subProductTypeId;

		spMailTemplateModelImpl._setOriginalSubProductTypeId = false;

		spMailTemplateModelImpl._originalTemplateName = spMailTemplateModelImpl._templateName;

		spMailTemplateModelImpl._originalStatus = spMailTemplateModelImpl._status;

		spMailTemplateModelImpl._setOriginalStatus = false;

		spMailTemplateModelImpl._originalParentTempalteId = spMailTemplateModelImpl._parentTempalteId;

		spMailTemplateModelImpl._setOriginalParentTempalteId = false;

		spMailTemplateModelImpl._originalVersionNumber = spMailTemplateModelImpl._versionNumber;

		spMailTemplateModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPMailTemplate> toCacheModel() {
		SPMailTemplateCacheModel spMailTemplateCacheModel = new SPMailTemplateCacheModel();

		spMailTemplateCacheModel.spMailTemplateId = getSpMailTemplateId();

		spMailTemplateCacheModel.productTypeId = getProductTypeId();

		spMailTemplateCacheModel.subProductTypeId = getSubProductTypeId();

		spMailTemplateCacheModel.templateName = getTemplateName();

		String templateName = spMailTemplateCacheModel.templateName;

		if ((templateName != null) && (templateName.length() == 0)) {
			spMailTemplateCacheModel.templateName = null;
		}

		spMailTemplateCacheModel.groupId = getGroupId();

		spMailTemplateCacheModel.companyId = getCompanyId();

		spMailTemplateCacheModel.subject = getSubject();

		String subject = spMailTemplateCacheModel.subject;

		if ((subject != null) && (subject.length() == 0)) {
			spMailTemplateCacheModel.subject = null;
		}

		spMailTemplateCacheModel.htmlContent = getHtmlContent();

		String htmlContent = spMailTemplateCacheModel.htmlContent;

		if ((htmlContent != null) && (htmlContent.length() == 0)) {
			spMailTemplateCacheModel.htmlContent = null;
		}

		spMailTemplateCacheModel.textContent = getTextContent();

		String textContent = spMailTemplateCacheModel.textContent;

		if ((textContent != null) && (textContent.length() == 0)) {
			spMailTemplateCacheModel.textContent = null;
		}

		spMailTemplateCacheModel.htmlUpload = getHtmlUpload();

		spMailTemplateCacheModel.status = getStatus();

		spMailTemplateCacheModel.createBy = getCreateBy();

		Date createDate = getCreateDate();

		if (createDate != null) {
			spMailTemplateCacheModel.createDate = createDate.getTime();
		}
		else {
			spMailTemplateCacheModel.createDate = Long.MIN_VALUE;
		}

		spMailTemplateCacheModel.modifiedBy = getModifiedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spMailTemplateCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spMailTemplateCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		spMailTemplateCacheModel.parentTempalteId = getParentTempalteId();

		spMailTemplateCacheModel.versionNumber = getVersionNumber();

		String versionNumber = spMailTemplateCacheModel.versionNumber;

		if ((versionNumber != null) && (versionNumber.length() == 0)) {
			spMailTemplateCacheModel.versionNumber = null;
		}

		spMailTemplateCacheModel.fromAddress = getFromAddress();

		String fromAddress = spMailTemplateCacheModel.fromAddress;

		if ((fromAddress != null) && (fromAddress.length() == 0)) {
			spMailTemplateCacheModel.fromAddress = null;
		}

		spMailTemplateCacheModel.fromName = getFromName();

		String fromName = spMailTemplateCacheModel.fromName;

		if ((fromName != null) && (fromName.length() == 0)) {
			spMailTemplateCacheModel.fromName = null;
		}

		return spMailTemplateCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{spMailTemplateId=");
		sb.append(getSpMailTemplateId());
		sb.append(", productTypeId=");
		sb.append(getProductTypeId());
		sb.append(", subProductTypeId=");
		sb.append(getSubProductTypeId());
		sb.append(", templateName=");
		sb.append(getTemplateName());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", subject=");
		sb.append(getSubject());
		sb.append(", htmlContent=");
		sb.append(getHtmlContent());
		sb.append(", textContent=");
		sb.append(getTextContent());
		sb.append(", htmlUpload=");
		sb.append(getHtmlUpload());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", createBy=");
		sb.append(getCreateBy());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", parentTempalteId=");
		sb.append(getParentTempalteId());
		sb.append(", versionNumber=");
		sb.append(getVersionNumber());
		sb.append(", fromAddress=");
		sb.append(getFromAddress());
		sb.append(", fromName=");
		sb.append(getFromName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.mail.model.SPMailTemplate");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spMailTemplateId</column-name><column-value><![CDATA[");
		sb.append(getSpMailTemplateId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>productTypeId</column-name><column-value><![CDATA[");
		sb.append(getProductTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subProductTypeId</column-name><column-value><![CDATA[");
		sb.append(getSubProductTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateName</column-name><column-value><![CDATA[");
		sb.append(getTemplateName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subject</column-name><column-value><![CDATA[");
		sb.append(getSubject());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>htmlContent</column-name><column-value><![CDATA[");
		sb.append(getHtmlContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>textContent</column-name><column-value><![CDATA[");
		sb.append(getTextContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>htmlUpload</column-name><column-value><![CDATA[");
		sb.append(getHtmlUpload());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createBy</column-name><column-value><![CDATA[");
		sb.append(getCreateBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>parentTempalteId</column-name><column-value><![CDATA[");
		sb.append(getParentTempalteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>versionNumber</column-name><column-value><![CDATA[");
		sb.append(getVersionNumber());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromAddress</column-name><column-value><![CDATA[");
		sb.append(getFromAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromName</column-name><column-value><![CDATA[");
		sb.append(getFromName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPMailTemplate.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPMailTemplate.class
		};
	private long _spMailTemplateId;
	private long _productTypeId;
	private long _originalProductTypeId;
	private boolean _setOriginalProductTypeId;
	private long _subProductTypeId;
	private long _originalSubProductTypeId;
	private boolean _setOriginalSubProductTypeId;
	private String _templateName;
	private String _originalTemplateName;
	private long _groupId;
	private long _companyId;
	private String _subject;
	private String _htmlContent;
	private String _textContent;
	private boolean _htmlUpload;
	private boolean _status;
	private boolean _originalStatus;
	private boolean _setOriginalStatus;
	private long _createBy;
	private Date _createDate;
	private long _modifiedBy;
	private Date _modifiedDate;
	private long _parentTempalteId;
	private long _originalParentTempalteId;
	private boolean _setOriginalParentTempalteId;
	private String _versionNumber;
	private String _originalVersionNumber;
	private String _fromAddress;
	private String _fromName;
	private long _columnBitmask;
	private SPMailTemplate _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.extendedprofile.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.extendedprofile.model.SPJobRole;
import com.sambaash.platform.srv.extendedprofile.model.SPJobRoleModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPJobRole service. Represents a row in the &quot;SPJobRole&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.extendedprofile.model.SPJobRoleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPJobRoleImpl}.
 * </p>
 *
 * @author harini
 * @see SPJobRoleImpl
 * @see com.sambaash.platform.srv.extendedprofile.model.SPJobRole
 * @see com.sambaash.platform.srv.extendedprofile.model.SPJobRoleModel
 * @generated
 */
public class SPJobRoleModelImpl extends BaseModelImpl<SPJobRole>
	implements SPJobRoleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p job role model instance should use the {@link com.sambaash.platform.srv.extendedprofile.model.SPJobRole} interface instead.
	 */
	public static final String TABLE_NAME = "SPJobRole";
	public static final Object[][] TABLE_COLUMNS = {
			{ "spJobRoleId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "functionalGroupId", Types.BIGINT },
			{ "JobLevelId", Types.BIGINT },
			{ "careerPathId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table SPJobRole (spJobRoleId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,functionalGroupId BIGINT(20),JobLevelId BIGINT(20),careerPathId BIGINT(20))";
	public static final String TABLE_SQL_DROP = "drop table SPJobRole";
	public static final String ORDER_BY_JPQL = " ORDER BY spJobRole.userId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPJobRole.userId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.extendedprofile.model.SPJobRole"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.extendedprofile.model.SPJobRole"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.extendedprofile.model.SPJobRole"),
			true);
	public static long USERID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.extendedprofile.model.SPJobRole"));

	public SPJobRoleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spJobRoleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpJobRoleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spJobRoleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPJobRole.class;
	}

	@Override
	public String getModelClassName() {
		return SPJobRole.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("spJobRoleId", getSpJobRoleId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("functionalGroupId", getFunctionalGroupId());
		attributes.put("JobLevelId", getJobLevelId());
		attributes.put("careerPathId", getCareerPathId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long spJobRoleId = (Long)attributes.get("spJobRoleId");

		if (spJobRoleId != null) {
			setSpJobRoleId(spJobRoleId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long functionalGroupId = (Long)attributes.get("functionalGroupId");

		if (functionalGroupId != null) {
			setFunctionalGroupId(functionalGroupId);
		}

		Long JobLevelId = (Long)attributes.get("JobLevelId");

		if (JobLevelId != null) {
			setJobLevelId(JobLevelId);
		}

		Long careerPathId = (Long)attributes.get("careerPathId");

		if (careerPathId != null) {
			setCareerPathId(careerPathId);
		}
	}

	@Override
	public long getSpJobRoleId() {
		return _spJobRoleId;
	}

	@Override
	public void setSpJobRoleId(long spJobRoleId) {
		_spJobRoleId = spJobRoleId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask = -1L;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getFunctionalGroupId() {
		return _functionalGroupId;
	}

	@Override
	public void setFunctionalGroupId(long functionalGroupId) {
		_functionalGroupId = functionalGroupId;
	}

	@Override
	public long getJobLevelId() {
		return _JobLevelId;
	}

	@Override
	public void setJobLevelId(long JobLevelId) {
		_JobLevelId = JobLevelId;
	}

	@Override
	public long getCareerPathId() {
		return _careerPathId;
	}

	@Override
	public void setCareerPathId(long careerPathId) {
		_careerPathId = careerPathId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPJobRole.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPJobRole toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPJobRole)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPJobRoleImpl spJobRoleImpl = new SPJobRoleImpl();

		spJobRoleImpl.setSpJobRoleId(getSpJobRoleId());
		spJobRoleImpl.setGroupId(getGroupId());
		spJobRoleImpl.setCompanyId(getCompanyId());
		spJobRoleImpl.setUserId(getUserId());
		spJobRoleImpl.setUserName(getUserName());
		spJobRoleImpl.setCreateDate(getCreateDate());
		spJobRoleImpl.setModifiedDate(getModifiedDate());
		spJobRoleImpl.setFunctionalGroupId(getFunctionalGroupId());
		spJobRoleImpl.setJobLevelId(getJobLevelId());
		spJobRoleImpl.setCareerPathId(getCareerPathId());

		spJobRoleImpl.resetOriginalValues();

		return spJobRoleImpl;
	}

	@Override
	public int compareTo(SPJobRole spJobRole) {
		int value = 0;

		if (getUserId() < spJobRole.getUserId()) {
			value = -1;
		}
		else if (getUserId() > spJobRole.getUserId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPJobRole)) {
			return false;
		}

		SPJobRole spJobRole = (SPJobRole)obj;

		long primaryKey = spJobRole.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPJobRoleModelImpl spJobRoleModelImpl = this;

		spJobRoleModelImpl._originalUserId = spJobRoleModelImpl._userId;

		spJobRoleModelImpl._setOriginalUserId = false;

		spJobRoleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPJobRole> toCacheModel() {
		SPJobRoleCacheModel spJobRoleCacheModel = new SPJobRoleCacheModel();

		spJobRoleCacheModel.spJobRoleId = getSpJobRoleId();

		spJobRoleCacheModel.groupId = getGroupId();

		spJobRoleCacheModel.companyId = getCompanyId();

		spJobRoleCacheModel.userId = getUserId();

		spJobRoleCacheModel.userName = getUserName();

		String userName = spJobRoleCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			spJobRoleCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			spJobRoleCacheModel.createDate = createDate.getTime();
		}
		else {
			spJobRoleCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spJobRoleCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spJobRoleCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		spJobRoleCacheModel.functionalGroupId = getFunctionalGroupId();

		spJobRoleCacheModel.JobLevelId = getJobLevelId();

		spJobRoleCacheModel.careerPathId = getCareerPathId();

		return spJobRoleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{spJobRoleId=");
		sb.append(getSpJobRoleId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", functionalGroupId=");
		sb.append(getFunctionalGroupId());
		sb.append(", JobLevelId=");
		sb.append(getJobLevelId());
		sb.append(", careerPathId=");
		sb.append(getCareerPathId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.sambaash.platform.srv.extendedprofile.model.SPJobRole");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>spJobRoleId</column-name><column-value><![CDATA[");
		sb.append(getSpJobRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>functionalGroupId</column-name><column-value><![CDATA[");
		sb.append(getFunctionalGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>JobLevelId</column-name><column-value><![CDATA[");
		sb.append(getJobLevelId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>careerPathId</column-name><column-value><![CDATA[");
		sb.append(getCareerPathId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPJobRole.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPJobRole.class
		};
	private long _spJobRoleId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _functionalGroupId;
	private long _JobLevelId;
	private long _careerPathId;
	private long _columnBitmask;
	private SPJobRole _escapedModel;
}
/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.sambaash.platform.srv.spchallenge.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.lar.StagedModelType;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.sambaash.platform.srv.spchallenge.model.SPChallengeApplicant;
import com.sambaash.platform.srv.spchallenge.model.SPChallengeApplicantModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SPChallengeApplicant service. Represents a row in the &quot;SPChallengeApplicant&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sambaash.platform.srv.spchallenge.model.SPChallengeApplicantModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SPChallengeApplicantImpl}.
 * </p>
 *
 * @author pradeep
 * @see SPChallengeApplicantImpl
 * @see com.sambaash.platform.srv.spchallenge.model.SPChallengeApplicant
 * @see com.sambaash.platform.srv.spchallenge.model.SPChallengeApplicantModel
 * @generated
 */
public class SPChallengeApplicantModelImpl extends BaseModelImpl<SPChallengeApplicant>
	implements SPChallengeApplicantModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a s p challenge applicant model instance should use the {@link com.sambaash.platform.srv.spchallenge.model.SPChallengeApplicant} interface instead.
	 */
	public static final String TABLE_NAME = "SPChallengeApplicant";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "spChallengeApplicantId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "applicantRefId", Types.BIGINT },
			{ "applicantType", Types.VARCHAR },
			{ "spChallengeId", Types.BIGINT },
			{ "q1", Types.VARCHAR },
			{ "q2", Types.VARCHAR },
			{ "q3", Types.VARCHAR },
			{ "q4", Types.VARCHAR },
			{ "q5", Types.VARCHAR },
			{ "q6", Types.VARCHAR },
			{ "q7", Types.VARCHAR },
			{ "q8", Types.VARCHAR },
			{ "q9", Types.VARCHAR },
			{ "q10", Types.VARCHAR },
			{ "q11", Types.VARCHAR },
			{ "q12", Types.VARCHAR },
			{ "q13", Types.VARCHAR },
			{ "q14", Types.VARCHAR },
			{ "q15", Types.VARCHAR },
			{ "q16", Types.VARCHAR },
			{ "q17", Types.VARCHAR },
			{ "q18", Types.VARCHAR },
			{ "q19", Types.VARCHAR },
			{ "q20", Types.VARCHAR },
			{ "customStatus1", Types.BOOLEAN },
			{ "customStatus2", Types.BOOLEAN },
			{ "active_", Types.BOOLEAN },
			{ "applicationStatus", Types.INTEGER },
			{ "notificationStatus", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table SPChallengeApplicant (uuid_ VARCHAR(75) null,spChallengeApplicantId BIGINT(20) not null primary key,groupId BIGINT(20),companyId BIGINT(20),userId BIGINT(20),userName VARCHAR(75) null,createDate DATETIME null,modifiedDate DATETIME null,applicantRefId BIGINT(20),applicantType VARCHAR(75) null,spChallengeId BIGINT(20),q1 LONGTEXT null,q2 LONGTEXT null,q3 LONGTEXT null,q4 LONGTEXT null,q5 LONGTEXT null,q6 LONGTEXT null,q7 LONGTEXT null,q8 LONGTEXT null,q9 LONGTEXT null,q10 LONGTEXT null,q11 LONGTEXT null,q12 LONGTEXT null,q13 LONGTEXT null,q14 LONGTEXT null,q15 LONGTEXT null,q16 LONGTEXT null,q17 LONGTEXT null,q18 LONGTEXT null,q19 LONGTEXT null,q20 LONGTEXT null,customStatus1 BOOLEAN,customStatus2 BOOLEAN,active_ BOOLEAN,applicationStatus INTEGER,notificationStatus INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table SPChallengeApplicant";
	public static final String ORDER_BY_JPQL = " ORDER BY spChallengeApplicant.spChallengeApplicantId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SPChallengeApplicant.spChallengeApplicantId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.sambaash.platform.srv.spchallenge.model.SPChallengeApplicant"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.sambaash.platform.srv.spchallenge.model.SPChallengeApplicant"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.sambaash.platform.srv.spchallenge.model.SPChallengeApplicant"),
			true);
	public static long APPLICANTREFID_COLUMN_BITMASK = 1L;
	public static long COMPANYID_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;
	public static long SPCHALLENGEID_COLUMN_BITMASK = 8L;
	public static long UUID_COLUMN_BITMASK = 16L;
	public static long SPCHALLENGEAPPLICANTID_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.sambaash.platform.srv.spchallenge.model.SPChallengeApplicant"));

	public SPChallengeApplicantModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _spChallengeApplicantId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSpChallengeApplicantId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _spChallengeApplicantId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SPChallengeApplicant.class;
	}

	@Override
	public String getModelClassName() {
		return SPChallengeApplicant.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("spChallengeApplicantId", getSpChallengeApplicantId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("applicantRefId", getApplicantRefId());
		attributes.put("applicantType", getApplicantType());
		attributes.put("spChallengeId", getSpChallengeId());
		attributes.put("q1", getQ1());
		attributes.put("q2", getQ2());
		attributes.put("q3", getQ3());
		attributes.put("q4", getQ4());
		attributes.put("q5", getQ5());
		attributes.put("q6", getQ6());
		attributes.put("q7", getQ7());
		attributes.put("q8", getQ8());
		attributes.put("q9", getQ9());
		attributes.put("q10", getQ10());
		attributes.put("q11", getQ11());
		attributes.put("q12", getQ12());
		attributes.put("q13", getQ13());
		attributes.put("q14", getQ14());
		attributes.put("q15", getQ15());
		attributes.put("q16", getQ16());
		attributes.put("q17", getQ17());
		attributes.put("q18", getQ18());
		attributes.put("q19", getQ19());
		attributes.put("q20", getQ20());
		attributes.put("customStatus1", getCustomStatus1());
		attributes.put("customStatus2", getCustomStatus2());
		attributes.put("active", getActive());
		attributes.put("applicationStatus", getApplicationStatus());
		attributes.put("notificationStatus", getNotificationStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long spChallengeApplicantId = (Long)attributes.get(
				"spChallengeApplicantId");

		if (spChallengeApplicantId != null) {
			setSpChallengeApplicantId(spChallengeApplicantId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long applicantRefId = (Long)attributes.get("applicantRefId");

		if (applicantRefId != null) {
			setApplicantRefId(applicantRefId);
		}

		String applicantType = (String)attributes.get("applicantType");

		if (applicantType != null) {
			setApplicantType(applicantType);
		}

		Long spChallengeId = (Long)attributes.get("spChallengeId");

		if (spChallengeId != null) {
			setSpChallengeId(spChallengeId);
		}

		String q1 = (String)attributes.get("q1");

		if (q1 != null) {
			setQ1(q1);
		}

		String q2 = (String)attributes.get("q2");

		if (q2 != null) {
			setQ2(q2);
		}

		String q3 = (String)attributes.get("q3");

		if (q3 != null) {
			setQ3(q3);
		}

		String q4 = (String)attributes.get("q4");

		if (q4 != null) {
			setQ4(q4);
		}

		String q5 = (String)attributes.get("q5");

		if (q5 != null) {
			setQ5(q5);
		}

		String q6 = (String)attributes.get("q6");

		if (q6 != null) {
			setQ6(q6);
		}

		String q7 = (String)attributes.get("q7");

		if (q7 != null) {
			setQ7(q7);
		}

		String q8 = (String)attributes.get("q8");

		if (q8 != null) {
			setQ8(q8);
		}

		String q9 = (String)attributes.get("q9");

		if (q9 != null) {
			setQ9(q9);
		}

		String q10 = (String)attributes.get("q10");

		if (q10 != null) {
			setQ10(q10);
		}

		String q11 = (String)attributes.get("q11");

		if (q11 != null) {
			setQ11(q11);
		}

		String q12 = (String)attributes.get("q12");

		if (q12 != null) {
			setQ12(q12);
		}

		String q13 = (String)attributes.get("q13");

		if (q13 != null) {
			setQ13(q13);
		}

		String q14 = (String)attributes.get("q14");

		if (q14 != null) {
			setQ14(q14);
		}

		String q15 = (String)attributes.get("q15");

		if (q15 != null) {
			setQ15(q15);
		}

		String q16 = (String)attributes.get("q16");

		if (q16 != null) {
			setQ16(q16);
		}

		String q17 = (String)attributes.get("q17");

		if (q17 != null) {
			setQ17(q17);
		}

		String q18 = (String)attributes.get("q18");

		if (q18 != null) {
			setQ18(q18);
		}

		String q19 = (String)attributes.get("q19");

		if (q19 != null) {
			setQ19(q19);
		}

		String q20 = (String)attributes.get("q20");

		if (q20 != null) {
			setQ20(q20);
		}

		Boolean customStatus1 = (Boolean)attributes.get("customStatus1");

		if (customStatus1 != null) {
			setCustomStatus1(customStatus1);
		}

		Boolean customStatus2 = (Boolean)attributes.get("customStatus2");

		if (customStatus2 != null) {
			setCustomStatus2(customStatus2);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Integer applicationStatus = (Integer)attributes.get("applicationStatus");

		if (applicationStatus != null) {
			setApplicationStatus(applicationStatus);
		}

		Integer notificationStatus = (Integer)attributes.get(
				"notificationStatus");

		if (notificationStatus != null) {
			setNotificationStatus(notificationStatus);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getSpChallengeApplicantId() {
		return _spChallengeApplicantId;
	}

	@Override
	public void setSpChallengeApplicantId(long spChallengeApplicantId) {
		_spChallengeApplicantId = spChallengeApplicantId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getApplicantRefId() {
		return _applicantRefId;
	}

	@Override
	public void setApplicantRefId(long applicantRefId) {
		_columnBitmask |= APPLICANTREFID_COLUMN_BITMASK;

		if (!_setOriginalApplicantRefId) {
			_setOriginalApplicantRefId = true;

			_originalApplicantRefId = _applicantRefId;
		}

		_applicantRefId = applicantRefId;
	}

	public long getOriginalApplicantRefId() {
		return _originalApplicantRefId;
	}

	@Override
	public String getApplicantType() {
		if (_applicantType == null) {
			return StringPool.BLANK;
		}
		else {
			return _applicantType;
		}
	}

	@Override
	public void setApplicantType(String applicantType) {
		_applicantType = applicantType;
	}

	@Override
	public long getSpChallengeId() {
		return _spChallengeId;
	}

	@Override
	public void setSpChallengeId(long spChallengeId) {
		_columnBitmask |= SPCHALLENGEID_COLUMN_BITMASK;

		if (!_setOriginalSpChallengeId) {
			_setOriginalSpChallengeId = true;

			_originalSpChallengeId = _spChallengeId;
		}

		_spChallengeId = spChallengeId;
	}

	public long getOriginalSpChallengeId() {
		return _originalSpChallengeId;
	}

	@Override
	public String getQ1() {
		if (_q1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q1;
		}
	}

	@Override
	public void setQ1(String q1) {
		_q1 = q1;
	}

	@Override
	public String getQ2() {
		if (_q2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q2;
		}
	}

	@Override
	public void setQ2(String q2) {
		_q2 = q2;
	}

	@Override
	public String getQ3() {
		if (_q3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q3;
		}
	}

	@Override
	public void setQ3(String q3) {
		_q3 = q3;
	}

	@Override
	public String getQ4() {
		if (_q4 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q4;
		}
	}

	@Override
	public void setQ4(String q4) {
		_q4 = q4;
	}

	@Override
	public String getQ5() {
		if (_q5 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q5;
		}
	}

	@Override
	public void setQ5(String q5) {
		_q5 = q5;
	}

	@Override
	public String getQ6() {
		if (_q6 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q6;
		}
	}

	@Override
	public void setQ6(String q6) {
		_q6 = q6;
	}

	@Override
	public String getQ7() {
		if (_q7 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q7;
		}
	}

	@Override
	public void setQ7(String q7) {
		_q7 = q7;
	}

	@Override
	public String getQ8() {
		if (_q8 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q8;
		}
	}

	@Override
	public void setQ8(String q8) {
		_q8 = q8;
	}

	@Override
	public String getQ9() {
		if (_q9 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q9;
		}
	}

	@Override
	public void setQ9(String q9) {
		_q9 = q9;
	}

	@Override
	public String getQ10() {
		if (_q10 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q10;
		}
	}

	@Override
	public void setQ10(String q10) {
		_q10 = q10;
	}

	@Override
	public String getQ11() {
		if (_q11 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q11;
		}
	}

	@Override
	public void setQ11(String q11) {
		_q11 = q11;
	}

	@Override
	public String getQ12() {
		if (_q12 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q12;
		}
	}

	@Override
	public void setQ12(String q12) {
		_q12 = q12;
	}

	@Override
	public String getQ13() {
		if (_q13 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q13;
		}
	}

	@Override
	public void setQ13(String q13) {
		_q13 = q13;
	}

	@Override
	public String getQ14() {
		if (_q14 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q14;
		}
	}

	@Override
	public void setQ14(String q14) {
		_q14 = q14;
	}

	@Override
	public String getQ15() {
		if (_q15 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q15;
		}
	}

	@Override
	public void setQ15(String q15) {
		_q15 = q15;
	}

	@Override
	public String getQ16() {
		if (_q16 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q16;
		}
	}

	@Override
	public void setQ16(String q16) {
		_q16 = q16;
	}

	@Override
	public String getQ17() {
		if (_q17 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q17;
		}
	}

	@Override
	public void setQ17(String q17) {
		_q17 = q17;
	}

	@Override
	public String getQ18() {
		if (_q18 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q18;
		}
	}

	@Override
	public void setQ18(String q18) {
		_q18 = q18;
	}

	@Override
	public String getQ19() {
		if (_q19 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q19;
		}
	}

	@Override
	public void setQ19(String q19) {
		_q19 = q19;
	}

	@Override
	public String getQ20() {
		if (_q20 == null) {
			return StringPool.BLANK;
		}
		else {
			return _q20;
		}
	}

	@Override
	public void setQ20(String q20) {
		_q20 = q20;
	}

	@Override
	public boolean getCustomStatus1() {
		return _customStatus1;
	}

	@Override
	public boolean isCustomStatus1() {
		return _customStatus1;
	}

	@Override
	public void setCustomStatus1(boolean customStatus1) {
		_customStatus1 = customStatus1;
	}

	@Override
	public boolean getCustomStatus2() {
		return _customStatus2;
	}

	@Override
	public boolean isCustomStatus2() {
		return _customStatus2;
	}

	@Override
	public void setCustomStatus2(boolean customStatus2) {
		_customStatus2 = customStatus2;
	}

	@Override
	public boolean getActive() {
		return _active;
	}

	@Override
	public boolean isActive() {
		return _active;
	}

	@Override
	public void setActive(boolean active) {
		_active = active;
	}

	@Override
	public int getApplicationStatus() {
		return _applicationStatus;
	}

	@Override
	public void setApplicationStatus(int applicationStatus) {
		_applicationStatus = applicationStatus;
	}

	@Override
	public int getNotificationStatus() {
		return _notificationStatus;
	}

	@Override
	public void setNotificationStatus(int notificationStatus) {
		_notificationStatus = notificationStatus;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				SPChallengeApplicant.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SPChallengeApplicant.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SPChallengeApplicant toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SPChallengeApplicant)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SPChallengeApplicantImpl spChallengeApplicantImpl = new SPChallengeApplicantImpl();

		spChallengeApplicantImpl.setUuid(getUuid());
		spChallengeApplicantImpl.setSpChallengeApplicantId(getSpChallengeApplicantId());
		spChallengeApplicantImpl.setGroupId(getGroupId());
		spChallengeApplicantImpl.setCompanyId(getCompanyId());
		spChallengeApplicantImpl.setUserId(getUserId());
		spChallengeApplicantImpl.setUserName(getUserName());
		spChallengeApplicantImpl.setCreateDate(getCreateDate());
		spChallengeApplicantImpl.setModifiedDate(getModifiedDate());
		spChallengeApplicantImpl.setApplicantRefId(getApplicantRefId());
		spChallengeApplicantImpl.setApplicantType(getApplicantType());
		spChallengeApplicantImpl.setSpChallengeId(getSpChallengeId());
		spChallengeApplicantImpl.setQ1(getQ1());
		spChallengeApplicantImpl.setQ2(getQ2());
		spChallengeApplicantImpl.setQ3(getQ3());
		spChallengeApplicantImpl.setQ4(getQ4());
		spChallengeApplicantImpl.setQ5(getQ5());
		spChallengeApplicantImpl.setQ6(getQ6());
		spChallengeApplicantImpl.setQ7(getQ7());
		spChallengeApplicantImpl.setQ8(getQ8());
		spChallengeApplicantImpl.setQ9(getQ9());
		spChallengeApplicantImpl.setQ10(getQ10());
		spChallengeApplicantImpl.setQ11(getQ11());
		spChallengeApplicantImpl.setQ12(getQ12());
		spChallengeApplicantImpl.setQ13(getQ13());
		spChallengeApplicantImpl.setQ14(getQ14());
		spChallengeApplicantImpl.setQ15(getQ15());
		spChallengeApplicantImpl.setQ16(getQ16());
		spChallengeApplicantImpl.setQ17(getQ17());
		spChallengeApplicantImpl.setQ18(getQ18());
		spChallengeApplicantImpl.setQ19(getQ19());
		spChallengeApplicantImpl.setQ20(getQ20());
		spChallengeApplicantImpl.setCustomStatus1(getCustomStatus1());
		spChallengeApplicantImpl.setCustomStatus2(getCustomStatus2());
		spChallengeApplicantImpl.setActive(getActive());
		spChallengeApplicantImpl.setApplicationStatus(getApplicationStatus());
		spChallengeApplicantImpl.setNotificationStatus(getNotificationStatus());

		spChallengeApplicantImpl.resetOriginalValues();

		return spChallengeApplicantImpl;
	}

	@Override
	public int compareTo(SPChallengeApplicant spChallengeApplicant) {
		long primaryKey = spChallengeApplicant.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SPChallengeApplicant)) {
			return false;
		}

		SPChallengeApplicant spChallengeApplicant = (SPChallengeApplicant)obj;

		long primaryKey = spChallengeApplicant.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		SPChallengeApplicantModelImpl spChallengeApplicantModelImpl = this;

		spChallengeApplicantModelImpl._originalUuid = spChallengeApplicantModelImpl._uuid;

		spChallengeApplicantModelImpl._originalGroupId = spChallengeApplicantModelImpl._groupId;

		spChallengeApplicantModelImpl._setOriginalGroupId = false;

		spChallengeApplicantModelImpl._originalCompanyId = spChallengeApplicantModelImpl._companyId;

		spChallengeApplicantModelImpl._setOriginalCompanyId = false;

		spChallengeApplicantModelImpl._originalApplicantRefId = spChallengeApplicantModelImpl._applicantRefId;

		spChallengeApplicantModelImpl._setOriginalApplicantRefId = false;

		spChallengeApplicantModelImpl._originalSpChallengeId = spChallengeApplicantModelImpl._spChallengeId;

		spChallengeApplicantModelImpl._setOriginalSpChallengeId = false;

		spChallengeApplicantModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SPChallengeApplicant> toCacheModel() {
		SPChallengeApplicantCacheModel spChallengeApplicantCacheModel = new SPChallengeApplicantCacheModel();

		spChallengeApplicantCacheModel.uuid = getUuid();

		String uuid = spChallengeApplicantCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			spChallengeApplicantCacheModel.uuid = null;
		}

		spChallengeApplicantCacheModel.spChallengeApplicantId = getSpChallengeApplicantId();

		spChallengeApplicantCacheModel.groupId = getGroupId();

		spChallengeApplicantCacheModel.companyId = getCompanyId();

		spChallengeApplicantCacheModel.userId = getUserId();

		spChallengeApplicantCacheModel.userName = getUserName();

		String userName = spChallengeApplicantCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			spChallengeApplicantCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			spChallengeApplicantCacheModel.createDate = createDate.getTime();
		}
		else {
			spChallengeApplicantCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			spChallengeApplicantCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			spChallengeApplicantCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		spChallengeApplicantCacheModel.applicantRefId = getApplicantRefId();

		spChallengeApplicantCacheModel.applicantType = getApplicantType();

		String applicantType = spChallengeApplicantCacheModel.applicantType;

		if ((applicantType != null) && (applicantType.length() == 0)) {
			spChallengeApplicantCacheModel.applicantType = null;
		}

		spChallengeApplicantCacheModel.spChallengeId = getSpChallengeId();

		spChallengeApplicantCacheModel.q1 = getQ1();

		String q1 = spChallengeApplicantCacheModel.q1;

		if ((q1 != null) && (q1.length() == 0)) {
			spChallengeApplicantCacheModel.q1 = null;
		}

		spChallengeApplicantCacheModel.q2 = getQ2();

		String q2 = spChallengeApplicantCacheModel.q2;

		if ((q2 != null) && (q2.length() == 0)) {
			spChallengeApplicantCacheModel.q2 = null;
		}

		spChallengeApplicantCacheModel.q3 = getQ3();

		String q3 = spChallengeApplicantCacheModel.q3;

		if ((q3 != null) && (q3.length() == 0)) {
			spChallengeApplicantCacheModel.q3 = null;
		}

		spChallengeApplicantCacheModel.q4 = getQ4();

		String q4 = spChallengeApplicantCacheModel.q4;

		if ((q4 != null) && (q4.length() == 0)) {
			spChallengeApplicantCacheModel.q4 = null;
		}

		spChallengeApplicantCacheModel.q5 = getQ5();

		String q5 = spChallengeApplicantCacheModel.q5;

		if ((q5 != null) && (q5.length() == 0)) {
			spChallengeApplicantCacheModel.q5 = null;
		}

		spChallengeApplicantCacheModel.q6 = getQ6();

		String q6 = spChallengeApplicantCacheModel.q6;

		if ((q6 != null) && (q6.length() == 0)) {
			spChallengeApplicantCacheModel.q6 = null;
		}

		spChallengeApplicantCacheModel.q7 = getQ7();

		String q7 = spChallengeApplicantCacheModel.q7;

		if ((q7 != null) && (q7.length() == 0)) {
			spChallengeApplicantCacheModel.q7 = null;
		}

		spChallengeApplicantCacheModel.q8 = getQ8();

		String q8 = spChallengeApplicantCacheModel.q8;

		if ((q8 != null) && (q8.length() == 0)) {
			spChallengeApplicantCacheModel.q8 = null;
		}

		spChallengeApplicantCacheModel.q9 = getQ9();

		String q9 = spChallengeApplicantCacheModel.q9;

		if ((q9 != null) && (q9.length() == 0)) {
			spChallengeApplicantCacheModel.q9 = null;
		}

		spChallengeApplicantCacheModel.q10 = getQ10();

		String q10 = spChallengeApplicantCacheModel.q10;

		if ((q10 != null) && (q10.length() == 0)) {
			spChallengeApplicantCacheModel.q10 = null;
		}

		spChallengeApplicantCacheModel.q11 = getQ11();

		String q11 = spChallengeApplicantCacheModel.q11;

		if ((q11 != null) && (q11.length() == 0)) {
			spChallengeApplicantCacheModel.q11 = null;
		}

		spChallengeApplicantCacheModel.q12 = getQ12();

		String q12 = spChallengeApplicantCacheModel.q12;

		if ((q12 != null) && (q12.length() == 0)) {
			spChallengeApplicantCacheModel.q12 = null;
		}

		spChallengeApplicantCacheModel.q13 = getQ13();

		String q13 = spChallengeApplicantCacheModel.q13;

		if ((q13 != null) && (q13.length() == 0)) {
			spChallengeApplicantCacheModel.q13 = null;
		}

		spChallengeApplicantCacheModel.q14 = getQ14();

		String q14 = spChallengeApplicantCacheModel.q14;

		if ((q14 != null) && (q14.length() == 0)) {
			spChallengeApplicantCacheModel.q14 = null;
		}

		spChallengeApplicantCacheModel.q15 = getQ15();

		String q15 = spChallengeApplicantCacheModel.q15;

		if ((q15 != null) && (q15.length() == 0)) {
			spChallengeApplicantCacheModel.q15 = null;
		}

		spChallengeApplicantCacheModel.q16 = getQ16();

		String q16 = spChallengeApplicantCacheModel.q16;

		if ((q16 != null) && (q16.length() == 0)) {
			spChallengeApplicantCacheModel.q16 = null;
		}

		spChallengeApplicantCacheModel.q17 = getQ17();

		String q17 = spChallengeApplicantCacheModel.q17;

		if ((q17 != null) && (q17.length() == 0)) {
			spChallengeApplicantCacheModel.q17 = null;
		}

		spChallengeApplicantCacheModel.q18 = getQ18();

		String q18 = spChallengeApplicantCacheModel.q18;

		if ((q18 != null) && (q18.length() == 0)) {
			spChallengeApplicantCacheModel.q18 = null;
		}

		spChallengeApplicantCacheModel.q19 = getQ19();

		String q19 = spChallengeApplicantCacheModel.q19;

		if ((q19 != null) && (q19.length() == 0)) {
			spChallengeApplicantCacheModel.q19 = null;
		}

		spChallengeApplicantCacheModel.q20 = getQ20();

		String q20 = spChallengeApplicantCacheModel.q20;

		if ((q20 != null) && (q20.length() == 0)) {
			spChallengeApplicantCacheModel.q20 = null;
		}

		spChallengeApplicantCacheModel.customStatus1 = getCustomStatus1();

		spChallengeApplicantCacheModel.customStatus2 = getCustomStatus2();

		spChallengeApplicantCacheModel.active = getActive();

		spChallengeApplicantCacheModel.applicationStatus = getApplicationStatus();

		spChallengeApplicantCacheModel.notificationStatus = getNotificationStatus();

		return spChallengeApplicantCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(73);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", spChallengeApplicantId=");
		sb.append(getSpChallengeApplicantId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", applicantRefId=");
		sb.append(getApplicantRefId());
		sb.append(", applicantType=");
		sb.append(getApplicantType());
		sb.append(", spChallengeId=");
		sb.append(getSpChallengeId());
		sb.append(", q1=");
		sb.append(getQ1());
		sb.append(", q2=");
		sb.append(getQ2());
		sb.append(", q3=");
		sb.append(getQ3());
		sb.append(", q4=");
		sb.append(getQ4());
		sb.append(", q5=");
		sb.append(getQ5());
		sb.append(", q6=");
		sb.append(getQ6());
		sb.append(", q7=");
		sb.append(getQ7());
		sb.append(", q8=");
		sb.append(getQ8());
		sb.append(", q9=");
		sb.append(getQ9());
		sb.append(", q10=");
		sb.append(getQ10());
		sb.append(", q11=");
		sb.append(getQ11());
		sb.append(", q12=");
		sb.append(getQ12());
		sb.append(", q13=");
		sb.append(getQ13());
		sb.append(", q14=");
		sb.append(getQ14());
		sb.append(", q15=");
		sb.append(getQ15());
		sb.append(", q16=");
		sb.append(getQ16());
		sb.append(", q17=");
		sb.append(getQ17());
		sb.append(", q18=");
		sb.append(getQ18());
		sb.append(", q19=");
		sb.append(getQ19());
		sb.append(", q20=");
		sb.append(getQ20());
		sb.append(", customStatus1=");
		sb.append(getCustomStatus1());
		sb.append(", customStatus2=");
		sb.append(getCustomStatus2());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", applicationStatus=");
		sb.append(getApplicationStatus());
		sb.append(", notificationStatus=");
		sb.append(getNotificationStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(112);

		sb.append("<model><model-name>");
		sb.append(
			"com.sambaash.platform.srv.spchallenge.model.SPChallengeApplicant");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spChallengeApplicantId</column-name><column-value><![CDATA[");
		sb.append(getSpChallengeApplicantId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantRefId</column-name><column-value><![CDATA[");
		sb.append(getApplicantRefId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantType</column-name><column-value><![CDATA[");
		sb.append(getApplicantType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>spChallengeId</column-name><column-value><![CDATA[");
		sb.append(getSpChallengeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q1</column-name><column-value><![CDATA[");
		sb.append(getQ1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q2</column-name><column-value><![CDATA[");
		sb.append(getQ2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q3</column-name><column-value><![CDATA[");
		sb.append(getQ3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q4</column-name><column-value><![CDATA[");
		sb.append(getQ4());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q5</column-name><column-value><![CDATA[");
		sb.append(getQ5());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q6</column-name><column-value><![CDATA[");
		sb.append(getQ6());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q7</column-name><column-value><![CDATA[");
		sb.append(getQ7());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q8</column-name><column-value><![CDATA[");
		sb.append(getQ8());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q9</column-name><column-value><![CDATA[");
		sb.append(getQ9());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q10</column-name><column-value><![CDATA[");
		sb.append(getQ10());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q11</column-name><column-value><![CDATA[");
		sb.append(getQ11());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q12</column-name><column-value><![CDATA[");
		sb.append(getQ12());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q13</column-name><column-value><![CDATA[");
		sb.append(getQ13());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q14</column-name><column-value><![CDATA[");
		sb.append(getQ14());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q15</column-name><column-value><![CDATA[");
		sb.append(getQ15());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q16</column-name><column-value><![CDATA[");
		sb.append(getQ16());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q17</column-name><column-value><![CDATA[");
		sb.append(getQ17());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q18</column-name><column-value><![CDATA[");
		sb.append(getQ18());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q19</column-name><column-value><![CDATA[");
		sb.append(getQ19());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>q20</column-name><column-value><![CDATA[");
		sb.append(getQ20());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customStatus1</column-name><column-value><![CDATA[");
		sb.append(getCustomStatus1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>customStatus2</column-name><column-value><![CDATA[");
		sb.append(getCustomStatus2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationStatus</column-name><column-value><![CDATA[");
		sb.append(getApplicationStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notificationStatus</column-name><column-value><![CDATA[");
		sb.append(getNotificationStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = SPChallengeApplicant.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			SPChallengeApplicant.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _spChallengeApplicantId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _applicantRefId;
	private long _originalApplicantRefId;
	private boolean _setOriginalApplicantRefId;
	private String _applicantType;
	private long _spChallengeId;
	private long _originalSpChallengeId;
	private boolean _setOriginalSpChallengeId;
	private String _q1;
	private String _q2;
	private String _q3;
	private String _q4;
	private String _q5;
	private String _q6;
	private String _q7;
	private String _q8;
	private String _q9;
	private String _q10;
	private String _q11;
	private String _q12;
	private String _q13;
	private String _q14;
	private String _q15;
	private String _q16;
	private String _q17;
	private String _q18;
	private String _q19;
	private String _q20;
	private boolean _customStatus1;
	private boolean _customStatus2;
	private boolean _active;
	private int _applicationStatus;
	private int _notificationStatus;
	private long _columnBitmask;
	private SPChallengeApplicant _escapedModel;
}